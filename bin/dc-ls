#!/bin/bash

. /opt/dc/funcs/global

#
# Farben fuer Ausgabe definieren
#
COL_DEFAULT='\e[m'
COL_GREEN='\e[1;92m'
COL_ORANGE='\033[0;33m'
COL_GRAY='\033[1;30m'
COL_LGRAY='\033[1;37m'
COL_RED='\e[1;91m'
LINE="--------------------------------------------------------------------------------------------------------------"

_help() {
  echo ""
  echo "usage: dc-ls <options> [nodes|projects]"
  echo ""
  echo " options:"
  echo ""
  echo "  dc-ls --help             # show this help"
  echo "  dc-ls --active           # "
  echo "  dc-ls --node=<node_name> # show only this node"
  echo "  dc-ls --short            # list only node/project names"
  echo "  dc-ls --group=<group>    # show only nodes of group=<group> in '${MDE_DC_HOST_DIR}/*/node.yml'."
  echo "  dc-ls --inspect          # inspect and list"
  echo ""
}


####################################################################################################################################
#
# magic main
#
####################################################################################################################################

opt_active="0"
opt_short="0"
opt_inspect="0"
opt_group=""
opt_node=""
COPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --active)   opt_active="1"              ; shift ;;
    --help)     _help ; exit 0              ; shift ;;
    --short)    opt_short="1"               ; shift ;;
    --group=*)  opt_group=${1#"--group="}   ; shift ;;
    --node=*)   opt_node=${1#"--node="}     ; shift ;;
    --inspect)  opt_inspect="1"             ; shift ;; 
    *)  COPT="$COPT \"$1\""                 ; shift ;;
  esac
done
eval set -- $COPT

####################################################################################################################################
if [ "$1" = "projects" -o "$1" = "p"  ] ; then
  project_list=$( dc-list projects)
  if [ "$opt_short" = "1" ] ; then
    echo "$project_list"
    exit 0
  fi
  printf "%15s|%-2s|%-15s|%-20s|%-35s|%-35s|%s\n" "app" "#c" "nodes" "groups" "description" "main_container_image" "app_directory"
  printf "%15s|%-2s|%-15s|%-20s|%-35s|%-35s|%s\n" "${LINE:0:15}" "${LINE:0:2}" "${LINE:0:15}" "${LINE:0:20}" "${LINE:0:35}" "${LINE:0:35}" "${LINE:0:30}"
  for p in $project_list ; do
    p_nodes=$(   dc-yq '.projects.'$p'.dc.home.[].node' ${MDE_DC_YAML} )
    p_desc=$(    dc-yq '.projects.'$p'.dc.desc'         ${MDE_DC_YAML} )
    p_dir=$(     dc-yq '.projects.'$p'.project_dir'     ${MDE_DC_YAML} )
    p_groups=$(  dc-yq '.projects.'$p'.dc.group.[]'     ${MDE_DC_YAML} | tr '\n' ',' )
    p_groups=${p_groups%,}
    main_service=$( dc-yq '.projects.'$p'.dc.main_service'    ${MDE_DC_YAML} )
    p_image=$( dc-yq '.projects.'$p'.compose.services.'$main_service'.image' ${MDE_DC_YAML}  )
    xxx=""
    yyy=""
    ndc=$(dc-yq '(.projects.'$p'.compose.services.* | path ) [-1]' ${MDE_DC_YAML} | wc -l )
    for h in $p_nodes ; do
      if [ "$opt_inspect" = "1" ]  ; then
	      node_state=$( dc-node $h state )
	      if [ "$node_state" = "dock" -o "$node_state" = "dc"  ] ; then
          #nrc=$(dc -p $p -n $h compose ps --services --filter "status=running" | sed '/^\s*$/d'  | wc -l  )
          nrc=$(dc-node $h -p $p nrc)
	        color=$COL_RED
        elif [ "$node_state" = "off" ] ; then # node is defined as state=standby in node definition
	        nrc=0
	        color=$COL_GRAY
	      fi	
        if [ "$ndc" = "$nrc" ] ; then
          xxx="$xxx $h"
          yyy="$yyy $h"
        else
          xxx="$xxx $h"
          yyy="$yyy ${color}${h}${COL_LGRAY}"
        fi
      else
        xxx="$xxx $h"
        yyy="$yyy $h"

      fi
    done
    xxx=${xxx# }
    yyy=${yyy# }
    len=$((15+${#yyy}-${#xxx}))
    yyy="$yyy                               "
    yyy=${yyy:0:$len}
    if [ "$opt_inspect" != "1" ]  ; then
      COL_LGRAY=${COL_DEFAULT}  #if not inspect, print not lighten
    fi
    printf "${COL_LGRAY}%15s|%2s|%b${COL_LGRAY}|%-20s|%-35s|%-35s|%s${COL_DEFAULT}\n" "$p" "${ndc}" "${yyy}" "$p_groups" "${p_desc:0:35}" "${p_image:0:35}" "$p_dir" 
  done
  exit 0
fi

####################################################################################################################################
# nodes
####################################################################################################################################
HOST_DATA_DIR=$HOME/.dc/var/nodes
mkdir -p $HOST_DATA_DIR

if [ "$1" = "" ] ; then # "dc ls" list nodes with inspection
  opt_inspect="1"
fi

if [ "$opt_group" != "" ] ; then
  list=$(dc-yq '(.nodes.* | (select(.state=="active"),select(.state=="standby")) |  select(.groups[]=="'$opt_group'")  | path ) [-1]' ${MDE_DC_YAML} | sort )
else
  list=$(dc-yq '(.nodes.* | (select(.state=="active"),select(.state=="standby")) | path ) [-1]' ${MDE_DC_YAML} | sort )
fi

if [ "$opt_short" = "1" ] ; then
  for i in $list ; do     
    if [ "$opt_active" = "1" ] ; then
      ssh -o BatchMode=yes -o ConnectTimeout=1 $i true >/dev/null 2>&1
      ret=$?
      if [ "$ret" = "0" ] ; then
        echo "$i"
      fi
    else
        echo "$i"
    fi
  done 
  exit 0
fi
MASK="%12s|%-4s|%-4s|%-6s|%-7s|%-8s|%-8s|%-8s|%1s|%-2s|%-3s|%-2s|%-16s|%s\n"
printf "$MASK" "node" "stat" "type" "groups" "os" "os_ver" "dock_ver" "mde_ver" "M" "P" "HD" "id" "last_inspection" "description"
printf "$MASK" "------------" "----" "----" "------" "-------" "--------" "--------" "--------" "-" "--" "---" "--" "----------------" "-----------"
for node in $list ; do
  if [ "$opt_node" != "" -a "$opt_node" != "$node" ] ; then
    continue
  fi
  desc=$(  dc-yq '.nodes.'$node'.desc'       ${MDE_DC_YAML} )
  group=$( dc-yq '.nodes.'$node'.groups.[]'  ${MDE_DC_YAML} | tr '\r\n' ' ' )
  group=${group% }
  os=$(    dc-yq '.nodes.'$node'.os'         ${MDE_DC_YAML} )
  mid=$(   dc-yq '.nodes.'$node'.machine_id' ${MDE_DC_YAML} )
  hname=$( dc-yq '.nodes.'$node'.fqdn  '     ${MDE_DC_YAML} )
  typ=$(   dc-yq '.nodes.'$node'.type  '     ${MDE_DC_YAML} )
  if  [ "$hname" = "" ] ; then
    hname="$node"
  fi
  dock_ver=""
  mde_ver=""
  os_ver=""
  size=""
  mde_patch=""
  mde_monitor=""
  serial=""

  if [ "$opt_inspect" = "1" ] ; then
    state=$( dc-node ${node} state )
    if [ "$state" = "$typ" ] ; then
      if [ "$state" = "sshd" -o "$state" = "dock"  -o "$state" = "dc" ] ; then
if [ "$os" != "android" ] ; then 
       if [ "$os" = "ubuntu" ] ; then
          os_ver=$( ssh $node lsb_release -d -s 2>/dev/null | cut -d " " -f2)
          os_ver=${os_ver:0:8}
        else
          VERSION_ID=""
          eval $( ssh $node "cat  /etc/os-release" 2>/dev/null  | grep "^VERSION_ID=" )
          os_ver="$VERSION_ID"
          os_ver=${os_ver%_*}
        fi
        dock_ver=""
        if [ "$state" = "dock" -o "$state" = "dc" ] ; then
          dock_ver=$( DOCKER_HOST="ssh://$node" docker version --format '{{.Server.Version}}' 2>/dev/null )
        fi
        # get mde_patch
        mde_patch=$( ssh $node cat /etc/mde/patch 2>/dev/null )
        size=0
        size_list=$(ssh $node df -h 2>/dev/null | grep '^/dev' | grep -v '^/dev/loop' | awk -F " " '{ print $5 }' | cut -f1 -d "%")
        for x in $size_list ; do
          if (( $x >= $size )) ; then
            let size=$x
          fi
        done
        x=$( ssh $node cat /etc/machine-id 2>/dev/null )
        if [ "$x" = "" ] ; then
          serial="!!"
        elif [ "$x" = "$mid" ] ; then
          serial="OK"
        else
          serial="$x"
        fi
        mde_ver=$( ssh $node dpkg -l 2>/dev/null | awk '$2=="mde-base" { print $3 }' ) 
        if [ "$mde_ver" = "" ] ; then
          mde_ver=""
          mde_monitor=""
        else
          x=$( ssh $node pgrep mde-monitor 2>/dev/null)
          if [ "$x" != "" ] ; then
            mde_monitor="M"
          fi
        fi
      fi
fi
    fi
    #
    # store latest inspection data
    #
  fi
  node_data_file=$HOST_DATA_DIR/$node
  if [[ ( "$opt_inspect" == "1" && "$state" == "$typ" ) || ! -f $node_data_file  ]] ; then
    echo "insp_os_ver=\"${os_ver}\""            > $node_data_file
    echo "insp_dock_ver=\"${dock_ver}\""       >> $node_data_file
    echo "insp_mde_ver=\"${mde_ver}\""         >> $node_data_file
    echo "insp_mde_monitor=\"${mde_monitor}\"" >> $node_data_file
    echo "insp_mde_patch=\"${mde_patch}\""     >> $node_data_file
    echo "insp_hd_size=\"${size}\""            >> $node_data_file
    echo "insp_machine_id=\"${serial}\""       >> $node_data_file
    echo "insp_last_inspect=$(date +%s)"       >> $node_data_file
  fi
  eval `cat $node_data_file`
  if [ "$state" = "sshd" -o "$state" = "dock" -o "$state" = "dc" ] ; then
    col_state=$COL_LGRAY
    col_std=$COL_LGRAY
    col_size=$COL_LGRAY
    if [ "$size" != "" ] ; then
      if [ $size -gt 80 ] ; then
         col_size=$COL_ORANGE
      fi
      if [ $size -gt 90 ] ; then
        col_size=$COL_RED
      fi
    fi
  elif [ "$state" = "ping" ] ; then
    col_state=$COL_DEFAULT
    col_std=$COL_DEFAULT
    col_size=$COL_DEFAULT
  else
    col_state=$COL_GRAY
    col_std=$COL_GRAY
    col_size=$COL_GRAY
  fi
  #
  # Ausgabe
  #
  last_inspect=""
  if [ "${insp_last_inspect}" != "" ] ; then
    last_inspect=$(date -d @${insp_last_inspect} +"%Y-%m-%d_%H:%M" )
  fi
  MASK="${col_state}%12s${col_std}|%-4s|%-4s|%-6s|%-7s|%-8s|%-8s|%-8s|%1s|%-2s|${col_size}%-3s${col_std}|%-2s|%-16s|%s${COL_DEFAULT}\n"
  printf "$MASK" "${node}" "${state}" "${typ}" "${group}" "${os}" "${insp_os_ver}" "${insp_dock_ver}" "${insp_mde_ver}" "${insp_mde_monitor}" "${insp_mde_patch}" "${insp_hd_size}" "${insp_machine_id}" "${last_inspect}" "${desc}"
done
