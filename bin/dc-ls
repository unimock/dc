#!/bin/bash

. /opt/dc/funcs/global

#
# Farben fuer Ausgabe definieren
#
COL_DEFAULT='\e[m'
COL_GREEN='\e[1;92m'
COL_ORANGE='\033[0;33m'
COL_GRAY='\033[1;30m'
COL_LGRAY='\033[1;37m'
COL_RED='\e[1;91m'
LINE="--------------------------------------------------------------------------------------------------------------"

_help() {
  echo ""
  echo "usage: dc-ls <options> [hosts|h|projects|p]"
  echo ""
  echo " options:"
  echo ""
  echo "  dc-ls --help             # show this help"
  echo "  dc-ls --active           # "
  echo "  dc-ls --host=<host_name> # show only this host"
  echo "  dc-ls --short            # list only host names"
  echo "  dc-ls --group=<group>    # show only hosts of group=<group>. see /root/.ssh/dc/config/*.yml"
  echo ""
}


####################################################################################################################################
#
# magic main
#
####################################################################################################################################

opt_active="0"
opt_short="0"
opt_inspect="0"
opt_group=""
opt_host=""
COPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --active)   opt_active="1"              ; shift ;;
    --help)     _help ; exit 0              ; shift ;;
    --short)    opt_short="1"               ; shift ;;
    --group=*)  opt_group=${1#"--group="}   ; shift ;;
    --host=*)   opt_host=${1#"--host="}     ; shift ;;
    --inspect)  opt_inspect="1"             ; shift ;; 
    *)  COPT="$COPT \"$1\""                 ; shift ;;
  esac
done
eval set -- $COPT

####################################################################################################################################
if [ "$1" = "projects" -o "$1" = "p"  ] ; then
  project_list=$( dc-list projects)
  printf "%15s|%-2s|%-15s|%-20s|%-35s|%-35s|%s\n" "PROJECT" "CO" "HOSTS" "GROUPS" "DESCRIPTION" "MAIN_IMAGE" "PROJECT_DIRECTORY"
  printf "%15s|%-2s|%-15s|%-20s|%-35s|%-35s|%s\n" "${LINE:0:15}" "${LINE:0:2}" "${LINE:0:15}" "${LINE:0:20}" "${LINE:0:35}" "${LINE:0:35}" "${LINE:0:30}"
  for p in $project_list ; do
    p_hosts=$(   dc-yq '.projects.'$p'.dc.home.[].host' ${MDE_DC_YAML} )
    p_desc=$(    dc-yq '.projects.'$p'.dc.desc'         ${MDE_DC_YAML} )
    p_dir=$(     dc-yq '.projects.'$p'.project_dir'     ${MDE_DC_YAML} )
    p_groups=$(  dc-yq '.projects.'$p'.dc.group.[]'     ${MDE_DC_YAML} | tr '\n' ',' )
    p_groups=${p_groups%,}
    main_service=$( dc-yq '.projects.'$p'.dc.main_service'    ${MDE_DC_YAML} )
    p_image=$( dc-yq '.projects.'$p'.compose.services.'$main_service'.image' ${MDE_DC_YAML}  )

    xxx=""
    yyy=""
    ndc=$(dc-yq '(.projects.'$p'.compose.services.* | path ) [-1]' $MDE_DC_YAML | wc -l )
    for h in $p_hosts ; do
      if [ "$opt_inspect" = "1" ]  ; then
	host_state=$( dc-host -h $h state )
	if [ "$host_state" = "dock" ] ; then
          nrc=$(dc -p $p -h $h compose ps --services --filter "status=running" | sed '/^\s*$/d'  | wc -l  )
	  color=$COL_RED
        elif [ "$host_state" = "off" ] ; then # host is defined as state=standby in host definition
	  nrc=0
	  color=$COL_GRAY
	fi	
        if [ "$ndc" = "$nrc" ] ; then
          xxx="$xxx $h"
          yyy="$yyy $h"
        else
          xxx="$xxx $h"
          yyy="$yyy ${color}${h}${COL_LGRAY}"
        fi
      else
        xxx="$xxx $h"
        yyy="$yyy $h"
      fi
    done
    xxx=${xxx# }
    yyy=${yyy# }
    len=$((15+${#yyy}-${#xxx}))
    yyy="$yyy                               "
    yyy=${yyy:0:$len}
    printf "${COL_LGRAY}%15s|%2s|%b${COL_LGRAY}|%-20s|%-35s|%-35s|%s${COL_DEFAULT}\n" "$p" "${ndc}" "${yyy}" "$p_groups" "${p_desc:0:35}" "${p_image:0:35}" "$p_dir" 
  done
  exit 0
fi

####################################################################################################################################

    if [ "$opt_group" != "" ] ; then
      list=$(dc-yq '(.hosts.* | (select(.state=="active"),select(.state=="standby")) |  select(.groups[]=="'$opt_group'")  | path ) [-1]' ${MDE_DC_YAML} | sort )
    else
      list=$(dc-yq '(.hosts.* | (select(.state=="active"),select(.state=="standby")) | path ) [-1]' ${MDE_DC_YAML} | sort )
    fi
    if [ "$opt_short" = "1" ] ; then
      for i in $list ; do     
        if [ "$opt_active" = "1" ] ; then
          ssh -o BatchMode=yes -o ConnectTimeout=1 $i true >/dev/null 2>&1
          ret=$?
          if [ "$ret" = "0" ] ; then
            echo "$i"
          fi
        else
            echo "$i"
        fi
      done 
      exit 0
    fi
    MASK="%10s|%-4s|%-6s|%-6s|%-8s|%-8s|%-8s|%1s|%-2s|%-3s|%-2s|%-16s|%s\n"
    printf "$MASK" "HOST" "STAT" "GROUPS" "OS" "OS_VER" "DOCK_VER" "MDE_VER" "M" "P" "HD" "ID" "LAST_REACHABLE" "DESCRIPTION"
    printf "$MASK" "----------" "----" "------" "------" "--------" "--------" "--------" "-" "--" "---" "--" "----------------" "-----------"
    for i in $list ; do
      if [ "$opt_host" != "" -a "$opt_host" != "$i" ] ; then
         continue
      fi
      desc=$(  dc-yq '.hosts.'$i'.desc'       ${MDE_DC_YAML} )
      prov=$(  dc-yq '.hosts.'$i'.info'       ${MDE_DC_YAML} )
      group=$( dc-yq '.hosts.'$i'.groups.[]'  ${MDE_DC_YAML} | tr '\r\n' ',' )
      group=${group%,}
      os=$(    dc-yq '.hosts.'$i'.os'         ${MDE_DC_YAML} )
      mid=$(   dc-yq '.hosts.'$i'.machine_id' ${MDE_DC_YAML} )
      hname=$( dc-yq '.hosts.'$i'.hostname  ' ${MDE_DC_YAML} )

      if  [ "$hname" = "" ] ; then
        hname="$i"
      fi
      dver=""
      mver=""
      os_ver=""
      size=""
      patch=""
      serial=""
      monitor=""
      state=""
      
      state=$( dc-host -h ${i} state )

      if [ "$state" = "sshd" -o "$state" = "dock" ] ; then
        if [ "$os" = "ubuntu" ] ; then
          os_ver=$( ssh $i lsb_release -d -s 2>/dev/null | cut -d " " -f2)
          os_ver=${os_ver:0:8}
        else
          VERSION_ID=""
          eval $( ssh $i "cat  /etc/os-release" 2>/dev/null  | grep "^VERSION_ID=" )
          os_ver="$VERSION_ID"
          os_ver=${os_ver%_*}
        fi
        dver=""
        if [ "$state" = "dock" ] ; then
          dver=$( DOCKER_HOST="ssh://$i" docker version --format '{{.Server.Version}}' 2>/dev/null )
        fi
        # get mde-wg patch number
        patch=$( ssh $i cat /etc/mde/patch 2>/dev/null )
        size=0
        size_list=$(ssh $i df -h 2>/dev/null | grep '^/dev' | grep -v '^/dev/loop' | awk -F " " '{ print $5 }' | cut -f1 -d "%")
        for x in $size_list ; do
          if (( $x >= $size )) ; then
            let size=$x
          fi
        done
        x=$( ssh $i cat /etc/machine-id 2>/dev/null )
        if [ "$x" = "" ] ; then
          serial="!!"
        elif [ "$x" = "$mid" ] ; then
          serial="OK"
        else
          serial="$x"
        fi
        mver=$( ssh $i dpkg -l 2>/dev/null | awk '$2=="mde-base" { print $3 }' ) 
        if [ "$mver" = "" ] ; then
          mver=""
          monitor=""
        else
          x=$( ssh $i pgrep mde-monitor 2>/dev/null)
          if [ "$x" != "" ] ; then
            monitor="M"
          fi
        fi
        #
        # store latests host data
        #
        mkdir -p /var/dc/hosts
        host_data_file=/var/dc/hosts/$i
        rm -f $host_data_file
        HOST="host"
        echo "dc_${HOST}_name=\"${i}\""                 >> $host_data_file
        echo "dc_${HOST}_state=\"${state}\""            >> $host_data_file
        echo "dc_${HOST}_group=\"${group}\""            >> $host_data_file
        echo "dc_${HOST}_os=\"${os}\""                  >> $host_data_file
        echo "dc_${HOST}_os_version=\"${os_ver}\""      >> $host_data_file
        echo "dc_${HOST}_docker_version=\"${dver}\""    >> $host_data_file
        echo "dc_${HOST}_mde_version=\"${mver}\""       >> $host_data_file
        echo "dc_${HOST}_mde_monitor=\"${monitor}\""    >> $host_data_file
        echo "dc_${HOST}_patch=\"${patch}\""            >> $host_data_file
        echo "dc_${HOST}_hd_size=${size}"               >> $host_data_file
        echo "dc_${HOST}_machine_id=\"${serial}\""      >> $host_data_file
        echo "dc_${HOST}_last_reachable=$(date +%s)"    >> $host_data_file
        echo "dc_${HOST}_desc=\"${desc}\""              >> $host_data_file
      else
        #
        # host not connected
        #
        dc_host_last_reachable="-"
        host_data_file="/var/dc/hosts/$i"
        if [ ! -f $host_data_file ] ; then
          HOST="host"
          echo "dc_${HOST}_name=\"${i}\""               >> $host_data_file
          echo "dc_${HOST}_state=\"${state}\""          >> $host_data_file
          echo "dc_${HOST}_group=\"${group}\""          >> $host_data_file
          echo "dc_${HOST}_os=\"${os}\""                >> $host_data_file
          echo "dc_${HOST}_os_version=\"-\""            >> $host_data_file
          echo "dc_${HOST}_docker_version=\"-\""        >> $host_data_file
          echo "dc_${HOST}_mde_version=\"-\""           >> $host_data_file
          echo "dc_${HOST}_mde_monitor=\"-\""           >> $host_data_file
          echo "dc_${HOST}_patch=\"-\""                 >> $host_data_file
          echo "dc_${HOST}_hd_size=\"-\""               >> $host_data_file
          echo "dc_${HOST}_machine_id=\"-\""            >> $host_data_file
          echo "dc_${HOST}_last_reachable=\"-\""        >> $host_data_file
          echo "dc_${HOST}_desc=\"${desc}\""            >> $host_data_file
        fi
        sed -i -e 's/dc_host_state=.*/dc_host_state=""/'   $host_data_file
      fi
      eval `cat $host_data_file`
      dc_host_state="${state}"
      if [ "$dc_host_state" = "sshd" -o "$dc_host_state" = "dock" ] ; then
        col_state=$COL_LGRAY
        col_std=$COL_LGRAY
        col_size=$COL_LGRAY
        if [ $size -gt 80 ] ; then
           col_size=$COL_ORANGE
        fi
        if [ $size -gt 90 ] ; then
           col_size=$COL_RED
        fi
      elif [ "$state" = "ping" ] ; then
	      col_state=$COL_DEFAULT
	      col_std=$COL_DEFAULT
	      col_size=$COL_DEFAULT
      else
        col_state=$COL_GRAY
        col_std=$COL_GRAY
        col_size=$COL_GRAY
      fi
      #
      # Ausgabe
      #
      last_reachable="-"
      if [ "${dc_host_last_reachable}" != "-" ] ; then
        last_reachable=$(date -d @${dc_host_last_reachable} +"%Y-%m-%d_%H:%M" )
      fi
      MASK="${col_state}%10s${col_std}|%-4s|%-6s|%-6s|%-8s|%-8s|%-8s|%1s|%-2s|${col_size}%-3s${col_std}|%-2s|%-16s|%s${COL_DEFAULT}\n"
      printf "$MASK" "${dc_host_name}" "${state}" "${dc_host_group}" "${dc_host_os}" "${dc_host_os_version}" "${dc_host_docker_version}" "${dc_host_mde_version}" "${dc_host_mde_monitor}" "${dc_host_patch}" "${dc_host_hd_size}" "${dc_host_machine_id}" "${last_reachable}" "${dc_host_desc}"
    done
