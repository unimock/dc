#!/bin/bash

. ${HOME}/.dc/etc/config

. /opt/dc/funcs/script_funcs

if [ "${MDE_DC_BATCH_DIR}" = "" ] ; then echo "MDE_DC_BATCH_DIR not set in ${HOME}/.dc/etc/config" ; exit 0 ; fi
if [ "${MDE_DC_LOG_DIR}" = "" ]   ; then echo "MDE_DC_LOG_DIR   not set in ${HOME}/.dc/etc/config" ; exit 0 ; fi

if [ "$2" = "" ] ; then
  echo ""
  echo " usage: `basename $0` <batch-name> create|delete|run|debug"
  echo ""
  exit 0
fi

JOB_NAME="$1" ; shift
CMD="$1" ; shift
############################################################
# delete
############################################################
if [ "$CMD" = "delete" ] ; then
  rm -Rf ${MDE_DC_BATCH_DIR}/$JOB_NAME-log
  echo "remove ${MDE_DC_LOG_DIR}/$JOB_NAME"
  rm -fv ${MDE_DC_BATCH_DIR}/$JOB_NAME.list
  exit 0
fi

############################################################
# create
############################################################
if [ "$CMD" = "create" ] ; then
  mkdir -p ${MDE_DC_BATCH_DIR}
  mkdir -p ${MDE_DC_LOG_DIR}/$JOB_NAME
  if [ ! -f  ${MDE_DC_BATCH_DIR}/$JOB_NAME.list ] ; then
    cat <<EOF >${MDE_DC_BATCH_DIR}/$JOB_NAME.list
###################################################################
# job .... execute command and report via job report mechanism
# cmd .... execute command and report output in mail body
# mail ... set recipient mail address for send-report"
#
#mail:<recipient-mail-address>
#
#cmd: ls /tmp >/tmp/.log                                  # comment
#
#job:[job-name]:<timeout>:<command>                       # comment
#job:          :5s       : tar cvf /xxx/x.tar /root/batch # comment
#
# if no <job-name> is given, basename of <command> will be used.
###################################################################
EOF
    echo "-> configure your batch jobs in ${MDE_DC_BATCH_DIR}/$JOB_NAME.list"
  fi
  exit 0
fi

############################################################
# run / debug
############################################################
if [ "$CMD" = "run" -o "$CMD" = "debug" ] ; then
  #
  # cleanup log files
  #
  rm -rf    ${MDE_DC_LOG_DIR}/$JOB_NAME
  mkdir -p  ${MDE_DC_LOG_DIR}/$JOB_NAME
  mail_to=""
  mail_subject=""
  while read line ; do
    ifs=$IFS ; IFS=":" ; A=($line) ; IFS=$ifs
    echo "execute: <${A[0]}> <${A[1]}> <${A[2]}> <${A[3]}>"
    if [ "${A[0]}" = "cmd" ] ; then
       echo ""            >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       echo "### ${A[1]} :"  >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       echo ""            >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       bash -c "${A[1]}"   >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1 </dev/null
    elif [ "${A[0]}" = "job" ] ; then
       A[1]=$( echo ${A[1]} | xargs)  # remove blanks
       if [ "${A[1]}" != "" ] ; then
          job_name="${A[1]}"
       else
	        x=$(echo ${A[3]} | cut -d" " -f1 )
	        job_name=$(basename $x)
       fi
       JOB_LOG=${MDE_DC_LOG_DIR}/$JOB_NAME/$job_name.log
       sf_start
       _cmd=${A[3]%%#*}
       if [ "$CMD" = "debug" ] ; then
         timeout ${A[2]} $_cmd              2>&1 </dev/null | tee $JOB_LOG
       else
         timeout ${A[2]} $_cmd                  >$JOB_LOG  2>&1 </dev/null
       fi   
       ret=$?
       if [ "$ret" != "0" ] ; then
         if [ "$ret" = "124" ] ; then
           echo "    error timeout !!!!!!!!!!!!!!!!!!!!!"  >$JOB_LOG  2>&1
	 fi
	 if [ "$CMD" = "debug" ] ; then
	   sf_set_error $ret                            2>&1 | tee -a $JOB_LOG
	 else
	   sf_set_error $ret                                >>$JOB_LOG  2>&1
	 fi
       fi
       if [ "$CMD" = "debug" ] ; then
         sf_end                                         2>&1 | tee -a $JOB_LOG
       else
         sf_end                                             >>$JOB_LOG  2>&1
       fi
    elif [ "${A[0]}" = "mail" ] ; then
      mail_to="${A[1]}"
    fi
  done < <(grep -v '^\s*$\|^\s*\#' ${MDE_DC_BATCH_DIR}/$JOB_NAME.list)

  #
  # create report
  #
  FI=${MDE_DC_LOG_DIR}/$JOB_NAME/report
  list=$(ls -tr ${MDE_DC_LOG_DIR}/$JOB_NAME | grep -v body | grep -v report)
  errors=0
  checks=0
  for i in $list ; do
    R_FILE[$checks]=$i
    R_RESULT[$checks]="NDEF"
    res=$(grep "^#result=" ${MDE_DC_LOG_DIR}/$JOB_NAME/${R_FILE[$checks]} )
    ret=$?
    if [ "$ret" = "0" ] ; then
      res=${res#\#}
      eval $res
      #echo "$result $start $end $duration"
      R_RESULT[$checks]=${result}
      R_START[$checks]=${start}
      R_END[$checks]=${end}
      R_DURATION[$checks]=${duration}
    fi
    if [ "${R_RESULT[$checks]}" != "OK" ] ; then
     errors=$(( errors + 1 ))
    fi
    checks=$(( checks +  1 ))
  done
  echo "checks=$checks errors=$errors"
  rm -f $FI
  printf "\n"                                 >> $FI
  printf "# batch $JOB_NAME report\n"         >> $FI
  printf "\n"                                 >> $FI
  printf "## job results:\n"                  >> $FI
  printf "\n"                                 >> $FI
  E_FI=""
  MASK="|%2s|%-25s|%8s|%8s|%-8s|\n"
  printf ${MASK} "  " "batch job                " "start   " "end     " "duration" | tee -a $FI
  printf ${MASK} "--" "-------------------------" "--------" "--------" "--------" | tee -a $FI
  for ((idx=0; idx<${checks}; ++idx)); do
    sym="❌"
    if [ "${R_RESULT[idx]}" = "OK" ] ; then
      sym="✅"
    fi
    printf "${MASK}" "$sym" ${R_FILE[idx]} ${R_START[idx]} ${R_END[idx]} ${R_DURATION[idx]} | tee -a $FI
    E_FI="${E_FI} ${MDE_DC_LOG_DIR}/$JOB_NAME/${R_FILE[$idx]}"
  done
  if [ -f ${MDE_DC_LOG_DIR}/$JOB_NAME/body ] ; then 
    cat ${MDE_DC_LOG_DIR}/$JOB_NAME/body >> $FI
  fi

  #
  # send report mail
  #
  if [ "$mail_to" != "" ] ; then
    cluster_name=$(   dc-yq '.config.cluster.name'   )
    mail_sender=$(    dc-yq '.config.mail.sender'    )
    mail_smtp_user=$( dc-yq '.config.mail.smtp.user' )
    mail_smtp_pass=$( dc-yq '.config.mail.smtp.pass' )
    mail_smtp_host=$( dc-yq '.config.mail.smtp.host' )

    if [ "$errors" = "0" ] ; then
      subject="✅ report: ${JOB_NAME}@${cluster_name}"
    else
      subject="❌ report: ${JOB_NAME}@${cluster_name}"
    fi
    attachments=""
    for t in ${E_FI} ; do
        attachments="${attachments} --attach-type "text/plain" --attach @${t}" # will build list of files to attach
    done
    auth=""
    if [ "$mail_smtp_user" != "" ] ; then
      auth="  -au $mail_smtp_user -ap $mail_smtp_pass "
    fi
    # check if pandoc is installed
    #if [ "$(which pandoc)" != "" ] ; then
    #  tfile=$(mktemp)
    #  pandoc -f markdown -t html5 $FI -o ${tfile}
    #  swaks --to $mail_to --from $mail_sender \
    #        -s   $mail_smtp_host \
    #        -tlso $auth \
    #        --header "Subject: $subject" \
    #        --attach-type "text/html" --attach-body @${tfile} \
    #        ${attachments} -S 2
    #  rm ${tfile}
    #else
      swaks --to $mail_to --from $mail_sender \
            -s   $mail_smtp_host \
            -tlso $auth \
            --header "Subject: $subject" \
            --attach-type "text/markdown" --attach-body @$FI \
            ${attachments} -S 2
    #fi
  fi
  exit 0
fi

exit 0


