#!/bin/bash

. ${HOME}/.dc/etc/config

. /opt/dc/funcs/script_funcs

if [ "${MDE_DC_BATCH_DIR}" = "" ] ; then echo "MDE_DC_BATCH_DIR not set in ${HOME}/.dc/etc/config" ; exit 0 ; fi
if [ "${MDE_DC_LOG_DIR}" = "" ]   ; then echo "MDE_DC_LOG_DIR   not set in ${HOME}/.dc/etc/config" ; exit 0 ; fi

if [ "$2" = "" ] ; then
  echo ""
  echo " usage: `basename $0` <batch-name> create|delete|run|debug"
  echo ""
  exit 0
fi

JOB_NAME="$1" ; shift
CMD="$1" ; shift
############################################################
# delete
############################################################
if [ "$CMD" = "delete" ] ; then
  rm -Rf ${MDE_DC_BATCH_DIR}/$JOB_NAME-log
  echo "remove ${MDE_DC_LOG_DIR}/$JOB_NAME"
  rm -fv ${MDE_DC_BATCH_DIR}/$JOB_NAME.list
  exit 0
fi

############################################################
# create
############################################################
if [ "$CMD" = "create" ] ; then
  mkdir -p ${MDE_DC_BATCH_DIR}
  mkdir -p ${MDE_DC_LOG_DIR}/$JOB_NAME
  if [ ! -f  ${MDE_DC_BATCH_DIR}/$JOB_NAME.list ] ; then
    cat <<EOF >${MDE_DC_BATCH_DIR}/$JOB_NAME.list
##################################################################################
# job ... execute command and report via job report mechanism in attachement
# JOB ... execute command and report via job report and soutput in mail body
# cmd ... execute command and report output in mail body
# mail .. set recipient mail address for send-report"
#
# If return codes of commands will be 255, this entries will be marked as warnings
#
#mail:<recipient-mail-address>[,<second-address>]
#
#cmd: ls /tmp >/tmp/.log                                  # comment
#
#job:[job-name]:<timeout>:<command>                       # comment
#job:          :5s       : tar cvf /xxx/x.tar /root/batch # comment
#JOB: dc-ls    :1m       : dc ls                          # comment
#
# if no <job-name> is given, basename of <command> will be used.
##################################################################################
EOF
    echo "-> configure your batch jobs in ${MDE_DC_BATCH_DIR}/$JOB_NAME.list"
  fi
  exit 0
fi

############################################################
# run / debug
############################################################
if [ "$CMD" = "run" -o "$CMD" = "debug" ] ; then
  cluster_name=$(   dc-yq '.config.cluster.name'   )
  #
  # cleanup log files
  #
  rm -rf    ${MDE_DC_LOG_DIR}/$JOB_NAME
  mkdir -p  ${MDE_DC_LOG_DIR}/$JOB_NAME
  mail_condition=""
  mail_to=""
  mail_subject=""
  echo '```'
  while read line ; do
    ifs=$IFS ; IFS=":" ; A=($line) ; IFS=$ifs
    echo "execute: <${A[0]}> <${A[1]}> <${A[2]}> <${A[3]}>"
    if [ "${A[0]}" = "cmd" ] ; then
       echo ""               >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       echo "### ${A[1]} :"  >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       echo ""               >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
       bash -c "${A[1]}"     >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1 </dev/null
       rc=$?
       echo "return-code of cmd =$rc"         >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
    elif [ "${A[0]}" = "job" -o "${A[0]}" = "JOB" ] ; then
       if [ "${A[0]}" = "JOB" ] ; then
         echo ""               >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
         echo "### ${A[1]} :"  >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1
         echo ""               >> ${MDE_DC_LOG_DIR}/$JOB_NAME/body 2>&1

       fi
       A[1]=$( echo ${A[1]} | xargs)  # remove blanks
       if [ "${A[1]}" != "" ] ; then
          job_name="${A[1]}"
       else
	        x=$(echo ${A[3]} | cut -d" " -f1 )
	        job_name=$(basename $x)
       fi
       JOB_LOG=${MDE_DC_LOG_DIR}/$JOB_NAME/$job_name.log
       sf_start
       _cmd=${A[3]%%#*}
       if [ "$CMD" = "debug" ] ; then
         timeout ${A[2]} $_cmd              2>&1 </dev/null | tee $JOB_LOG
         ret=$?
       else
         if [ "${A[0]}" = "JOB" ] ; then
           timeout ${A[2]} $_cmd  </dev/null  2>&1 | tee $JOB_LOG  >>  ${MDE_DC_LOG_DIR}/$JOB_NAME/body
           ret=${PIPESTATUS[0]}
         else 
           timeout ${A[2]} $_cmd                  >$JOB_LOG  2>&1 </dev/null
           ret=$?
         fi
       fi   
       if [ "$ret" != "0" ] ; then
         if [ "$ret" = "124" ] ; then
           echo "    error timeout !!!!!!!!!!!!!!!!!!!!!"  >$JOB_LOG  2>&1
	       fi
	       if [ "$CMD" = "debug" ] ; then
           if [ "$ret" = "255" ] ; then
             sf_set_warning                             2>&1 | tee -a $JOB_LOG
           else
             sf_set_error $ret                          2>&1 | tee -a $JOB_LOG
           fi 
	       else
           if [ "$ret" = "255" ] ; then
             sf_set_warning                                 >>$JOB_LOG  2>&1
           else
	           sf_set_error $ret                              >>$JOB_LOG  2>&1
          fi
	       fi
       fi
       if [ "$CMD" = "debug" ] ; then
         sf_end                              2>&1 | tee -a $JOB_LOG
       else
         sf_end                              >>$JOB_LOG  2>&1
       fi
    elif [ "${A[0]}" = "mail" ] ; then
      mail_to="${A[1]}"
    elif [ "${A[0]}" = "mail_condition" ] ; then
      mail_condition="${A[1]}"
    fi
  done < <(grep -v '^\s*$\|^\s*\#' ${MDE_DC_BATCH_DIR}/$JOB_NAME.list)
  echo '```'
  #
  # create report
  #
  FI=${MDE_DC_LOG_DIR}/$JOB_NAME/report
  list=$(ls -tr ${MDE_DC_LOG_DIR}/$JOB_NAME | grep -v body | grep -v report)
  errors=0
  warnings=0
  updates=0
  checks=0
  for i in $list ; do
    R_FILE[$checks]=$i
    R_RESULT[$checks]="NDEF"
    res=$(grep "^#result=" ${MDE_DC_LOG_DIR}/$JOB_NAME/${R_FILE[$checks]} )
    ret=$?
    if [ "$ret" = "0" ] ; then
      res=${res#\#}
      eval $res
      #echo "$result $start $end $duration"
      R_RESULT[$checks]=${result}
      R_START[$checks]=${start}
      R_END[$checks]=${end}
      R_RC[$checks]=${rc}
      R_DURATION[$checks]=${duration}
    fi
    if [ "${R_RESULT[$checks]}" != "OK" ] ; then
      if [ "${R_RESULT[$checks]}" = "ERROR" ] ; then
        errors=$(( errors + 1 ))
      elif [ "${R_RESULT[$checks]}" = "WARNING" ] ; then
        warnings=$(( warnings + 1 ))
      elif [ "${R_RESULT[$checks]}" = "UPDATES" ] ; then
        updates=$(( updates + 1 ))
      fi
    fi
    checks=$(( checks +  1 ))
  done
  #echo "checks=$checks errors=$errors warnings=$warnings updates=$updates"
  rm -f $FI
  printf "\n"                                 >> $FI
  printf "# batch %s report on cluster %s @ %s\n" "$JOB_NAME" "$cluster_name"  "$(hostname)" >> $FI
  printf "\n"                                 >> $FI
  printf "## job results:\n"                  >> $FI
  printf "\n"                                 >> $FI
  E_FI=""
  MASK="|%2s|%-25s|%3s|%8s|%8s|%-8s|\n"
  printf ${MASK} "  " "batch job                " "ret" "start   " "end     " "duration" | tee -a $FI
  printf ${MASK} "--" "-------------------------" "---" "--------" "--------" "--------" | tee -a $FI
  for ((idx=0; idx<${checks}; ++idx)); do
    sym="❌"
    if [ "${R_RC[idx]}" = "255" ] ; then
      sym="⚠️"
    elif [ "${R_RC[idx]}" = "254" ] ; then
      sym="☑ "
    elif [ "${R_RC[idx]}" = "0" ] ; then
      sym="✅"
    fi
    printf "${MASK}" "$sym" ${R_FILE[idx]} ${R_RC[idx]} ${R_START[idx]} ${R_END[idx]} ${R_DURATION[idx]} | tee -a $FI
    E_FI="${E_FI} ${MDE_DC_LOG_DIR}/$JOB_NAME/${R_FILE[$idx]}"
  done
  if [ -f ${MDE_DC_LOG_DIR}/$JOB_NAME/body ] ; then 
    cat ${MDE_DC_LOG_DIR}/$JOB_NAME/body >> $FI
  fi
  rc=0
  if [ "$errors" = "0" ] ; then
    if [ "$warnings" = "0" ] ; then
      if [ "$updates" = "0" ] ; then
        rc=0
      else
        rc=254
      fi
    else  
        rc=255
    fi
  else
    rc=1
  fi

  if [ "$mail_to" != "" ] ; then
    mail_condition=$( echo ${mail_condition} | sed "s/,/ /g" )
    #echo "mail_condition: $mail_condition"
    #echo "errors: $errors"
    #echo "warnings: $warnings"
    #echo "updates: $updates"

    send=1
    if [ "${mail_condition}" != "" ] ; then
      send=0
      for f in ${mail_condition} ; do
        if [[ ( "$f" == "errors"   && "$errors"   != "0" ) || \
              ( "$f" == "warnings" && "$warnings" != "0" ) || \
              ( "$f" == "updates"  && "$updates"  != "0" )
              ]] ; then
          send=1
          break
        fi
      done
    fi
    
    if [ "$errors" = "0" ] ; then
      if [ "$warnings" = "0" ] ; then
        if [ "$updates" = "0" ] ; then
          subject="✅ report: ${JOB_NAME}@${cluster_name}"
        else
          subject="☑ report: ${JOB_NAME}@${cluster_name}"
        fi
      else  
          subject="⚠️ report: ${JOB_NAME}@${cluster_name}"
      fi
    else
      subject="❌ report: ${JOB_NAME}@${cluster_name}"
    fi
    if [ "$send" = "1" ] ; then
      #
      # send report mail
      #
      mail_sender=$(    dc-yq '.config.mail.sender'    )
      mail_smtp_user=$( dc-yq '.config.mail.smtp.user' )
      mail_smtp_pass=$( dc-yq '.config.mail.smtp.pass' )
      mail_smtp_host=$( dc-yq '.config.mail.smtp.host' )
  
      attachments=""
      for t in ${E_FI} ; do
          attachments="${attachments} --attach-type "text/plain" --attach @${t}" # will build list of files to attach
      done
      auth=""
      if [ "$mail_smtp_user" != "" ] ; then
        auth="  -au $mail_smtp_user -ap $mail_smtp_pass "
      fi
      swaks --to $mail_to --from $mail_sender \
            -s   $mail_smtp_host \
            -tlso $auth \
            --header "Subject: $subject" \
            --attach-type "text/markdown" --attach-body @$FI \
            ${attachments} -S 2
      #echo "mail send"
    fi
  fi
  #echo "rc=$rc"
  exit $rc
fi
exit 0


