#!/bin/bash

. /opt/dc/funcs/global

_ask()
{
  text="$1"
  echo "##################################################################"
  echo "#"
  echo "# ${text}. Type ENTER to start."
  echo "#"
  read ans
  return
}

on_host=""
verbose=""
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h) on_host="$2" ; shift 2 ;;
    -v) shift ; verbose="1" ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

CMD=$1
shift

if [ "$CMD" = "" ] ; then
  echo ""
  echo " usage: `basename $0` [-h <host>] <command>  # manage hosts and/or projects on hosts"
  echo ""
  echo " host commands:"
  echo "    state               # state of a host. returns: ||ping|sshd|dock| "
  echo "    upgrade             # do dist-upgrade"
  echo "    update              # update docker-ce"
  echo "    nrc                 # number of running containers"
  echo "    reboot              # reboot host"
  echo "    large_files <size>  # find lage files, size=xG"
  echo "    dir_entries <count> # find directories with more then count entries"
  echo "    cmd <command>       # run commands on $H"
  echo "    image [config] [-v] ...      # list,backup,restore host images"
  echo "    prune               # do volume pruen and system prune interactive"
  echo ""
  echo " service commands"
  echo ""
  echo "    list                # list projects on $H"
  echo "    check               # check projects on $H"
  echo "    check details       # check projects on $H and show details"
  echo "    stop|start          # start or stop all projects on $H"
  echo "    rm|up|rmup          # start or stop all projects on $H"
  echo "    ps                  # show project containers on $H"
  echo ""
  exit 0
fi


if [ "$on_host" = "" ] ; then
  if [ "$CMD" = "state" ] ; then
    hlist=$( dc-list hosts all )
  else
    hlist=$( dc-list hosts dc )
  fi
else
  hlist="$on_host"
fi


if [ "$CMD" = "state" ] ; then
  for HOST in $hlist ; do
    state=""
    hname=$( dc-yq '.hosts.'$HOST'.hostname' ${MDE_DC_YAML} ) 
    ping -W 0.5 -c 1 ${hname} >/dev/null 2>&1
    if [ "$?" = "0" ] ; then
      state="ping"
      ssh -o BatchMode=yes -o ConnectTimeout=1 $HOST true >/dev/null 2>&1
      if [ "$?" = "0" ] ; then
        state="sshd"
        ssh -o BatchMode=yes -o ConnectTimeout=1 $HOST pidof dockerd >/dev/null 2>&1
        if [ "$?" = "0" ] ; then
          state="dock"
        fi
      fi
    fi
    echo "$state"
    
  done
  exit 0
fi


dc mounts umount

for HOST in $hlist ; do
  if [ "$CMD" = "cmd" ] ; then
    if [ "$H" = "--all" ] ; then
      echo "#"    
      echo "# ssh ${HOST} $*"
      echo "#"
    fi  
    ssh ${HOST} $*
  fi    
  if [ "$CMD" = "large_files" -o   "$CMD" = "dir_entries"  ] ; then
    if [ "$CMD" = "large_files" ] ; then
    FI=/tmp/.dc-remote-cmd.lf
cat <<EOF > $FI
find ${MDE_DC_DOCKER_VOL} /var /xxx /tmp /home /mnt/backup-volume -type f -size +${1} -exec ls -lh {} + 2>/dev/null | awk '{ print "${HOST} " \$5 " " \$9 }'
EOF
    else
    FI=/tmp/.dc-remote-cmd.de
cat <<EOF > $FI
find ${MDE_DC_DOCKER_VOL} /mnt/backup-volume -type d -exec bash -c "echo -ne '{} '; ls '{}' | wc -l" \; | awk '\$NF>=${1}'
EOF
    fi
    scp -q $FI ${HOST}:$FI
    ssh ${HOST} bash $FI
    ssh ${HOST} rm   $FI
    rm -f $FI
    #ssh ${HOST} "find ${MDE_DC_DOCKER_VOL} /var /xxx /tmp /home -type f -size +${1} -exec ls -lh {} + 2>/dev/null" | awk '{ print "'"${HOST} "'" $5 " " $9}'
  fi
  if [ "$CMD" = "prune" ] ; then
     ssh   ${HOST} df -h / | grep -v "^Filesystem"
     ssh   ${HOST} apt-get autoremove
     dc -h ${HOST} docker volume prune
     ssh   ${HOST} df -h / | grep -v "^Filesystem"
     dc -h ${HOST} docker system prune -a
     ssh   ${HOST} df -h / | grep -v "^Filesystem"
     ssh   ${HOST} 'truncate -s 0 /var/lib/docker/containers/*/*-json.log'
     ssh   ${HOST} df -h / | grep -v "^Filesystem"
  fi
  if [ "$CMD" = "nrc" ] ; then
    ssh $HOST docker ps -q | wc -l 
  fi

  if [ "$CMD" = "update" ] ; then
    BCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    ssh $HOST apt-get update
    ssh $HOST apt-get -y install docker-ce
    sleep 3
    NCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
  fi

  if [ "$CMD" = "upgrade" ] ; then
    BCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    dc host -h $HOST check
    _ask "Start autoremove?"
    ssh $HOST apt-get -y autoremove
    _ask "Start apt-get update?"
    ssh $HOST apt-get update
    _ask "Start dist-uprade?"
    ssh $HOST apt-get -y dist-upgrade
    _ask "Check, if all containers are started!"
    NCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
    _ask "Show running containers!"
    dc host -h $HOST check
    _ask "reboot?"
    ssh $HOST init 6
  fi

  if [ "$CMD" = "check" ] ; then
    BCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    if [ "$1" = "details" ] ; then
      dc-inspect -h $HOST runtime
    else
      dc-inspect -h $HOST runtime | grep " state:"
    fi
  fi

  if [ "$CMD" = "list" ] ; then
    dc-list projects -h $HOST
  fi
  ####################################################################################################################
  if [ "$CMD" = "rmup" -o "$CMD" = "rm" -o "$CMD" = "up" -o "$CMD" = "ps" -o "$CMD" = "stop" -o "$CMD" = "start" -o "$CMD" = "rmup"  ] ; then
    list=$( dc-list projects -h $HOST )
    for i in $list ; do
      dc -h $HOST -s $i $CMD
    done
  fi

  if [ "$CMD" = "reboot"   ] ; then
    ssh $HOST "reboot ; exit"
  fi
done

####################################################################################################################
if [ "$CMD" = "image"   ] ; then
    cmd="$1"
    if [ "$cmd" = "" ] ; then
      echo ""
      echo "usage: `basename $0` [-h <host>] [-v] list [config]|backup|restore"
      echo ""
      echo "`basename $0`  list        # print-format: <image> -> <remote-image-name>"
      echo "`basename $0`  list config # print-format: <image>;<directory>;<host>"
      echo ""
      exit 0
    fi

    # TBD move this in dc-install init sectioen 
    if [ ! -f ${MDE_DC_CONFIG_DIR}/dc_cluster.yml ] ; then
      mkdir -p ${MDE_DC_CONFIG_DIR}
      cat <<EOF > ${MDE_DC_CONFIG_DIR}/dc_cluster.yml
cluster:
  name:
  backup:
    image_url:
EOF
    fi
    #
    # read config data
    #
    eval `dc-yml -c ${MDE_DC_CONFIG_DIR}/dc_cluster.yml`
    if [ "$cluster_name" = "" -o "$cluster_backup_image_url" = "" ] ; then
      echo "cluster_name and/or cluster_backup_image_url not set in ${MDE_DC_CONFIG_DIR}/dc_cluster.yml !!!"
       exit 1
    fi

    url="$cluster_backup_image_url"
    cluster="$cluster_name"
    echo ""
    for host in $hlist ; do
      if [ "$cmd" = "restore" -a "$on_host" = "" ] ; then
        echo "restoring images only allowd for single haosts. use -h <host> parameter"
        exit 1
      fi
      echo "###########################################################################"
      echo "# $host image name ->  backup image name"
      echo "###########################################################################"
      if [ "$cmd" = "backup" ] ; then
        echo "try to connect to $url"   
        ping -c3 -W5  ${url%:*} >/dev/null
        if [ "$?" != "0" ] ; then
          echo "error connexting to $url !!!"
          exit 1
        fi
      fi
      image_list=$( dc-yq  '( .projects.* | select(.dc.home.[].host == "'$host'" ) .compose.services.*.image )' ${MDE_DC_YAML} | sort | uniq)
      for i in $image_list ; do
        image="$i"
        if [[ $image == *"/"* ]] ; then
          rep="${image%/*}"
          nam="${image#*/}"
        else
          rep=""
          nam="$image"
        fi
        target="${url}/${cluster}_${host}_${rep}_${nam}"
        target=${target%:}
        if [ "$2" = "config" ] ; then
          echo "$image;$DIR;${host}"
        else
          echo "$image -> $target"
        fi
        if [ "$cmd" = "backup" ] ; then
          dc -h ${host} docker tag ${image} ${target}
          if [ "$?" != "0" ] ; then echo "docker tag error!!!" ; exit 1 ; fi
          if [ "$verbose" = "1" ] ; then
            dc -h ${host} docker push          ${target}
          else
            dc -h ${host} docker push          ${target} >/dev/null
          fi
          if [ "$?" != "0" ] ; then
            echo "error: push image <${target}> to host <${host}>"
            exit 1
          fi
          dc -h ${host} docker image rm -f     ${target}
          if [ "$?" != "0" ] ; then echo "docker push error!!!" ; exit 1 ; fi
        fi
        if [ "$cmd" = "restore" ] ; then
          dc -h ${host} docker pull     ${target}
          dc -h ${host} docker tag      ${target}  ${image}
          dc -h ${host} docker image rm ${target}
        fi
      done
    done
  fi
exit 0
