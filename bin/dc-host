#!/bin/bash

. /opt/dc/etc/config

_ask()
{
  text="$1"
  echo "##################################################################"
  echo "#"
  echo "# ${text}. Type ENTER to start."
  echo "#"
  read ans
  return
}

on_host=""
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h) on_host="$2" ; shift 2 ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

CMD=$1
shift

if [ "$CMD" = "" ] ; then
  echo ""
  echo " usage: `basename $0` [-h <host>] <command>  # manage hosts and/or services on hosts"
  echo ""
  echo " host commands:"
  echo ""
  echo "    upgrade             # do dist-upgrade"
  echo "    update              # update docker-ce"
  echo "    nrc                 # number of running containers"
  echo "    reboot              # reboot host"
  echo "    large_files <size>  # find lage files, size=xG"
  echo "    dir_entries <count> # find directories with more then count entries"
  echo "    cmd .....           # run commands on $H"
  echo ""
  echo " service commands"
  echo ""
  echo "    list                # list services on $H"
  echo "    check               # check services on $H"
  echo "    check details       # check services on $H and show details"
  echo "    stop|start          # start or stop all services on $H"
  echo "    rm|up               # start or stop all services on $H"
  echo "    ps                  # show services on $H"
  echo ""
  exit 0
fi

if [ "$on_host" = "" ] ; then
  hlist=$( dc-list active_hosts )
else
  hlist="$on_host"
fi

for HOST in $hlist ; do
  if [ "$CMD" = "cmd" ] ; then
    if [ "$H" = "--all" ] ; then
      echo "#"	  
      echo "# dssh ${HOST} $*"
      echo "#"
    fi  
    dssh ${HOST} $*
  fi    
  if [ "$CMD" = "large_files" -o   "$CMD" = "dir_entries"  ] ; then
    if [ "$CMD" = "large_files" ] ; then
    FI=/tmp/.dc-remote-cmd.lf
cat <<EOF > $FI
find /Docker /var /xxx /tmp /home /mnt/backup-volume -type f -size +${1} -exec ls -lh {} + 2>/dev/null | awk '{ print "${HOST} " \$5 " " \$9 }'
EOF
    else
    FI=/tmp/.dc-remote-cmd.de
cat <<EOF > $FI
find /Docker /mnt/backup-volume -type d -exec bash -c "echo -ne '{} '; ls '{}' | wc -l" \; | awk '\$NF>=${1}'
EOF
    fi


    eval $(dc-yml -c $MDE_DC_HOST_DIR/$HOST/dc-host.yml)
    scp -q -i $MDE_DC_HOST_DIR/$HOST/$host_ssh_key $FI $host_ssh_user@$host_ip:$FI
    ssh -i $MDE_DC_HOST_DIR/$HOST/$host_ssh_key $host_ssh_user@$host_ip bash $FI
    ssh -i $MDE_DC_HOST_DIR/$HOST/$host_ssh_key $host_ssh_user@$host_ip rm   $FI
    rm -f $FI

    #dssh ${HOST} "find /Docker /var /xxx /tmp /home -type f -size +${1} -exec ls -lh {} + 2>/dev/null" | awk '{ print "'"${HOST} "'" $5 " " $9}'
  fi

  if [ "$CMD" = "nrc" ] ; then
    dssh $HOST docker ps -q | wc -l 
  fi

  if [ "$CMD" = "update" ] ; then
    BCOUNT=$( dssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    dssh $HOST apt-get update
    dssh $HOST apt-get -y install docker-ce
    sleep 3
    NCOUNT=$( dssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
  fi

  if [ "$CMD" = "upgrade" ] ; then
    BCOUNT=$( dssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    dc host -h $HOST check
    _ask "Start autoremove?"
    dssh $HOST apt-get -y autoremove
    _ask "Start apt-get update?"
    dssh $HOST apt-get update
    _ask "Start dist-uprade?"
    dssh $HOST apt-get -y dist-upgrade
    _ask "Check, if all containers are started!"
    NCOUNT=$( dssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
    _ask "Show running containers!"
    dc host -h $HOST check
    _ask "reboot?"
    dssh $HOST init 6
  fi

  if [ "$CMD" = "check" ] ; then
    BCOUNT=$( dssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    if [ "$1" = "details" ] ; then
      dc inspect -h $HOST runtime
    else
      dc inspect -h $HOST runtime | grep "_state="
    fi
  fi

  if [ "$CMD" = "list" ] ; then
    dc-list -y services -h $HOST
  fi

  if [ "$CMD" = "rm" -o "$CMD" = "up" -o "$CMD" = "ps" -o "$CMD" = "stop" -o "$CMD" = "start"   ] ; then
    list=$( dc-list -y services -h $HOST )
    for i in $list ; do
      dc -h $HOST -c $i $CMD
    done
  fi

  if [ "$CMD" = "reboot"   ] ; then
    dssh $HOST "reboot ; exit"
  fi

done
exit 0
