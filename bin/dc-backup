#!/bin/bash

_help()
{
  echo ""
  echo "usage: `basename $0` <source-dir> <target-dir> <mask>"
  echo ""
  echo "     example:"
  echo "       `basename $0` /Docker/Services/traefik ./test/traefik 0,1,2,3,4,5,6,7,14,21,28  "
  echo ""
  exit 0
}

today=$(date +%s)
if [ "$4" != "" ] ; then
  today=`expr $(date +%s) + ${4} \* 86400`
fi

get_age()
{
   echo `expr  \( ${today} - $(date -d $1 +%s) \) / 86400`
}

get_date() 
{
  s=`expr ${today} - ${1} \* 86400`
  d=`date -d @${s} +"%Y-%m-%d"`
  echo $d
}

if [ "$3" = "" ] ; then
  _help
fi

SDIR="$1"
TDIR="$2"
MASK=$( echo $3 | sed 's/,/ /g' )

mkdir -p $TDIR

echo '#!/bin/bash'       > $TDIR/script.sh
echo "`basename $0` $*" >> $TDIR/script.sh
chmod a+x                  $TDIR/script.sh

age_array=($MASK)

for i in `seq 0 ${age_array[-1]}` ; do
  arr_b[$i]=""
  arr_a[$i]=""
done

for i in "${age_array[@]}" ; do
  arr_a[${i}]=">"
done

comp=$( df -h $TDIR | grep "^/" | awk '{ print $2 }'  )
used=$( df -h $TDIR | grep "^/" | awk '{ print $3 }'  ) 
free=$( df -h $TDIR | grep "^/" | awk '{ print $4 }'  ) 
pers=$( df -h $TDIR | grep "^/" | awk '{ print $5 }'  )

echo "Backup-Source   : ${SDIR}"
echo "Backup-Host     : `hostname`"
echo "Backup-Directroy: ${TDIR}"

source_node=${SDIR%:*}
if [ "$source_node" != "$SDIR" ] ; then  # source node is remote
  STATE=$(dc node $source_node state)
  if [ "$STATE" = "off" ] ; then
    echo "-------------------------------------------------------" 
    echo "skipping backup, because node is off!"
    echo "-------------------------------------------------------" 
    exit 0
  fi
fi

echo "-------------------------------------------------------" 
echo "age|m|directory |operation|size  |used  |free  |used %|"
echo "-------------------------------------------------------"
  
cmd=""
printf "   |%1s|%-10s|%-9s|%-6s|%-6s|%-6s|%-6s|\n" "S" "" "$cmd" "$comp" "$used" "$free" "$pers"

backup_list=`(cd $TDIR && ls  -d ????-??-??*/ 2>/dev/null)`
for backup in $backup_list ; do
  backup=${backup%/}
  age=`get_age $backup`
  if (( $age > ${age_array[-1]} )) ; then
    rm -rf $TDIR/$backup
    comp=$( df -h $TDIR | grep "^/" | awk '{ print $2 }'  )
    used=$( df -h $TDIR | grep "^/" | awk '{ print $3 }'  )
    free=$( df -h $TDIR | grep "^/" | awk '{ print $4 }'  ) 
    pers=$( df -h $TDIR | grep "^/" | awk '{ print $5 }'  )
    cmd="removed"
    printf "%03d|%1s|%-10s|%-9s|%-6s|%-6s|%-6s|%-6s|\n" $age "R" "$backup" "$cmd" "$comp" "$used" "$free" "$pers"
  else
    arr_b[$age]=$backup  
  fi
done

for i in `seq 0 ${age_array[-1]}` ; do
  cmd=""
  if (( $i == 0 )) ; then
    echo "-------------------------------------------------------"
    rsync -azS --numeric-ids --delete -e "ssh" $SDIR/./ $TDIR/latest/   
    ret=$?
    if [ "$ret" != "0" ] ; then
      exit $ret
    fi
    rm -rf   $TDIR/$(get_date $i)
    mkdir -p $TDIR/$(get_date $i)
    cp -la $TDIR/latest/.  $TDIR/$(get_date $i)
    cmd="created"
  fi

  if [ -d $TDIR/$(get_date $i) ] ; then 
     arr_b[$i]=$(get_date $i)
  fi
  if [ "${arr_a[$i]}" = ""  -a "${arr_b[$i]}" != "" ] ; then
    for (( c=$i+1 ; c<=${age_array[-1]}; c++ )) ; do
      if [ "${arr_b[$c]}" != "" ] ; then
        cmd="removed"
        break
      fi
      if [ "${arr_a[$c]}" = ">" ] ; then
        break ;
      fi
    done
  fi
  if [ "$cmd" = "removed" ] ; then
    rm -Rf $TDIR/${arr_b[$i]} 
  fi

  dat=${arr_b[$i]}
  if [ "$cmd" = "" -a "$dat" != "" ] ; then cmd="kept" ; fi

  if [ "$cmd" = "" ] ; then
    comp=""
    used=""
  else 
    comp=$( df -h $TDIR | grep "^/" | awk '{ print $2 }'  )
    used=$( df -h $TDIR | grep "^/" | awk '{ print $3 }'  )
    free=$( df -h $TDIR | grep "^/" | awk '{ print $4 }'  ) 
    pers=$( df -h $TDIR | grep "^/" | awk '{ print $5 }'  ) 
  fi
  if [[ "${arr_a[$i]}" != "" || "${dat}" != "" ]] ; then
    printf "%03d|%1s|%-10s|%-9s|%-6s|%-6s|%-6s|%-6s|\n" $i "${arr_a[$i]}" "${dat}" "$cmd" "$comp" "$used" "$free" "$pers"
  fi
done
echo ""
exit 0
