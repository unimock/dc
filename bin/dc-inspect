#!/bin/bash
. /opt/dc/funcs/global
. /opt/dc/funcs/script_funcs

DISK_USAGE_LIMIT=90 # error if >40%

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h) on_host="$2" ; shift 2 ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

error=0
error_list=""

if [ "$1" = "" ] ; then
  echo ""
  echo "print config and/or runtime informations about the dc cluster"
  echo ""
  echo ""
  echo " usage: `basename $0` [-h <host>] runtime|config"
  echo ""
  exit 0
fi

dc mounts umount

check_runtime="1"
if [ "$1" = "config" ] ; then
  check_runtime="0"
fi


if [ "$on_host" != "" ] ; then
  hosts="$on_host"
else
  hosts=$( dc-list hosts used )
fi

host_error_marker=0
for host in $hosts ; do
  
  echo "#"	
  echo "# checking host $host ..."
  echo "#"
  echo "$host:"

  if [ "$check_runtime" = "1" ] ; then 	
    host_error_marker=0
    H_STATE=$( dc-yq '.hosts.'$host'.state' ${MDE_DC_YAML} )
    if [ "$H_STATE" = "active"  ] ; then
      state=$( dc-host -h $host state )
      if [ "$state" = "dock" ] ; then
         host_up=1
         state="Running"
      else
        host_up=0
        host_error_marker=1
        error_list="$error_list $host:not_running"
        error=1
      fi
    else
      state=$H_STATE
      host_up=0
    fi
    echo "  state: $state"
    if [ $host_up = 1 ] ; then
      os=$( dc -h $host ssh "lsb_release -s -r" )
      echo "  os: $os"
      proc=$( dc -h $host ssh df ${MDE_DC_VOL} | grep "^/" | awk -F" " '{ print $5 }' )
      size=${proc%\%}
      size_text=""
      if [ ${size} -ge ${DISK_USAGE_LIMIT} ] ; then
        size_text=" # disk_usage>${DISK_USAGE_LIMIT} warning!!!"
        error_list="$error_list $host:disk_size=$proc"
        host_error_marker=1
        error=1
      fi
      echo "  disk: $proc $size_text"
      version=$( dc -h $host docker version --format '{{.Server.Version}}'  )
      echo "  version: $version"
    fi
  fi

  if [ "$check_runtime" = "0" -o "$host_up" = "1" ] ; then
    projects_on_host=$( dc-yq  '( .projects.* | select(.dc.home.[].host == "'$host'" ) | .compose.name  )' ${MDE_DC_YAML}  )
    for service in $projects_on_host ; do
      echo "  $service:"
      if [ "$check_runtime" = "1" ] ; then
        if [ $host_up = 1 ] ; then
          project_status="Up"
          container_list=$(dc -h $host -p $service compose ps -q)
          if [ "$container_list" = "" ] ; then
            project_status="error_no_containers"
          else
            stat_list=$( echo "$container_list" | xargs dc -h $host -p $service  docker inspect --format '{{.State.Status}}')
            for stat in $stat_list ; do
              if [ "$stat" != "running" ] ; then
                project_status="error_incomplete_containers"
              fi
            done
          fi
          if [ "$project_status" != "Up" ] ; then
            host_error_marker=1
            error_list="$error_list $host:$service"
            error=1
          fi
          echo "    state: $project_status"
        else
          echo "    state: UNKOWN"
        fi
      fi
      img_list=$( dc-yq '.projects.'$service'.compose.services.*.image' ${MDE_DC_YAML} )
      echo "    image:"
      for img in $img_list ; do
	      echo "      - $img"
      done
    done
  fi

  if [ "$check_runtime" = "1" ] ; then
    # print result for this host  
    if [ $host_error_marker = 0 ] ; then
      echo "  checkresult: OK"
    else
      echo "  checkresult: ERROR"
    fi
  fi

done
if [ "$error" = "1" ] ; then
  echo "#"	
  echo "# detected errors: $error_list"
  echo "#"	
fi
exit $error

