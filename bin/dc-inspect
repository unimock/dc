#!/bin/bash
. /opt/dc/funcs/global
. /opt/dc/funcs/script_funcs

DISK_USAGE_LIMIT=90 # error if >40%

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h) on_node="$2" ; shift 2 ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

error=0
error_list=""

if [ "$1" = "" ] ; then
  echo ""
  echo "print config and/or runtime informations about the dc cluster"
  echo ""
  echo ""
  echo " usage: `basename $0` [-h <node>] runtime|config"
  echo ""
  exit 0
fi

dc mounts umount

check_runtime="1"
if [ "$1" = "config" ] ; then
  check_runtime="0"
fi


if [ "$on_node" != "" ] ; then
  nodes="$on_node"
else
  nodes=$( dc-list nodes used )
fi

node_error_marker=0
for node in $nodes ; do
  
  echo "#"	
  echo "# checking node $node ..."
  echo "#"
  echo "$node:"
  echo "  type: $(dc-yq '.nodes.'$node'.type' ${MDE_DC_YAML} )"
  if [ "$check_runtime" = "1" ] ; then 	
    node_error_marker=0
    H_STATE=$( dc-yq '.nodes.'$node'.state' ${MDE_DC_YAML} )
    if [ "$H_STATE" = "active"  ] ; then
      state=$( dc-node $node state )
      if [ "$state" = "dock" -o "$state" = "dc"  ] ; then
         node_up=1
         state="Running"
      else
        node_up=0
        node_error_marker=1
        error_list="$error_list $node:not_running"
        error=1
      fi
    else
      state=$H_STATE
      node_up=0
    fi
    echo "  state: $state"
    if [ $node_up = 1 ] ; then
      os=$( dc -h $node ssh "lsb_release -s -r" )
      echo "  os: $os"
      proc=$( dc -h $node ssh df ${MDE_DC_VOL} | grep "^/" | awk -F" " '{ print $5 }' )
      size=${proc%\%}
      size_text=""
      if [ ${size} -ge ${DISK_USAGE_LIMIT} ] ; then
        size_text=" # disk_usage>${DISK_USAGE_LIMIT} warning!!!"
        error_list="$error_list $node:disk_size=$proc"
        node_error_marker=1
        error=1
      fi
      echo "  disk: $proc $size_text"
      version=$( dc -h $node docker version --format '{{.Server.Version}}'  )
      echo "  version: $version"
    fi
  fi

  if [ "$check_runtime" = "0" -o "$node_up" = "1" ] ; then
    projects_on_node=$( dc-yq  '( .projects.* | select(.dc.home.[].node == "'$node'" ) | .compose.name  )' ${MDE_DC_YAML}  )
    for service in $projects_on_node ; do
      echo "  $service:"
      defined_state=( `dc-yq '( .projects.'$service'.dc.home.[] | select(.node == "'$node'" ) | .state) '`)
      echo "    state: $defined_state"

      if [ "$check_runtime" = "1" ] ; then
        if [ $node_up = 1 ] ; then
          project_status="Up"
          if [ "$defined_state" = "active" ] ; then
            container_list=$(dc -h $node -p $service compose ps -q)
            if [ "$container_list" = "" ] ; then
              project_status="error_no_containers"
            else
              stat_list=$( echo "$container_list" | xargs dc -h $node -p $service  docker inspect --format '{{.State.Status}}')
              for stat in $stat_list ; do
                if [ "$stat" != "running" ] ; then
                  project_status="error_incomplete_containers"
                fi
              done
            fi
            if [ "$project_status" != "Up" ] ; then
              node_error_marker=1
              error_list="$error_list $node:$service"
              error=1
            fi
            echo "    act_state: $project_status"
          fi
        else
          echo "    act_state: UNKOWN"
        fi
      fi
      img_list=$( dc-yq '.projects.'$service'.compose.services.*.image' ${MDE_DC_YAML} )
      echo "    image:"
      for img in $img_list ; do
	      echo "      - $img"
      done
    done
  fi

  if [ "$check_runtime" = "1" ] ; then
    # print result for this node  
    if [ $node_error_marker = 0 ] ; then
      echo "  checkresult: OK"
    else
      echo "  checkresult: ERROR"
    fi
  fi

done
if [ "$error" = "1" ] ; then
  echo "#"	
  echo "# detected errors: $error_list"
  echo "#"	
fi
exit $error

