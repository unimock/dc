#!/bin/bash
. /opt/dc/etc/config
. /opt/dc/funcs/script_funcs

DISK_USAGE_LIMIT=90 # error if >40%

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h) on_host="$2" ; shift 2 ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

error=0
error_list=""

if [ "$1" = "" ] ; then
  echo ""
  echo "print config and/or runtime informations about the dc cluster"
  echo ""
  echo ""
  echo " usage: `basename $0` [-h <host>] runtime|config"
  echo ""
  exit 0
fi

dc mounts umount

check_runtime="1"
if [ "$1" = "config" ] ; then
  check_runtime="0"
fi


if [ "$on_host" != "" ] ; then
  hosts="$on_host"
else
  hosts=$( dc-list used_hosts )
fi

host_error_marker=0
for host in $hosts ; do
  if [ "$check_runtime" = "1" ] ; then 	
    echo "#"	
    echo "# checking host $host ..."
    echo "#"
    host_error_marker=0
    H_STATE="inactive"
    if [ -f /root/.ssh/dc/config.$host ] ; then
      H_STATE="active"
    fi
    if [ "$H_STATE" = "active" ] ; then
      ssh -o BatchMode=yes -o ConnectTimeout=5 $host hostname >/dev/null 2>&1
      if [ "$?" = "0" ] ; then
         state="Running"
      fi
      if [ "$state" = "Running" ] ; then
        host_up=1
      else
        host_up=0
        host_error_marker=1
        error_list="$error_list $host:not_running"
        error=1
      fi
    else
      state=$H_STATE
      host_up=0
    fi
    echo "${host}_state=$state"
    if [ $host_up = 1 ] ; then
      os=$( dc -h $host ssh "lsb_release -s -r" )
      echo "${host}_os=$os"
      proc=$( dc -h $host ssh df ${MDE_DC_DOCKER_VOL} | grep "^/" | awk -F" " '{ print $5 }' )
      size=${proc%\%}
      size_text=""
      if [ ${size} -ge ${DISK_USAGE_LIMIT} ] ; then
        size_text=" # disk_usage>${DISK_USAGE_LIMIT} warning!!!"
        error_list="$error_list $host:disk_size=$proc"
        host_error_marker=1
        error=1
      fi
      echo "${host}_disk=$proc $size_text"
      version=$( dc -h $host docker version --format '{{.Server.Version}}'  )
      echo "${host}_version=$version"
    fi
  fi
  yml_list=$( dc-list -y services -h $host )
  for yml in $yml_list ; do
    service=$(dc-yml -c $yml service_name)
    if [ "$check_runtime" = "1" ] ; then
      if [ $host_up = 1 ] ; then
        service_stat=$( dc -h $host -s $service check )
        if [ "$?" != "0" ] ; then
          host_error_marker=1
          error_list="$error_list $host:$service"
          error=1
        fi
        echo "${host}_service_${service}_state=$service_stat"
      else
        echo "${host}_service_${service}_state=?"
      fi
    fi
    echo "${host}_service_${service}_config=$yml"
    directory=$( dirname $yml )
    compose_file="${directory}/docker-compose.yml"
    img_list=$( dc compose -f $compose_file config | dc-yq '.services.*.image' )
    for img in $img_list ; do
	    echo "${host}_service_${service}_image=$img"
    done
  done
  if [ "$check_runtime" = "1" ] ; then
    # print result for this host  
    if [ $host_error_marker = 0 ] ; then
      echo "${host}_checkresult=OK"
    else
      echo "${host}_checkresult=ERR/WARN"
    fi
  fi
done
if [ "$error" = "1" ] ; then
  echo "#"	
  echo "# detected errors: $error_list"
  echo "#"	
fi
exit $error

