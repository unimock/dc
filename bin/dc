#!/bin/bash

. /opt/dc/etc/config
. /opt/dc/funcs/config-refresh

####################################################################################################################################
show_help() {
  echo ""
  echo "docker cluster management"
  echo ""
  echo " usage: `basename $0` [<options>] [<cluster-command>|<service-command>|<container-command>] ..."
  echo ""
  echo "   options:"
  echo ""
  echo "     -i <host-index>  ........... work with host from ${MDE_DC_YAML_FILE}  0|1|2|.."
  echo "     -c <path>/${MDE_DC_YAML_FILE} ... work with service of the according service"
  echo "     -h <host> .................. work with this host, instead of the one which is defined in the service ${MDE_DC_YAML_FILE} file. "
  echo "     -s <service> ............... work with this service."
  echo "     -v ......................... verbose"
  echo ""
  echo "   cluster-commands:"
  echo ""
  echo "     readme                        # show README.md"
  echo "     install ...                   # dc installation and update functions"
  echo "     ls                            # list dc hosts"
  echo "     list ...                      # list hosts/services/.."
  echo "     config                        # check dc configurations"
  echo "     host ...                      # manage hosts and services on host"
  echo "     mounts [umount] ...           # list/unmount all service mounts to hosts"
  echo "     inspect ...                   # print config and/or runtime informations about the dc cluster"
  echo "     hcloud ...                    # create and manage Hezner-Cloud hosts"
  echo "     batch ...                     # manage job batches"
  echo "     docker|compose|swarm          # delegate command to standard tools"
  echo "     ssh                           # login into a host"                          
  echo "     manage ...                    # sync,.. services between hosts"
  echo ""
  echo "  build and deploy images on host:"
  echo ""
  echo "     build                         # build image according docker-compose.yml on target host"
  echo "     docker login                  # auth for dockerhub"
  echo "     docker push <image-name>      # push image from target host to dockerhub"
  echo ""
  echo "   service-commands"
  echo ""
  echo "     rmup|up|rm|down|ps|start|stop # control services"
  echo "     logs [-f]|stop|start          # print logs from service console"
  echo "     data pull|push service|s|persistent|p|sp [real|r] # sync service and persistent data"
  echo "     data mount|umount             # mount service and persistent data to ./data"
  echo ""
  echo "   container-commands:"
  echo ""
  echo "     login [command]               # login or run a command within <$DCN>."
  echo "     cmd   [command]               # run a command within <$DCN> without terminal (cron jobes, ..)."
  echo "     supervisor                    # connect to supervisord (help|quit|start|stop|restart)"
  echo "     syslog                        # print last lines from syslog"
  echo "     ovw push                      # push the content of </service/ovw> to </> within the container."
  echo "     ovw fetch                     # copy a file or directory from </> to </service/ovw/> within the container."
  echo "     ovw diff <file>               # compare a overwrite file"
  echo ""
  exit 0
}
####################################################################################################################################
#
# magic main
#
####################################################################################################################################
if [ "${1}" = "readme" ] ; then
  if [ "${2}" = "" ] ; then
    cat /opt/dc/README.md
  else
    vi /opt/dc/README.md
  fi
fi
if [ "${MDE_DC_DOCKER_VOL}" = "" ] ; then
  echo " ‚ùå {MDE_DC_DOCKER_VOL not set in </opt/dc/bin/dc-config> "
  exit 1
fi
if [ "$1" = "completion" ] ; then
  cat /opt/dc/funcs/bash-completion
  exit 0
fi

HOST=""
SERVICE=""
CONF=""
VERB=""
HIDX="0"

if [ "$1" = "mounts" ] ; then
  if [ "$2" != "umount" ] ; then
    mount | grep fuse.sshfs
    exit 0
  fi
  if [ "$2" = "umount" ] ; then  
    list=$( mount | grep fuse.sshfs | grep "${MDE_DC_DOCKER_VOL}"  | cut -d " " -f1 )
    for i in $list ; do
      umount $i
      echo unmounting: $i
    done
  fi
  exit 0 
fi

wrapper_list="inspect host install hcloud batch list manage config ls"
for i in $wrapper_list ; do
  if [ "$1" = "$i" ] ; then
    shift
    /opt/dc/bin/dc-$i $*
    exit $?
  fi  
done


CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -v)  VERB="1"           ; shift 1 ;; 
    -h)  HOST="$2"          ; shift 2 ;;
    -h*) HOST="${1#-h}"     ; shift 1 ;;
    -s)  SERVICE="$2"       ; shift 2 ;; 
    -s*) SERVICE="${1#-s}"  ; shift 1 ;;
    -i)  HIDX="$2"          ; shift 2 ;; 
    -i[0-9]) HIDX="${1#-i}" ; shift 1 ;; 
    -c)  CONF="$2"          ; shift 2 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done  
eval set -- $CURROPT

if [ "$CONF" != "" ] ; then
   if [ ! -f $CONF ] ; then
     echo "error: <$CONF> missing."
     exit 1
   fi
else
  if [ -f ./${MDE_DC_YAML_FILE} ] ; then CONF="./${MDE_DC_YAML_FILE}" ; fi
fi

if [ "$HOST" != "" -a "$SERVICE" != "" ] ;then
  CONF=$(dc-list -y services -h $HOST -s $SERVICE)
  if [ "$CONF" = "" ] ; then
    echo "error: service=<$SERVICE> not defined for host=<$HOST>"
    exit 1
  fi
fi

if [ "$CONF" != "" ] ; then
  abs_path="$( cd `dirname $CONF` ; pwd)/`basename $CONF`"
  project_name=$(  dc-yq '(( .projects.* | select( .dc_yml == "'$abs_path'") ) .dc.main_service )' ${MDE_DC_YAML} )
  main_service=$(  dc-yq '.projects.'$project_name'.dc.main_service' ${MDE_DC_YAML})
  service_hosts=( `dc-yq '.projects.'$project_name'.dc.home.[].host' ${MDE_DC_YAML}`)   # Array
  service_state=( `dc-yq '.projects.'$project_name'.dc.home.[].state' ${MDE_DC_YAML}`)  # Array
  HNAME=${service_hosts[${HIDX}]}
fi

if [ "$HOST" != "" ] ; then
  HNAME=$HOST
fi
CMD=${1}
######################################################################################################################################
if [ "$CMD" = "" ] ; then
  show_help
fi
if [ "$HNAME" != "" ] ; then
  export DOCKER_HOST="ssh://${HNAME}"
  if [ "$CONF" != "" ] ; then
    cd `dirname $CONF`
  fi
fi
case "$CMD" in
  reset)
    list=$( dc-list active_hosts )
    for i in $list ; do
      scntl=$(grep ControlPath /root/.ssh/dc/config.$i | awk -F " " '{ print $2 }' | cut -d "%" -f1 | sed -e "s|~|$HOME|g" )
      rm -vf ${scntl}${i}
    done
    ;;
  ssh)
    shift
    ssh ${HNAME} $*
    exit $?
    ;;
  up)
    docker compose up -d
    ;;
  rm)
    docker compose stop ; docker compose rm -f
    ;;
  down)
    docker compose down
    ;;
  rmup)
    docker compose stop ; docker compose rm -f ; docker compose up -d
    ;;
  info)
    ssh $HNAME 'echo -e "\n" ; df -h ; echo -e "\n" ; free -m ; echo -e "\n" ; uptime ; echo -e "\n"'
    ;;
  check)
    for i in "${!service_hosts[@]}"; do
      if [ "${service_hosts[${i}]}" != "$HOST" ] ; then continue ; fi 
      if [ "${service_state[${i}]}" != "active" ] ; then
        echo "${service_state[${i}]}"
        exit 0
      fi
      container_list=$(dc -c $CONF compose ps -q)
      if [ "$container_list" = "" ] ; then
        echo "error_no_containers"
        exit 1
      fi
      stat_list=$( echo "$container_list" | xargs dc -c $CONF docker inspect --format '{{.State.Status}}')
      for stat in $stat_list ; do
        if [ "$stat" != "running" ] ; then
          echo "error_incomplete_containers"
          exit 1
        fi
      done
      echo "Up"
      exit 0
    done
    ;; 
  pull)
    docker compose pull
    exit 0
    ;;
  push)
    echo " !!!<pull|push> is deprecated!!! Use <data pull|push> insted."
    exit 1
    ;;
  data)
    scmd=$2
    if [ "$scmd" = "mount" ] ; then
      mkdir -p ./data
      project_name=$(docker compose config | dc-yq '.name')
      sshfs $HNAME:/${MDE_DC_DOCKER_VOL}/Services/${project_name} ./data
      exit $?
    fi
    project_name=$( docker compose -f `dirname $CONF`/docker-compose.yml config | dc-yq '.name' )
    if [ "$scmd" = "umount" ] ; then
      umount ./data
      rmdir ./data
    fi
    type=${3%/}
    DRY=" --dry-run " ; if [ "$4" = "real" -o "$4" = "r" ] ; then DRY="" ; fi
    if   [ "$type" = "sp" ] ; then list="service persistent"
    elif [ "$type" = "s"  ] ; then list="service"
    elif [ "$type" = "p"  ] ; then list="persistent"
    else   list="$type" ; fi
    for TYPE in $list ; do
      LDIR=`dirname $CONF`/$TYPE
      if [ "$TYPE" != "persistent" -a "$TYPE" != "service" ] ; then
        echo "error neither persistent nor service given."
        exit 0
      fi
      if [ "$scmd" = "push" ] ; then
        ssh ${HNAME}  mkdir -p /${MDE_DC_DOCKER_VOL}/Services/${project_name}
        rsync  ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
               ${LDIR}/ ${HNAME}:/${MDE_DC_DOCKER_VOL}/Services/${project_name}/$TYPE
        echo "push $DRY folder FROM <${LDIR}> TO <$HNAME> (<${HNAME}:/${MDE_DC_DOCKER_VOL}/Services/${project_name}/$TYPE>)"
      elif [ "$scmd" = "pull" ] ; then
        ssh ${HNAME} ls -d /${MDE_DC_DOCKER_VOL}/Services/${project_name}/$TYPE >/dev/null 2>&1
        if [ "$?" = "0" ] ; then
          mkdir -p ${LDIR}
          rsync   ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
                  ${HNAME}:/${MDE_DC_DOCKER_VOL}/Services/${project_name}/$TYPE/ ${LDIR}
          echo "pull $DRY folder FROM <$HNAME> (<${HNAME}:/${MDE_DC_DOCKER_VOL}/Services/${project_name}/$TYPE>) TO <./${TYPE}> done." 
        else
          if [ -d ./${TYPE} ] ; then
            echo "WARNING ./${TYPE} only exists locally!"  
            exit 1
          fi
        fi
      elif [ "$scmd" = "remove" ] ; then
         echo "TBD"
      fi
    done
    ;;
  ############
  supervisor)
    docker compose exec ${main_service} supervisorctl
    ;;
  syslog)
    docker compose exec ${main_service} tail -n 200 /var/log/syslog
    ;;
  login)
    shift
    if [ "$1" = "" ] ; then
      cmd="bash"
    else
      cmd=$*
    fi
	  docker compose exec  ${main_service} $cmd
    ;;
  cmd)
    shift
    docker compose exec -T  ${main_service} $*
    ret=$?
    exit $ret
    ;;
  ovw)
    if [ "$2" = "push" ] ; then
      docker compose  exec ${main_service} rsync -av /service/ovw/ /
      exit 0
    fi
    if [ "$2" = "fetch" ] ; then
      if [ "$3" = "" ] ; then
        echo "parameter error: no dir/file given (see usage)"
        exit 0
      fi
      echo "rsync -avR ${3} /service/ovw/"
      docker compose  exec ${main_servicei} ync -avR ${3} /service/ovw/
      exit 0
    fi
    if [ "$2" = "fetch" ] ; then
       docker compose exec ${main_service} diff /service/ovw/${3} ${3}
       exit 0
    fi
    ;;
  #############
  docker)
    shift
    docker $*
    ;;
  compose|docker-compose)
    shift
    docker compose $*
    ;;
  swarm)
    echo "swarm command (have to be done)"
     ;;
  *)
    if [ "$CONF" != "" ] ; then
      docker compose $* 
    fi
    ;;
esac
