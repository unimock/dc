#!/bin/bash
MULTI_NODES=""

printf "%-60s # %s %s\n" "dc $*" "$(date +'%Y-%m-%d %H:%M:%S')" "$(ps -o comm= $PPID)"  >> /tmp/.dc-history



if [ "$1" = "install" ] ; then
  shift
  /opt/dc/bin/dc-install $@
  exit $?
fi

. /opt/dc/funcs/global

####################################################################################################################################
show_help() {
  echo ""
  echo "docker cluster manager"
  echo ""
  echo ""
  echo " usage: `basename $0` [<options>] [<cluster-command>|<app-command>|<container-command>] ..."
  echo ""
  echo "   options:"
  echo ""
  echo "     -i <node-index>  ........... work with node from ${MDE_DC_YAML_FILE}  0|1|2|.."
  echo "     -c <path>/${MDE_DC_YAML_FILE} ... work with app (can also be a directory)"
  echo "     -n <node> .................. work with this node, instead of the one which is defined in the app ${MDE_DC_YAML_FILE} file"
  echo "     -a <app> ............... work with this app"
  echo "     -v ......................... verbose"
  echo ""
  echo "   cluster-commands:"
  echo ""
  echo "     readme                        # show README.md"
  echo "     versions                      # show versions"
  echo "     completion                    # source bash completion like: echo 'source <(dc completion)' >> ~/.bash_aliases"
  echo "     ssh-control-reset             # remove ssh control sockets"
  echo "     install ...                   # dc installation and update functions"
  echo "     ls [--help]                   # list nodes"
  echo "     list ...                      # list nodes/apps"
  echo "     config ...                    # manage dc configurations"
  echo "     node ...                      # manage nodes and apps on node"
  echo "     mounts [umount] ...           # list/unmount all apps mounts to nodes"
  echo "     inspect ...                   # print config and/or runtime informations about the dc cluster"
  echo "     vserver ...                   # manage virtual servers and aassign the to node definition"
  echo "     batch ...                     # manage job batches"
  echo "     docker|compose|swarm          # delegate command to standard tools"
  echo "     ssh [<cmd>]                   # login into a node"                          
  echo "     manage ...                    # sync apps between nodes"
  echo "     hcloud ...                    # link to comptible hcloud version"
  echo "     image  ...                    # list and update images"
  echo ""
  echo "  build and deploy images on node:"
  echo ""
  echo "     build                         # build image according docker-compose.yml on target node"
  echo "     docker login                  # auth for dockerhub"
  echo "     docker push <image-name>      # push image from target node to dockerhub"
  echo ""
  echo "   app-commands"
  echo ""
  echo "     rmup|up|rm|down|ps|start|stop # control apps"
  echo "     logs [-f]|stop|start          # print logs from service console"
  echo "     data pull|push ${MDE_DC_VOL_N_CFG}|c|${MDE_DC_VOL_N_VAR}|v|cv [real|r] # sync ${MDE_DC_VOL_N_CFG} and ${MDE_DC_VOL_N_VAR} data"
  echo "     data mount|umount             # mount p${MDE_DC_VOL_N_CFG} and ${MDE_DC_VOL_N_VAR} data to ./data"
  echo ""
  echo "   container-commands:"
  echo ""
  echo "     login [command]               # login or run a command within <$DCN>."
  echo "     cmd   [command]               # run a command within <$DCN> without terminal (cron jobes, ..)."
  echo "     supervisor                    # connect to supervisord (help|quit|start|stop|restart)"
  echo "     syslog                        # print last lines from syslog"
  echo "     ovw push                      # push the content of </service/ovw> to </> within the container."
  echo "     ovw fetch                     # copy a file or directory from </> to </service/ovw/> within the container."
  echo "     ovw diff <file>               # compare a overwrite file"
  echo ""
  echo ""
  echo "important user commands:"
  echo ""
  echo "  dc versions                                # show versions"
  echo "  dc ssh-control-reset                       # remove ssh control sockets"
  echo ""
  echo "  dc ls nodes [--inspect]                    # show defined nodes (check state with --inspect)"
  echo "  dc ls apps  [--inspect]                    # show defined app services (check state with --inspect)"
  echo "  dc ls images"
  echo "  dc ls addapps"
  echo ""
  echo "  dc node <name> config create <hname_or_ip> # define new node from template"
  echo "  dc node <name> config edit                 # modify node definition file"
  echo "  dc node <name> config delete               # delete node"
  echo "  dc node <name> ip|state                    # get fqdn, state of node"
  echo ""
  exit 0
}
####################################################################################################################################
#
# magic main
#
####################################################################################################################################
if [ "${1}" = "versions" ] ; then
 echo "dc-$(cat /opt/dc/VERSION)"
 /opt/dc/external/yq -V
 /opt/dc/external/hcloud version
 exit 0
fi

if [ "${1}" = "readme" ] ; then
  if [ "${2}" = "" ] ; then
    cat /opt/dc/README.md
  else
    vi /opt/dc/README.md
  fi
fi
if [ "${MDE_DC_VOL}" = "" ] ; then
  echo " ❌ MDE_DC_VOL not set in </opt/dc/bin/dc-config> "
  exit 1
fi

if [ "${MDE_DC_HOST_DIR}" = "" ] ; then
  echo " ❌ MDE_DC_HOST_DIR not set in </opt/dc/bin/dc-config> "
  exit 1
fi
if [ "$1" = "completion" ] ; then
  cat /opt/dc/funcs/bash-completion
  exit 0
fi

HOST=""
SERVICE=""
CONF=""
VERB=""
HIDX="0"
PROJECT_DIR=""

if [ "$1" = "mounts" ] ; then
  if [ "$2" != "umount" ] ; then
    mount | grep fuse.sshfs
    exit 0
  fi
  if [ "$2" = "umount" ] ; then  
    list=$( mount | grep fuse.sshfs | grep "${MDE_DC_VOL}"  | cut -d " " -f1 )
    for i in $list ; do
      umount $i
      echo unmounting: $i
    done
  fi
  exit 0 
fi
if [ "$1" = "ssh-control-reset" ] ; then
  rm -fv  $HOME/.dc/var/ssh/control/*
  exit 0
fi
wrapper_list="inspect node app install vserver batch list manage config ls vserver hcloud kvm image"
for i in $wrapper_list ; do
  if [ "$1" = "$i" ] ; then
    shift
    if [ "$i" = "ls" -a "$1" = "images" ] ; then
      /opt/dc/bin/dc-image ls
    elif [ "$i" = "ls" -a "$1" = "addapps" ] ; then
      addapps ls
    else
      /opt/dc/bin/dc-$i "$@"
    fi
    exit $?
  fi  
done

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -v)  VERB="1"           ; shift 1 ;; 
    -n)  HOST="$2"          ; shift 2 ;;
    -n*) HOST="${1#-n}"     ; shift 1 ;;
    -a)  SERVICE="$2"       ; shift 2 ;; 
    -a*) SERVICE="${1#-s}"  ; shift 1 ;;
    -i)  HIDX="$2"          ; shift 2 ;; 
    -i[a,0-9]) HIDX="${1#-i}" ; shift 1 ;; 
    -c)  CONF="$2"          ; shift 2 ;;
    -d)  PROJECT_DIR="$2"   ; shift 2 ;;
    *)  CURROPT="$CURROPT \"${1//\"/\\\"}\"" ; shift 1 ;;
  esac
done  
eval set -- $CURROPT

CMD=${1}

if [ "$CMD" = "" ] ; then
  show_help
fi
if [[ "$CMD" == "ssh" && "$HOST" != "" ]] ; then
  shift
  ssh $HOST $*
  exit $?
fi

if [[ "$CMD" == "docker" && "$HOST" != "" ]] ; then
  shift
  export DOCKER_HOST="ssh://${HOST}"
  docker $*
  exit $ret
fi  

######################################################################################################################################
app_dir=""
if [[ "$CONF" != "" ]] ; then
  if [[ ! -f $CONF && ! -d $CONF ]] ; then
    echo "error: given app is neither a file nor a directory."
    exit 1
  fi
  if [ -f $CONF ] ; then
    app_dir="$( cd `dirname $CONF` ; pwd)"
  else
    app_dir="$( cd $CONF ; pwd)"
  fi
  if [ "${SERVICE}" != "" ] ; then
    echo "error: it is not allowed to enter app file and app"
    exit 1
  fi
fi
if [ "${SERVICE}" != "" ] ; then
  app_dir=$( dc-yq '.apps.'$SERVICE'.app_dir' ${MDE_DC_YAML} )
  if [ "$app_dir" = "null"  ] ; then
    echo "error: unkown app given."
    exit 1
  fi
fi
if [[ "$app_dir" == "" && -f ./${MDE_DC_YAML_FILE} ]] ; then
  app_dir="$(pwd)"
fi
if [[ "$app_dir" == "" ]] ; then
  echo "error: no valid app given"
  exit 1
fi
#echo "app_dir=$app_dir"

# HIDX und HOST parameter auswerten und pruefen

HNAME=""
if [ "$HOST" != "" ] ; then
  found="0"
  hlist=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.home.[].node  )' ${MDE_DC_YAML} )
  for i in $hlist ; do
    if [ "$i" = "$HOST" ] ; then
      found="1"
      break
    fi
  done
  if [ "$found" != "1" ] ; then
    echo "error: node=$HOST not valid."
    exit 1
  fi
  HNAME=$HOST
else
  if [ "${HIDX}" = "a" ] ; then
    MULTI_NODES=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.home.[].node  )' ${MDE_DC_YAML} )
  else
    HNAME=$( dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.home.['$HIDX'].node  )' ${MDE_DC_YAML} )
    if [ "$HNAME" = "null" ] ; then
      echo "error: node_index=$HIDX not valid."
      exit 1
    fi
  fi
fi

if [ "$CMD" = "vol" ] ; then
  #if [ "$(pwd)" = "$app_dir" ] ; then
  if [ "$SERVICE" = "" ] ; then
    SERVICE=$( dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'") | path ) [-1] )' ${MDE_DC_YAML}  )

 
  fi
  echo "pwd=$(pwd)"
  #echo "app_dir=$app_dir"
  echo "TBD:"
  echo " HNAME=$HNAME"
  echo " app=$SERVICE"
  echo " list|mount|umount|pull|push"
  echo " <cmd> Project/cfg, Project, Backup, Logs, /Volumes/xzy"
  exit 0
fi
if [ "${MULTI_NODES}" = "" ] ; then
  MULTI_NODES=${HNAME}
fi
for HNAME in ${MULTI_NODES} ; do


export DOCKER_HOST="ssh://${HNAME}"
cd $app_dir

case "$CMD" in
  ssh)
    shift
    ssh ${HNAME} $*
    exit $?
    ;;
  up)
    docker compose up --quiet-pull -d
    ret=$?
    if [ "$ret" != "0" ] ; then
      echo "!!! error=$ret dc up "
    fi
    ;;
  rm)
    docker compose stop ; docker compose rm -f
    ;;
  down)
    docker compose down
    ;;
  rmup)
    docker compose stop
    docker compose rm -f
    docker compose up --quiet-pull -d
    ret=$?
    if [ "$ret" != "0" ] ; then
      echo "!!! error=$ret dc up "
    fi
    ;;
  pull)
    docker compose pull
    exit 0
    ;;
  data)
    scmd=$2
    app_name=$( dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) | path ) [-1] )' ${MDE_DC_YAML} )
    if [ "$scmd" = "mount" ] ; then
      mkdir -p ./data
      mount_source="$HNAME:/${MDE_DC_VOL_Apps}/${app_name}"
      if [ "$3" != "" ] ; then
        mount_source="${mount_source}/${3}"
      fi
      sshfs ${mount_source} ./data
      ret=$?
      if [ "$ret" != "0" ] ; then
         echo "error mounting <${mount_source}> to ./data"
         rmdir ./data
      fi
      exit $ret
    fi
    if [ "$scmd" = "umount" ] ; then
      umount ./data
      rmdir ./data
    fi
    type=${3%/}
    DRY=" --dry-run " ; if [ "$4" = "real" -o "$4" = "r" ] ; then DRY="" ; fi
    if   [ "$type" = "cv" ] ; then list="${MDE_DC_VOL_N_CFG} ${MDE_DC_VOL_N_VAR}"
    elif [ "$type" = "s"  ] ; then list="${MDE_DC_VOL_N_CFG}"
    elif [ "$type" = "p"  ] ; then list="${MDE_DC_VOL_N_VAR}"
    else   list="$type" ; fi
    for TYPE in $list ; do
      LDIR=./$TYPE
      if [ "$TYPE" != "${MDE_DC_VOL_N_VAR}" -a "$TYPE" != "${MDE_DC_VOL_N_CFG}" ] ; then
        echo "error neither ${MDE_DC_VOL_N_VAR} nor ${MDE_DC_VOL_N_CFG} given."
        exit 0
      fi
      if [ "$scmd" = "push" ] ; then
        ssh ${HNAME}  mkdir -p /${MDE_DC_VOL_Apps}/${app_name}
        rsync  ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
               ${LDIR}/ ${HNAME}:/${MDE_DC_VOL_Apps}/${app_name}/$TYPE
        echo "push $DRY folder FROM <${LDIR}> TO <$HNAME> (<${HNAME}:/${MDE_DC_VOL_Apps}/${app_name}/$TYPE>)"
      elif [ "$scmd" = "pull" ] ; then
        ssh ${HNAME} ls -d /${MDE_DC_VOL_Apps}/${app_name}/$TYPE >/dev/null 2>&1
        if [ "$?" = "0" ] ; then
          mkdir -p ${LDIR}
          rsync   ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
                  ${HNAME}:/${MDE_DC_VOL_Apps}/${app_name}/$TYPE/ ${LDIR}
          echo "pull $DRY folder FROM <$HNAME> (<${HNAME}:/${MDE_DC_VOL_Apps}/${app_name}/$TYPE>) TO <./${TYPE}> done." 
        else
          if [ -d ./${TYPE} ] ; then
            echo "WARNING ./${TYPE} only exists locally!"  
            exit 1
          fi
        fi
      fi
    done
    ;;
  ############
  supervisor)
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
    docker compose exec ${main_service} supervisorctl
    ;;
  syslog)
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
    docker compose exec ${main_service} tail -n 200 /var/log/syslog
    ;;
  login)
    shift
    if [ "$1" = "" ] ; then
      cmd="sh"
    else
      cmd=$*
    fi
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
	  docker compose exec  ${main_service} $cmd
    ;;
  cmd)
    shift
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
    docker compose exec -T  ${main_service} $*
    ret=$?
    exit $ret
    ;;
  ovw)
    if [ "$2" = "push" ] ; then
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
      docker compose  exec ${main_service} rsync -av /service/ovw/ /
      exit 0
    fi
    if [ "$2" = "fetch" ] ; then
      if [ "$3" = "" ] ; then
        echo "parameter error: no dir/file given (see usage)"
        exit 0
      fi
      echo "rsync -avR ${3} /service/ovw/"
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
      docker compose  exec ${main_servicei} ync -avR ${3} /service/ovw/
      exit 0
    fi
    if [ "$2" = "fetch" ] ; then
    main_service=$(dc-yq '(( .apps.* | select(.app_dir == "'$app_dir'" ) ) | .dc.main_service  )' ${MDE_DC_YAML} )
       docker compose exec ${main_service} diff /service/ovw/${3} ${3}
       exit 0
    fi
    ;;
  #############
  docker)
    shift
    docker $*
    ;;
  compose|docker-compose)
    shift
    docker compose $*
    ;;
  swarm)
    echo "swarm command (have to be done)"
     ;;
  *)
    docker compose $* 
    ;;
esac
done
