#!/bin/bash

. /opt/dc/etc/config

####################################################################################################################################
show_help() {
  echo ""
  echo "docker cluster management"
  echo ""
  echo " usage: `basename $0` [<options>] [<cluster-command>|<service-command>|<container-command>] ..."
  echo ""
  echo "   options:"
  echo ""
  echo "     -i <host-index>  ........... work with host from dc-service.yml  0|1|2|.."
  echo "     -c <path>/dc-service.yml ... work with service of the according service"
  echo "     -h <host> .................. work with this host, instead of the one which is defined in the service dc-service.yml file. "
  echo "     -s <service> ............... work with this service."
  echo "     -v ......................... verbose"
  echo ""
  echo "   cluster-commands:"
  echo ""
  echo "     install ...                   # dc installation and update functions"
  echo "     ls                            # list dc hosts"
  echo "     list ...                      # list hosts/services/.."
  echo "     host ...                      # manage hosts and services on host"
  echo "     mounts [umount] ...           # list/unmount all service mounts to hosts"
  echo "     inspect ...                   # print config and/or runtime informations about the dc cluster"
  echo "     hcloud ...                    # create and manage Hezner-Cloud hosts"
  echo "     batch ...                     # manage job batches"
  echo "     docker|compose|swarm          # delegate command to standard tools"
  #echo "     create|test|remove|enable|disable"
  echo "     ssh                           # login into a host"                          
  echo "     manage ...                    # sync,.. services between hosts"
  echo ""
  echo "  build and deploy images on host:"
  echo ""
  echo "     build                         # build image according docker-compose.yml on target host"
  echo "     docker login                  # auth for dockerhub"
  echo "     docker push <image-name>      # push image from target host to dockerhub"
  echo ""
  echo "   service-commands"
  echo ""
  echo "     rmup|up|rm|down|ps|start|stop # control services"
  echo "     logs [-f]|stop|start          # print logs from service console"
  echo "     data pull|push service|s|persistent|p|sp [real|r] # sync service and persistent data"
  echo "     data mount|umount             # mount service and persistent data to ./data"
  echo ""
  echo "   container-commands:"
  echo ""
  echo "     login [command]               # login or run a command within <$DCN>."
  echo "     cmd   [command]               # run a command within <$DCN> without terminal (cron jobes, ..)."
  echo "     supervisor                    # connect to supervisord (help|quit|start|stop|restart)"
  echo "     syslog                        # print last lines from syslog"
  echo "     config                        # configure ispconfig (set server_name, passwords ...)"
  echo "     migrate                       # migration tool (import and export data)"
  echo "     ovw push                      # push the content of </service/ovw> to </> within the container."
  echo "     ovw fetch                     # copy a file or directory from </> to </service/ovw/> within the container."
  echo "     ovw diff <file>               # compare a overwrite file"
  echo ""
  exit 0
}
####################################################################################################################################
#
# magic main
#
####################################################################################################################################
HOST=""
SERVICE=""
CONF=""
VERB=""
HIDX="0"

if [ "$1" = "mounts" ] ; then
  if [ "$2" != "umount" ] ; then
    mount | grep fuse.sshfs
    exit 0
  fi
  if [ "$2" = "umount" ] ; then  
    list=$( mount | grep fuse.sshfs | grep "/Docker"  | cut -d " " -f1 )
    for i in $list ; do
      umount $i
      echo unmounting: $i
    done
  fi
  exit 0 
fi

wrapper_list="inspect host install hcloud batch list manage"
for i in $wrapper_list ; do
  if [ "$1" = "$i" ] ; then
    shift
    /opt/dc/bin/dc-$i $*
    exit $?
  fi  
done


CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -v)  VERB="1"           ; shift 1 ;; 
    -h)  HOST="$2"          ; shift 2 ;;
    -h*) HOST="${1#-h}"     ; shift 1 ;;
    -s)  SERVICE="$2"       ; shift 2 ;; 
    -s*) SERVICE="${1#-s}"  ; shift 1 ;;
    -i)  HIDX="$2"          ; shift 2 ;; 
    -i[0-9]) HIDX="${1#-i}" ; shift 1 ;; 
    -c)  CONF="$2"          ; shift 2 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done  
eval set -- $CURROPT

if [ "$CONF" != "" ] ; then
   if [ ! -f $CONF ] ; then
     echo "error: <$CONF> missing."
     exit 1
   fi
else
  if [ -f ./dc-service.yml ] ; then CONF="./dc-service.yml" ; fi
fi

if [ "$HOST" != "" -a "$SERVICE" != "" ] ;then
  CONF=$(dc-list -y services -h $HOST -s $SERVICE)
  if [ "$CONF" = "" ] ; then
    echo "error: service=<$SERVICE> not defined for host=<$HOST>"
    exit 1
  fi
fi

if [ "$CONF" != "" ] ; then
  eval "$(dc-yml -c $CONF)"
  HNAME=${service_hosts[${HIDX}]}
fi

if [ "$HOST" != "" ] ; then
  HNAME=$HOST
fi
CMD=${1}
######################################################################################################################################
if [ "$CMD" = "" ] ; then
  show_help
fi
if [ "$HNAME" != "" ] ; then
  export DOCKER_HOST="ssh://${HNAME}"
  if [ "$CONF" != "" ] ; then
    cd `dirname $CONF`
  fi
fi
case "$CMD" in
  reset)
    list=$( dc-list active_hosts )
    for i in $list ; do
      scntl=$(grep ControlPath /root/.ssh/dc/config.$i | awk -F " " '{ print $2 }' | cut -d "%" -f1 | sed -e "s|~|$HOME|g" )
      rm -vf ${scntl}${i}
    done
    ;;
  ls)

    opt_active="0"
    opt_short="0"
    opt_group=""
    opt_format=""
    opt_host=""
    shift
    COPT=""
    while [ "$#" -gt 0 ]; do
      case "$1" in
        --active) opt_active="1"                ; shift ;;
        --help)   echo "TBD ..."    ; exit 0    ; shift ;;
        --short)  opt_short="1"                 ; shift ;;
        --group=*) opt_group=${1#"--group="}    ; shift ;;
        --host=*) opt_host=${1#"--host="}       ; shift ;;
        --format=*) opt_format=${1#"--format="} ; shift ;;
        *)  COPT="$COPT \"$1\""                 ; shift ;;
      esac
    done
    eval set -- $COPT

    list_all=$( dc-list active_hosts )
    list=""
    for i in $list_all ; do
      if [ "$opt_group" != "" ] ; then
        group=$(  grep "^#group: "  /root/.ssh/dc/config.$i | sed "s/#group: //g"  )
        for (( k=0; k<${#opt_group}; k++ )); do
          opt_group_char="${opt_group:$k:1}"
          if [[ (${group} != "") && ( ${group} == *${opt_group_char}* ) ]]; then
            list="$list $i"
            break
          fi
        done
      else
        list="$list $i"
      fi
    done
    if [ "$opt_short" = "1" ] ; then
      for i in $list ; do     
        if [ "$opt_active" = "1" ] ; then
          ssh -o BatchMode=yes -o ConnectTimeout=1 $i hostname >/dev/null 2>&1
          ret=$?
          if [ "$ret" = "0" ] ; then
            echo "$i"
          fi
        else
            echo "$i"
        fi
      done 
      exit 0
    fi

    if [ "$opt_format" = "" ] ; then
      MASK="%10s|%-3s|%-6s|%-8s|%-8s|%-8s|%1s|%-2s|%-3s|%-2s|%s\n"
      printf "$MASK" "HOST" "GRP" "OS" "OS_VER" "DOCK_VER" "MDE_VER" "M" "P" "HD" "ID" "DESCRIPTION"
      printf "$MASK" "----------" "---" "------" "--------" "--------" "--------" "-" "--" "---" "--" "-----------"
    fi
    for i in $list ; do
      if [ "$opt_host" != "" -a "$opt_host" != "$i" ] ; then
         continue
      fi
      desc=$(  grep "^#desc: "  /root/.ssh/dc/config.$i | sed "s/#desc: //g"  )
      prov=$(  grep "^#prov: "  /root/.ssh/dc/config.$i | sed "s/#prov: //g"  )
      group=$( grep "^#group: " /root/.ssh/dc/config.$i | sed "s/#group: //g" )
      os=$(    grep "^#os: "    /root/.ssh/dc/config.$i | sed "s/#os: //g" )
      mid=$(   grep "^#id: "    /root/.ssh/dc/config.$i | sed "s/#id: //g" )

      dver=""
      mver=""
      os_ver=""
      size=""
      patch=""
      serial=""
      monitor=""
      state=""

      ssh -o BatchMode=yes -o ConnectTimeout=1 $i hostname >/dev/null 2>&1
      ret=$?
      if [ "$ret" != 0 -a "$opt_active" = "1" ] ; then # host nicht aktiv und nur aktive anzeigen
        continue 
      fi
      
      if [ "$ret" = "0" ] ; then
        state="up"
        if [ "$os" = "ubuntu" ] ; then
          os_ver=$( ssh $i lsb_release -d -s 2>/dev/null | cut -d " " -f2)
          os_ver=${os_ver:0:8}
        else
          VERSION_ID=""
          eval $( ssh $i "cat  /etc/os-release" 2>/dev/null  | grep "^VERSION_ID=" )
          os_ver="$VERSION_ID"
          os_ver=${os_ver%_*}
        fi 
        dver=$( DOCKER_HOST="ssh://$i" docker version --format '{{.Server.Version}}' 2>/dev/null )
        if [ "$dver" = "" ] ; then
          dver=""
        fi
        # get mde-wg patch number
        patch=$( ssh $i cat /etc/mde/patch 2>/dev/null )
        size=0
        size_list=$(ssh $i df -h 2>/dev/null | grep '^/dev' | grep -v '^/dev/loop' | awk -F " " '{ print $5 }' | cut -f1 -d "%")
        for x in $size_list ; do
          if (( $x >= $size )) ; then
            let size=$x
          fi
        done
        x=$( ssh $i cat /etc/machine-id 2>/dev/null )
        if [ "$x" = "" ] ; then
          serial="!!"
        elif [ "$x" = "$mid" ] ; then
          serial="OK"
        else
          serial="$x"
        fi
        mver=$( ssh $i dpkg -l 2>/dev/null | awk '$2=="mde-base" { print $3 }' ) 
        if [ "$mver" = "" ] ; then
          mver=""
          monitor=""
        else
          x=$( ssh $i pgrep mde-monitor 2>/dev/null)
          if [ "$x" != "" ] ; then
            monitor="M"
          fi
        fi
        #
        # store latests host data
        #
        mkdir -p /var/dc/hosts
        host_data_file=/var/dc/hosts/$i
        rm -f $host_data_file
        HOST="host"
        echo "dc_${HOST}_name=\"${i}\""                 >> $host_data_file
        echo "dc_${HOST}_state=\"${state}\""            >> $host_data_file
        echo "dc_${HOST}_group=\"${group}\""            >> $host_data_file
        echo "dc_${HOST}_os=\"${os}\""                  >> $host_data_file
        echo "dc_${HOST}_os_version=\"${os_ver}\""      >> $host_data_file
        echo "dc_${HOST}_docker_version=\"${dver}\""    >> $host_data_file
        echo "dc_${HOST}_mde_version=\"${mver}\""       >> $host_data_file
        echo "dc_${HOST}_mde_monitor=\"${monitor}\""    >> $host_data_file
        echo "dc_${HOST}_patch=\"${patch}\""            >> $host_data_file
        echo "dc_${HOST}_hd_size=${size}"               >> $host_data_file
        echo "dc_${HOST}_machine_id=\"${serial}\""      >> $host_data_file
        echo "dc_${HOST}_desc=\"${desc}\""              >> $host_data_file
      else
        #
        # host not connected
        #
        host_data_file="/var/dc/hosts/$i"
        if [ ! -f $host_data_file ] ; then
          HOST="host"
          echo "dc_${HOST}_name=\"${i}\""               >> $host_data_file
          echo "dc_${HOST}_state=\"${state}\""          >> $host_data_file
          echo "dc_${HOST}_group=\"${group}\""          >> $host_data_file
          echo "dc_${HOST}_os=\"${os}\""                >> $host_data_file
          echo "dc_${HOST}_os_version=\"-\""            >> $host_data_file
          echo "dc_${HOST}_docker_version=\"-\""        >> $host_data_file
          echo "dc_${HOST}_mde_version=\"-\""           >> $host_data_file
          echo "dc_${HOST}_mde_monitor=\"-\""           >> $host_data_file
          echo "dc_${HOST}_patch=\"-\""                 >> $host_data_file
          echo "dc_${HOST}_hd_size=\"-\""               >> $host_data_file
          echo "dc_${HOST}_machine_id=\"-\""            >> $host_data_file
          echo "dc_${HOST}_desc=\"${desc}\""            >> $host_data_file
        fi  
      fi
      eval `cat $host_data_file`
      #
      # Farben fuer Ausgabe definieren
      #
      COL_DEFAULT='\e[m'
      COL_GREEN='\e[1;92m'
      COL_ORANGE='\033[0;33m'
      COL_GRAY='\033[1;30m'
      COL_RED='\e[1;91m'         
      if [ "$dc_host_state" = "up" ] ; then
        col_state=$COL_GREEN
        col_std=$COL_DEFAULT
        col_size=$COL_DEFAULT
        if [ $size -gt 80 ] ; then
           col_size=$COL_ORANGE
        fi
        if [ $size -gt 90 ] ; then
           col_size=$COL_RED
        fi
      else
        col_state=$COL_GRAY
        col_std=$COL_GRAY
        col_size=$COL_GRAY
      fi
      #
      # Ausgabe
      #
      if [ "$opt_format" = "" ] ; then
        MASK="${col_state}%10s${col_std}|%-3s|%-6s|%-8s|%-8s|%-8s|%1s|%-2s|${col_size}%-3s${col_std}|%-2s|%s${COL_DEFAULT}\n"
        printf "$MASK" "${dc_host_name}" "${dc_host_group}" "${dc_host_os}" "${dc_host_os_version}" "${dc_host_docker_version}" "${dc_host_mde_version}" "${dc_host_mde_monitor}" "${dc_host_patch}" "${dc_host_hd_size}" "${dc_host_machine_id}" "${dc_host_desc}"
      elif [ "$opt_format" = "eval" ] ; then
        cat $host_data_file
      fi
    done
    ;;
  ssh)     shift
           ssh ${HNAME} $*
           exit $?
           ;;
  up)      docker compose up -d ;;
  rm)      docker compose stop ; docker compose rm -f  ;;
  down)    docker compose down  ;;
  rmup)    docker compose stop ; docker compose rm -f ; docker compose up -d ;;
  info)    ssh $HNAME 'echo -e "\n" ; df -h ; echo -e "\n" ; free -m ; echo -e "\n" ; uptime ; echo -e "\n"' ;;
  check)   for i in "${!service_hosts[@]}"; do
             if [ "${service_hosts[${i}]}" != "$HOST" ] ; then continue ; fi 
             if [ "${service_state[${i}]}" != "active" ] ; then
               echo "${service_state[${i}]}"
               exit 0
             fi
             container_list=$(dc -c $CONF compose ps -q)
             if [ "$container_list" = "" ] ; then
               echo "error_no_containers"
               exit 1
             fi
             stat_list=$( echo "$container_list" | xargs dc -c $CONF docker inspect --format '{{.State.Status}}')
             for stat in $stat_list ; do
               if [ "$stat" != "running" ] ; then
                 echo "error_incomplete_containers"
                 exit 1
               fi
             done
             echo "Up"
             exit 0
           done
           ;; 
  pull)
    docker compose pull
    exit 0
    ;;
  push)
    echo " !!!<pull|push> is deprecated!!! Use <data pull|push> insted."
    exit 1
    ;;
  data)
    scmd=$2
    if [ "$scmd" = "mount" ] ; then
      mkdir -p ./data
      sshfs $HNAME:/Docker/Services/${service_name} ./data
      exit $?
    fi
    if [ "$scmd" = "umount" ] ; then
      umount ./data
      rmdir ./data
    fi
    type=${3%/}
    DRY=" --dry-run " ; if [ "$4" = "real" -o "$4" = "r" ] ; then DRY="" ; fi
    if   [ "$type" = "sp" ] ; then list="service persistent"
    elif [ "$type" = "s"  ] ; then list="service"
    elif [ "$type" = "p"  ] ; then list="persistent"
    else   list="$type" ; fi
    for TYPE in $list ; do
      LDIR=`dirname $CONF`/$TYPE
      if [ "$TYPE" != "persistent" -a "$TYPE" != "service" ] ; then
        echo "error neither persistent nor service given."
        exit 0
      fi
      if [ "$scmd" = "push" ] ; then
        ssh ${HNAME}  mkdir -p /Docker/Services/${service_name}
        rsync  ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
               ${LDIR}/ ${HNAME}:/Docker/Services/${service_name}/$TYPE
        echo "push $DRY folder FROM <${LDIR}> TO <$HNAME> (<${HNAME}:/Docker/Services/${service_name}/$TYPE>)"
      elif [ "$scmd" = "pull" ] ; then
        ssh ${HNAME} ls -d /Docker/Services/${service_name}/$TYPE >/dev/null 2>&1
        if [ "$?" = "0" ] ; then
          mkdir -p ${LDIR}
          rsync   ${DRY} -arvzS --numeric-ids --delete -e "ssh" \
                  ${HNAME}:/Docker/Services/${service_name}/$TYPE/ ${LDIR}
          echo "pull $DRY folder FROM <$HNAME> (<${HNAME}:/Docker/Services/${service_name}/$TYPE>) TO <./${TYPE}> done." 
        else
          if [ -d ./${TYPE} ] ; then
            echo "WARNING ./${TYPE} only exists locally!"  
            exit 1
          fi
        fi
      elif [ "$scmd" = "remove" ] ; then
         echo "TBD"
      fi
    done
    ;;
  ############
  supervisor) docker compose exec ${service_name} supervisorctl ;;
  syslog)     docker compose exec ${service_name} tail -n 200 /var/log/syslog ;;
  login)      shift
              if [ "$1" = "" ] ; then
                cmd="bash"
              else
                cmd=$*
              fi
	      docker compose exec  ${service_name} $cmd
              ;;
  cmd)      shift
            docker compose exec -T  ${service_name} $*
            ret=$?
            exit $ret
            ;;
  config|migrate)
              FI=$1
              shift
              docker compose  exec ${service_name} /usr/local/bin/${FI} $*
              ;;
  ovw)        if [ "$2" = "push" ] ; then
                docker compose  exec ${service_name} rsync -av /service/ovw/ /
                exit 0
              fi
              if [ "$2" = "fetch" ] ; then
                if [ "$3" = "" ] ; then
                  echo "parameter error: no dir/file given (see usage)"
                  exit 0
                fi
                echo "rsync -avR ${3} /service/ovw/"
                docker compose  exec ${service_name} rsync -avR ${3} /service/ovw/
                exit 0
              fi
              if [ "$2" = "fetch" ] ; then
                docker compose exec ${service_name} diff /service/ovw/${3} ${3}
                exit 0
              fi
              ;;
  #############
  docker)     shift ; docker $* ;;
  compose|docker-compose)    shift ; docker compose $*  ;;
  swarm)      echo "swarm command (have to be done)" ;;
  *)          if [ "$CONF" != "" ] ; then
                docker compose $* 
              fi
              ;;
esac
