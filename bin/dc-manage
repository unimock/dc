#!/bin/bash
. /etc/mde/dc/default

error_detect=0
with_image=0

_help()
{
  echo ""
  echo " usage: `basename $0` [--images] [ -c <yml-file>] <command>"
  echo ""
  echo "    commands:"
  echo ""
  echo "       sync .................. copy data and restart service"
  echo "       sync_group <group> .... copy data and restart services"
  echo "       copy .................. only copy data (persistent/service)"
  echo ""
  exit 0
}


copy_data()
{
  service=$1 ; s_host=$2 ; t_host=$3 

  dc-rdc   $s_host rdc exec ls /Docker/Data/$service/* >/dev/null 2>&1 
  if [ "$?" = "0" ] ; then
  dc-rdc   $s_host rdc sync /Docker/Data/$service      rdc-${t_host}:/Docker/Data/$service     real >/dev/null 2>&1
  fi
  dc-rdc   $s_host rdc sync /Docker/Services/$service  rdc-${t_host}:/Docker/Services/$service real 
  ret=$?
  echo -e "#\n# copy_data from $s_host to $t_host for $service (ret=$ret)\n#"
  if [ "$ret" != "0" ] ; then
    echo "error: copy_data from $s_host to $t_host for $service (ret=$ret)"
    error_detect=1
  fi
  return $ret
}

dc_command()
{
  yml=$1 ; cmd=$2 ; service=$3 ; host=$4  
  dc -c $yml -h $host $cmd
  ret=$?
  echo -e "#\n# $cmd $service at $host (ret=$ret)\n#"
  if [ "$ret" != "0" ] ; then
    echo "error: $cmd $service at $host (ret=$ret)"
    error_detect=1
  fi
  return $ret
}

#
# magic main
#

YML="./dc-service.yml"
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -c) YML="$2" ;                  shift 2 ;;
    --images) with_images=1;        shift 1 ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

CMD="$1"

if [ "$CMD" = "" ] ; then _help ; fi

if [ "$CMD" = "sync" -o "$CMD" = "copy" ] ; then
  yml_list=$YML

elif [ "$CMD" = "sync_group" ] ; then
  yml_list=$( dc-list -y services -g $2 )
fi

for yml in $yml_list ; do
  if [ ! -f $yml ] ; then
     error_detect=1
     echo "error: <$yml> missing."
     continue
  fi
  SERVICE=$(dc-yml -c $yml service_name)
  S_HOST=$( dc-yml -c $yml service_hosts[0])
  T_HOST=$( dc-yml -c $yml service_hosts[1])
  S_STATE=$(dc-yml -c $yml service_state[0])   # state of source service: active|standby
  T_STATE=$(dc-yml -c $yml service_state[1])   # state of target service: active|standby


  if [ "$T_HOST" = "" ] ; then
    echo "error: second host missing in <$yml>"
    exit 1
  fi

  if [ "$CMD" = "copy" ] ; then
    copy_data $SERVICE $S_HOST $T_HOST
  fi

  if [ "$CMD" = "sync" -o "$CMD" = "sync_group" ] ; then
    echo "########################################################"
    echo "#"
    echo "# sync <$SERVICE> from <$S_HOST> to <$T_HOST> ..."
    echo "#"
    echo "########################################################"
    if [ "$T_STATE" = "active" ] ; then
      dc_command $yml stop    $SERVICE $T_HOST  
    fi
    dc_command   $yml pause   $SERVICE $S_HOST
    copy_data                 $SERVICE $S_HOST $T_HOST
    dc_command   $yml unpause $SERVICE $S_HOST


    first=0
    list=$( dc -c $yml -h $S_HOST compose ps -q  )
    for C in $list ; do
      N=$( dc -c $yml -h $S_HOST docker inspect --format='{{.Config.Image}}' $C )
      [[ $N != *:* ]] && N=$N:latest
      S_ID=$( dc -c $yml -h $S_HOST docker image ls -q $N )
      T_ID=$( dc -c $yml -h $T_HOST docker image ls -q $N )
      if [ "$S_ID" != "$T_ID" ] ; then
        echo "##################"
        echo "# image to sync:"
        echo "#  Name=<$N>"
        echo "#  Source-ID=<$S_ID>"
        echo "#  Target-ID=<$T_ID>"
        if [ "$first" = "0" ] ; then
          first=1   #found first different image
        fi
        if [ "$with_images" = "1" ] ; then
          if [ "$first" = "1" ] ; then
            first=2   # different image with image syncing
            dc_command $yml rm      $SERVICE $T_HOST
          fi
          if [ "$T_ID" != "" ] ; then
            dc -c $yml -h $T_HOST docker image rm $N
          fi
          dc -c $yml -h $S_HOST docker save $N | pv | dc -c $yml -h $T_HOST docker load
        fi
      fi
    done

    if [ "$first" = "1" ] ; then
      echo "ERROR: found different images for <$SERVICE>. Use paramter --images to fix it."
      error_detect=1
    fi


    if [ "$T_STATE" = "active" ] ; then
      if [ "$first" = "2" ] ; then
        dc_command $yml up      $SERVICE $T_HOST
      else
        dc_command $yml start   $SERVICE $T_HOST
      fi
    fi
  fi

done

if [ "$error_detect" != "0" ] ; then
  echo "#result=ERROR"
else
  echo "#result=OK"
fi 
exit $error_detect

