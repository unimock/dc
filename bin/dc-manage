#!/bin/bash
. /opt/dc/etc/config
. /opt/dc/funcs/config-refresh

error_detect=0
with_images=1
SIDX="0" ; TIDX="1"
SHST=""  ; THST=""

_help()
{
  echo ""
  echo " usage: `basename $0` [--images] [-i <source>:<target>] [-h <source>:<target>] <command>"
  echo ""
  echo "    commands:"
  echo ""
  echo "       sync .................. copy data and restart service"
  echo "       sync_group <group> .... copy data and restart services []"
  echo "       copy .................. only copy data (persistent/service)"
  echo "       image_update .......... update an image (tbd)"
  echo "       backup <source> <target> <mask> ... swarm backup"
  echo "       backup h1:${MDE_DC_DOCKER_VOL}/Data h2:${MDE_DC_DOCKER_VOL}/Backup/xyz 0,7,14"
  exit 0
}


copy_data()
{
  service=$1 ; s_host=$2 ; t_host=$3 

  dc-rdc   $s_host rdc exec ls ${MDE_DC_DOCKER_VOL}/Data/$service/* >/dev/null 2>&1 
  if [ "$?" = "0" ] ; then
  dc-rdc   $s_host rdc sync ${MDE_DC_DOCKER_VOL}/Data/$service      rdc-${t_host}:${MDE_DC_DOCKER_VOL}/Data/$service     real >/dev/null 2>&1
  fi
  dc-rdc   $s_host rdc sync ${MDE_DC_DOCKER_VOL}/Services/$service  rdc-${t_host}:${MDE_DC_DOCKER_VOL}/Services/$service real 
  ret=$?
  echo -e "#\n# copy_data from $s_host to $t_host for $service (ret=$ret)\n#"
  if [ "$ret" != "0" ] ; then
    echo "error: copy_data from $s_host to $t_host for $service (ret=$ret)"
    error_detect=1
  fi
  return $ret
}

dc_command()
{
  yml=$1 ; cmd=$2 ; service=$3 ; host=$4  
  dc -c $yml -h $host $cmd
  ret=$?
  echo -e "#\n# $cmd $service at $host (ret=$ret)\n#"
  if [ "$ret" != "0" ] ; then
    echo "error: $cmd $service at $host (ret=$ret)"
    error_detect=1
  fi
  return $ret
}

#
# magic main
#

YML="`pwd`/${MDE_DC_YAML_FILE}"

CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -i) SIDX=${2%:*} ; TIDX=${2#*:} ; shift 2 ;;
    -h) SHST=${2%:*} ; THST=${2#*:} ; shift 2 ;;
    --images) with_images=1;          shift 1 ;;
    *)  CURROPT="$CURROPT \"$1\"" ;   shift 1 ;;
  esac
done
eval set -- $CURROPT

CMD="$1"

if [ "$CMD" = "" ] ; then _help ; fi

if [ "$CMD" = "backup" ] ; then
  SOURCE=$2
  TARGET=$3
  MASK=$4

  T_HOST=${TARGET%:*}
  T_DIR=${TARGET#*:}
  dc-rdc ${T_HOST} mbup $MASK rdc-${SOURCE} ${T_DIR}
  exit $?
fi

if [ "$CMD" = "sync" -o "$CMD" = "copy" ] ; then
  yml_list=$YML
elif [ "$CMD" = "sync_group" ] ; then
  yml_list=$( dc-list -y services -g $2 )
fi

for yml in $yml_list ; do
  if [ ! -f $yml ] ; then
     error_detect=1
     echo "error: <$yml> missing."
     continue
  fi
  SERVICE=$( dc-yq '(( .projects.* | select(.dc_yml == "'$yml'" ) | path ) [-1] )' ${MDE_DC_YAML} )

  service_hosts=( `dc-yq '.projects.'$SERVICE'.dc.home.[].host' ${MDE_DC_YAML} `)
  service_state=( `dc-yq '.projects.'$SERVICE'.dc.home.[].state' ${MDE_DC_YAML} `)
  if [ "${SHST}" != "" -a  "${THST}" != "" ] ; then
    for i in "${!service_hosts[@]}"; do
      if [[ "${service_hosts[$i]}" = "${SHST}" ]]; then SIDX="$i" ; fi
      if [[ "${service_hosts[$i]}" = "${THST}" ]]; then TIDX="$i" ; fi
    done
  fi
  S_HOST="${service_hosts[${SIDX}]}"
  T_HOST="${service_hosts[${TIDX}]}"
  S_STATE="${service_state[0]}"        # state of primary service: active|standby
  T_STATE="${service_state[1]}"        # state of secondary service: active|standby
  if [ "$T_HOST" = "" ] ; then
    echo "error: target host (second) in <$yml> missing."
    exit 1
  fi

  if [ "$CMD" = "copy" ] ; then
    copy_data $SERVICE $S_HOST $T_HOST
  fi

  if [ "$CMD" = "sync" -o "$CMD" = "sync_group" ] ; then
    echo "########################################################"
    echo "#"
    echo "# sync <$SERVICE> from <$S_HOST> to <$T_HOST> ..."
    echo "#"
    echo "########################################################"

    if [ "$S_STATE" != "active" ] ; then
      echo " $SERVICE not active. Skipping!"
      continue ;
    fi
    # check images
    image_mismatch=0
    images=$( dc -c $yml -h $S_HOST compose ps -q  )



    for C in $images ; do
      N=$( dc -c $yml -h $S_HOST docker inspect --format='{{.Config.Image}}' $C )
      [[ $N != *:* ]] && N=$N:latest
      S_ID=$( dc -c $yml -h $S_HOST docker image ls -q $N )
      T_ID=$( dc -c $yml -h $T_HOST docker image ls -q $N )
      if [ "$S_ID" != "$T_ID" ] ; then
        image_mismatch=1
        echo "detect image mismatch for service: <$SERVICE> !!!!!"
        break
      fi
    done
    if [ "$image_mismatch" = "1" -a "$with_images" = "0" ] ; then
      echo "#ERROR: found different images for <$SERVICE>."
      echo "#       Sync service with images manually with:"
      echo "#       dc-manage --images -c $yml sync"
      error_detect=1
      continue
    fi  
    if [ "$T_STATE" = "active" ] ; then
      dc_command $yml stop    $SERVICE $T_HOST  
    fi
    dc_command   $yml pause   $SERVICE $S_HOST
    copy_data                 $SERVICE $S_HOST $T_HOST
    dc_command   $yml unpause $SERVICE $S_HOST
    # copy remove taget containers
    # copy images
    # create target containers
    if [ "$image_mismatch" = "1" -a "$with_images" = "1" ] ; then
      dc_command $yml rm      $SERVICE $T_HOST
      images=$( dc -c $yml -h $S_HOST compose ps -q  )
      for C in $images ; do
        N=$( dc -c $yml -h $S_HOST docker inspect --format='{{.Config.Image}}' $C )
        [[ $N != *:* ]] && N=$N:latest
        S_ID=$( dc -c $yml -h $S_HOST docker image ls -q $N )
        T_ID=$( dc -c $yml -h $T_HOST docker image ls -q $N )
        if [ "$S_ID" != "$T_ID" ] ; then
          echo "##################"
          echo "# image to sync:"
          echo "#  Name=<$N>"
          echo "#  Source-ID=<$S_ID>"
          echo "#  Target-ID=<$T_ID>"
          if [ "$T_ID" != "" ] ; then
            dc -c $yml -h $T_HOST docker image rm $N
          fi
          if [ `which pv` != "" ] ; then # show progress if pv exists
            dc -c $yml -h $S_HOST docker save $N | pv | dc -c $yml -h $T_HOST docker load
          else
            dc -c $yml -h $S_HOST docker save $N | dc -c $yml -h $T_HOST docker load
          fi
        fi
      done
      if [ "$T_STATE" = "active" ] ; then
        dc_command $yml up     $SERVICE $T_HOST
      else
        echo "#ERROR: Service: <$SERVICE> is not acitivated on <$T_HOST>."
        echo "#       Please create the containers manually with:"
        echo "#       dc -s $SERVICE -h $T_HOST up"
        error_detect=1
      fi
    fi

    if [ "$T_STATE" = "active" ] ; then
      dc_command $yml start   $SERVICE $T_HOST
    fi
  fi

done

if [ "$error_detect" != "0" ] ; then
  echo "#result=ERROR"
else
  echo "#result=OK"
fi 
exit $error_detect

