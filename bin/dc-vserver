#!/bin/bash

. /opt/dc/funcs/global

VSERVER="hcloud kvm"

if [ "$1" = "" ] ; then
  echo ""
  echo "TBD"
  exit 0
fi
DC_HOST="$1"
shift

CMD="$1"
shift

###################################################################
# list 
###################################################################
if [ "$CMD" = "" -a "$DC_HOST" = "list" ] ; then
  for i in $VSERVER ; do
    dc-${VSERVER} $i server list
  done
  echo "TBD: show assignment node <-> vnode"
  exit 0
fi

node_dir=$( dc-yq '.nodes.'${DC_HOST}'.node_dir' ${MDE_DC_YAML} )
yaml=${node_dir}/vserver.yml

###################################################################
# create
###################################################################
if [ "$CMD" = "create" ] ; then
  if [ ! -f ${yaml} ] ; then
    echo "error: yaml config <${yaml}> missing!"
    exit 1
  fi
  vs_name=$( dc-yq '.nodes.'${DC_HOST}'.vserver.name' ${MDE_DC_YAML} )
  vs_type=$( dc-yq '.type' ${yaml} )
  echo "################################################################################"
  echo "# create vserver <$vs_name> based on definition in ${yaml}"
  echo "################################################################################"
  dc-${vs_type} server provide ${vs_name} ${yaml}
  IP=$( dc-${vs_type} server ip ${vs_name} )  
  echo "################################################################################"
  echo "# assign vserver fqdn <$IP> to node <${DC_HOST}> definition"
  echo "################################################################################"
  ssh-keygen -f "${HOME}/.ssh/known_nodes" -R ${IP} >/dev/null 2>&1
  ssh-keyscan -H ${IP} >> ${HOME}/.ssh/known_nodes
  rm -f $HOME/.dc/var/ssh/control/${DC_HOST}
  # place IP or hostname in node.yml definition and rebuild
  dc-yq -i '.node.fqdn = "'$IP'"'           $node_dir/node.yml
  dc-config refresh
  dc-node ${DC_HOST} state wait "sshd"
  if [ "${vs_type}" = "kvm" ] ; then
    echo "# check cloud-init state"
    ssh ${DC_HOST} cloud-init status --wait
    dc-${vs_type} server remiso ${vs_name}
  fi
  reboot_required=0
  docker_install=0
  inst_list=$( dc-yq '.dc-install.dc[]' ${yaml})
  for i in $inst_list ; do
    if [ "$i" = "dist-upgrade" ] ; then
      echo "# dc-install: <${i}> ..." 
      scp /opt/dc/helper/install/${i}  ${DC_HOST}:/tmp/dc-install
      ssh ${DC_HOST} /tmp/dc-install >/dev/null
      reboot_required=1
      break
    fi
  done
  for i in $inst_list ; do
    if [ "$i" = "dist-upgrade" ] ; then
      continue
    fi
    if [ "$i" = "docker" ] ; then
      docker_install=1
      continue
    fi
    echo "# dc-install: <${i}> ..." 
    scp /opt/dc/helper/install/${i}  ${DC_HOST}:/tmp/dc-install
    ssh ${DC_HOST} /tmp/dc-install >/dev/null
  done
  node_type=$( dc-yq '.nodes.'${DC_HOST}'.type' ${MDE_DC_YAML} )
  if [[ "$docker_install" == "1" || "$node_type" == "dock" || "$node_type" = "dc" ]] ; then
    # install docker if a dock or dc node is requested
    echo "# dc-install: <docker> ..." 
    scp /opt/dc/helper/install/docker ${DC_HOST}:/tmp/dc-install
    ssh ${DC_HOST} /tmp/dc-install >/dev/null
  fi
  if [ "$reboot_required" = "1" ] ; then
    dc-node ${DC_HOST} reboot wait $node_typ
  fi
  exit 0
fi

###################################################################
# install (geh√∂rt in dc-node)
###################################################################
if [ "$CMD" = "install" ] ; then
  echo "################################################################################"
  echo "# install docker, set timezone, dist-upgrade on node <$DC_HOST>"
  echo "################################################################################"
  if [ ! -f /opt/dc/helper/hcloud-ubuntu-22.04.sh ] ; then
    echo "error: missing installation script </opt/dc/helper/hcloud-ubuntu-22.04.sh>"
    exit 1
  fi
  scp /opt/dc/helper/hcloud-ubuntu-22.04.sh ${DC_HOST}:/tmp/dc-install
  ssh ${DC_HOST} /tmp/dc-install >/dev/null
  exit $?
fi


###################################################################
# assign
###################################################################
if [ "$CMD" = "assign" ] ; then
  vname=$1
  templ=$2
  echo "################################################################################"
  echo "# assing vserver <$vname> definitions from template <$templ> node <${DC_HOST}>"
  echo "################################################################################"
  vserver_yml=""
  if [ -f "${templ}" ] ; then
    vserver_yml="${templ}"
  else
    vserver_yml="/opt/dc/templates/create/vserver/${templ}.yml"
    if [ ! -f "$vserver_yml" ] ; then
      echo "error: template file <$vserver_yml> does not exist!"
      exit 1
    fi
  fi
  if [ ! -d ${MDE_DC_HOST_DIR}/${DC_HOST} ] ; then
    echo "error: node definition directory <${MDE_DC_HOST_DIR}/${DC_HOST}> does not exist!"
    exit 1
  fi
  cp "$vserver_yml"                                               ${yaml}
  pub_key=$( dc-yq '.nodes.'${DC_HOST}'.ssh_config.IdentityFile' )
  pub_key=${pub_key}.pub
  pub_key_name=$( cat ${pub_key} | awk '{ print $3 }')
  vserver_name=${vname%\@*}  # if remote kvm, then: test@kvm1 -> test
  sed -i "s|<vserver_name>|$vserver_name|g"                       ${yaml}
  sed -i "s|<ssh_pub_key>|`cat $pub_key`|g"                       ${yaml} 
  sed -i "s|<hostname>|$(dc-yq '.nodes.'${DC_HOST}'.fqdn')|g"     ${yaml}
  sed -i "s|<ssh_pub_key_name>|$pub_key_name|g"                   ${yaml}
  dc-yq -i '.node.vserver.name = "'${vname}'"' $node_dir/node.yml
  dc-config refresh
  exit 0
fi

###################################################################
# rebuild
###################################################################

if [ "$CMD" = "rebuild" ] ; then
  vs_name=$( dc-yq '.nodes.'${DC_HOST}'.vserver.name' ${MDE_DC_YAML} )
  vs_type=$( dc-yq '.type' ${yaml} )
  echo "################################################################################"
  echo "# rebuild vserver <$vs_name> of node <${DC_HOST}>"
  echo "################################################################################"
  img=$( dc-yq '.hcloud.image' ${yaml} )
  echo "dc-hcloud server rebuild ${vs_name} --image $img"
  dc-${vs_type} server rebuild ${vs_name} --image $img
  dc-node ${DC_HOST} state wait "sshd"
fi

###################################################################
# info
###################################################################
if [ "$CMD" = "info" ] ; then
  vs_name=$( dc-yq '.nodes.'${DC_HOST}'.vserver.name' ${MDE_DC_YAML} )
  vs_type=$( dc-yq '.type' ${yaml} )
  dc-${vs_type} server describe ${vs_name}
fi

###################################################################
# delete
###################################################################
if [ "$CMD" = "delete" ] ; then
  vs_name=$( dc-yq '.nodes.'${DC_HOST}'.vserver.name' ${MDE_DC_YAML} )
  vs_type=$( dc-yq '.type' ${yaml} )

  echo "################################################################################"
  echo "# delete vserver <$vs_name> of node <${DC_HOST}>"
  echo "################################################################################"
  # check if projects are defined for the node then error and exit
  project_list=$( dc-list projects -h ${DC_HOST}  )
  if [ "$project_list" != "" ] ; then
    echo "projects assigned to <${DC_HOST}>:"
    dc-list projects -h ${DC_HOST} | sed "s|^|  - |g"
    echo "error: unable to delete vserver <$vs_name>"
    exit 1
  fi
  dc-${vs_type} server delete $vs_name
  exit $?
fi



