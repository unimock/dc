#!/bin/bash

. /opt/dc/funcs/global

if [ "$1" = "" ] ; then
  echo ""
  echo "TBD"
  exit 0
fi

CMD="$1"
shift

dc_host="$1"
###################################################################
# reboot
###################################################################
if [ "$CMD" = "reboot" ] ; then
  ssh ${dc_host} "init 6"
  echo "#########################################"
  echo "# reboot host <${dc_host}> and wait until server is up"
  echo "#########################################"
  sleep 3
  while true ; do
    state=$( dc host -h ${dc_host} state )
    echo "wait for state==dock current-state=state=$state"
    if [ "$state" = "dock" -o "$state" = "dc" ] ; then
      break
    fi
    sleep 1
  done
  exit 0
fi

###################################################################
# install
###################################################################
if [ "$CMD" = "install" ] ; then
  echo "################################################################################"
  echo "# install docker, set timezone, dist-upgrade on host <$dc_host>"
  echo "################################################################################"
  image=$( dc-yq '.hosts.'${dc_host}'.vserver.hcoud.init.image'     ${MDE_DC_YAML} )
  if [ ! -f /opt/dc/helper/hcloud-${image}.sh ] ; then
    echo "error: missing installation script </opt/dc/helper/hcloud-${image}.sh>"
    exit 1
  fi
  scp /opt/dc/helper/hcloud-${image}.sh ${dc_host}:/tmp/dc-install
  ssh ${dc_host} /tmp/dc-install >/dev/null
  exit $?
fi

###################################################################
# list 
###################################################################
if [ "$CMD" = "list" ] ; then
  dc-hcloud server list
  echo "TBD: show assiggnment host <-> vhost"
  #dc-hcloud image list
  #dc-hcloud location list
  #dc-hcloud server-type list
  exit 0
fi

###################################################################
# assign
###################################################################
if [ "$CMD" = "assign" ] ; then
  shift
  echo "################################################################################"
  echo "# assing hcloud options to host <${dc_host}> definition"
  echo "################################################################################"
  if [ "$1" != "hcloud" ] ; then
    echo "error unsupported server provider <$1> given!"
    exit 1
  fi
  shift
  host_dir=$( dc-yq '.hosts.'${dc_host}'.host_dir' ${MDE_DC_YAML} )
  for i in $* ; do
    key=${i%=*}
    val=${i#*=}
    dc-yq -i '.host.vserver.hcoud.'$key' = "'${val}'"'   $host_dir/host.yml
  done
  dc config refresh
  dc-yq '.hosts.'${dc_host}'.vserver' ${MDE_DC_YAML}
  exit 0
fi

hname=$(dc-yq '.hosts.'${dc_host}'.vserver.hcoud.name' ${MDE_DC_YAML} )
if [ "$hname" = "" -o "$hname" = "null" ] ; then
  echo "error: missing hcloud server name in <.hosts.${1}.vserver.hcoud.name>"
  exit 1
fi

###################################################################
# create
###################################################################
if [ "$CMD" = "create" ] ; then
  echo "################################################################################"
  echo "# create vserver based on host definition in ${MDE_DC_YAML}"
  echo "################################################################################"
  host_dir=$( dc-yq '.hosts.'${dc_host}'.host_dir' ${MDE_DC_YAML} )
  typ=$( dc-yq '.hosts.'${dc_host}'.vserver.hcoud.init.type'     ${MDE_DC_YAML} )
  img=$( dc-yq '.hosts.'${dc_host}'.vserver.hcoud.init.image'    ${MDE_DC_YAML} )
  loc=$( dc-yq '.hosts.'${dc_host}'.vserver.hcoud.init.location' ${MDE_DC_YAML} )
  key=$( dc-yq '.hosts.'${dc_host}'.vserver.hcoud.init.ssh-key'  ${MDE_DC_YAML} )
  echo server create --name ${hname} --type $typ --image $img --location $loc --ssh-key $key
  dc-hcloud server create --name ${hname} --type $typ --image $img --location $loc --ssh-key $key
  IP=$(dc-hcloud server ip ${hname} )  
  echo "################################################################################"
  echo "# assign vserver HostName <$IP> to host <${dc_host}> definition"
  echo "################################################################################"
  ssh-keygen -f "/root/.ssh/known_hosts" -R ${IP} >/dev/null 2>&1
  ssh-keyscan -H ${IP} >> /root/.ssh/known_hosts
  rm -f /opt/dc/var/ss/control/${dc_host}
  # place IP or hostname in host.yml definition and rebuild
  dc-yq -i '.host.hostname = "'$IP'"'  $host_dir/host.yml
  dc config refresh
  #dc-yq '.hosts.'${dc_host} ${MDE_DC_YAML}
  dc-yq '.' $host_dir/host.yml
  echo "###########################################"
  echo "# wait until new sever is reachable via ssh"
  echo "###########################################"
  while true ; do
    state=$( dc host -h ${dc_host} state )
    echo "wait for state==sshd current-state=state=$state"
    if [ "$state" = "sshd" ] ; then
      break
    fi
    sleep 1
  done
  exit 0
fi

###################################################################
# info
###################################################################
if [ "$CMD" = "info" ] ; then
  dc-hcloud server describe ${hname}
fi

###################################################################
# delete
###################################################################
if [ "$CMD" = "delete" ] ; then
  echo "################################################################################"
  echo "# delete Hetzner cloud server <$hname>"
  echo "################################################################################"
  # check if projects are defined for the host then error and exit
  project_list=$( dc-list projects -h ${dc_host}  )
  if [ "$project_list" != "" ] ; then
    echo "projects assigned to <${dc_host}>:"
    dc-list projects -h ${dc_host} | sed "s|^|  - |g"
    echo "error: unable to delete server <$hname>"
    exit 1
  fi
  dc-hcloud server delete $hname
  exit $?
fi



