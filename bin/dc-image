#!/bin/bash
VERSION="0.2.1"

IAM=`basename $0`

show_help() {
  echo "# usage: $IAM list|update"
  echo ""
  echo "# examples:"
  echo ""
  echo "$IAM ls              # list used images and their states"
  echo ""
  echo "$IAM update <app>  koenkk/zigbee2mqtt:2.1.1"
  echo ""
} 

if [ "$1" = "" ] ; then
  show_help
  exit 0
fi

options=$(getopt -l "help,version" -o "hvp:" -a -- "$@")
eval set -- "$options"
while true ; do
  case "$1" in
  -h|--help)
    show_help
    exit 0
    ;;
  -v|--version)
    echo "$VERSION"
    exit 0
    ;;
  -p)
    shift
    xxxxx="$1"
    ;;
  --)
    shift
    break;;
  esac
  shift
done

if [ "$1" = "ls" ] ; then
  return_code=0
  url=$(   dc-yq '.config.cluster.image_list.url'   )
  if [ "$url" = "null" -o "$url" = "" ] ; then
    echo "error: image_list.url undefined in cluster.yml"
    exit 1
  fi
  groups=$(dc-yq '.config.cluster.image_list.groups.[]')
  FI=$(mktemp)
  wget -q -O $FI $url
  update_list=""
  for g in $groups ; do
    update_list="$update_list "$(dc-yq '.'$g'.[]' $FI)
  done
  #update_list=$(dc-yq '.'$g'.[]' $FI)
  rm $FI
  #
  # create information arrays
  #
  idx=0
  app_list=$(dc-yq '(.apps.* | path) [-1]' | sort | uniq )
  for app in $app_list ; do
    x=$(dc-yq '.apps.'$app'.dc.image_list.disabled')
    if [ "$x" = "true" ] ; then
      continue
    fi
    yaml_file=$(dc-yq '.apps.'$app'.compose_yml')
    #echo "$yaml_file"
    image_list=$(dc-yq '.services.*.image' $yaml_file  | sort | uniq)
    for image in $image_list ; do
      #echo "  $image"
      apps[$idx]="$app"
      img_name[$idx]=${image%:*}
      img_ver[$idx]=${image#*:}
      state[$idx]=" "
      for u in $update_list ; do
        u_name=${u%:*}
        u_ver[$idx]=${u#*:}
        if [ "${u_name}" = "${img_name[$idx]}" ] ; then
          if [ "${u_ver[$idx]}" = "${img_ver[$idx]}" ] ; then
            state[$idx]="o"
          else
            state[$idx]="!"
          fi
          break
        fi
      done
      dname[$idx]=$(dirname $yaml_file )
      let idx=$idx+1
    done
  done
  #
  # print informations
  #
  MASK="|%-1s|%-16s|%-30s|%-20s|%-20s|\n"
  printf "$MASK" "  " "app             " "image                         " "current version     " "new version         "
  printf "$MASK" "--" "----------------" "------------------------------" "--------------------" "--------------------"
  found="0"
  for (( idx=0; idx < ${#state[@]}; idx++ )) ; do
    dstate="☐ "
    new_version="                    " 
    if [ "${state[$idx]}" = "o" ] ; then
      dstate="✅"
    elif  [ "${state[$idx]}" = "!" ] ; then
      dstate="💡"
      new_version=${u_ver[$idx]}
      return_code=1
    fi	  
    if [ "${state[$idx]}" = "!" ] ; then
      found="1"
    fi
    printf "$MASK" "${dstate}" "${apps[$idx]}" "${img_name[$idx]}" "${img_ver[$idx]}" "${new_version}"
  done
  if [ "${found}" = "1" ] ; then
    #
    # print update commands
    #
    printf "\n\n"
    for (( idx=0; idx < ${#state[@]}; idx++ )) ; do
      if [ "${state[$idx]}" = "!" ] ; then
        printf "%s update %-16s %s:%s\n" "$IAM" "${apps[$idx]}" "${img_name[$idx]}" "${u_ver[$idx]}"
      fi
    done
    printf "\n\n"
  fi
  exit $return_code
fi

if [ "${1}" = "update" ] ; then
  app="$2"
  image="$3"

  yaml_file=$(dc-yq '.apps.'$app'.compose_yml')
  app_dir=$(dc-yq '.apps.'$app'.app_dir')

  ( cd ${app_dir} ; dc docker pull ${image} )
  name=${image%:*}
  version=${image#*:}
  services=$(dc-yq '(.services.* | path )[-1]' $yaml_file )
  for s in $services ; do
    current_image=$( dc-yq '.services.'$s'.image' $yaml_file )
    if [[ $current_image == "${name}:"* ]] ; then
       dc-yq -i '.services.'$s'.image = "'${image}'"' $yaml_file 
    fi
  done
  ( cd ${app_dir} ; dc rmup )
fi

exit 0
