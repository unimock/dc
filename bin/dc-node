#!/bin/bash

. /opt/dc/funcs/global

_ask()
{
  text="$1"
  echo "##################################################################"
  echo "#"
  echo "# ${text}. Type ENTER to start."
  echo "#"
  read ans
  return
}
opt_app=""
opt_type=""
on_node=""
verbose=""
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -t) opt_type="$2"             ; shift 2 ;;
    -a) opt_app="$2"          ; shift 2 ;;
    -v) shift ; verbose="1" ;;
    *)  CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT


if [ "$1" = "" ] ; then
  echo ""
  echo " usage: `basename $0` <node>|-t <type> <command>  # manage nodes and/or apps on nodes"
  echo "      type: all dc"
  echo " node commands:"
  echo "    state               # state of a node. returns: ||ping|sshd|dock|off|dc|"
  echo "                        #   dc ....  dc memeber,  if state=dock and node.type==dc"
  echo "                        #   dock ... docker running"
  echo "                        #   sshd ... reachable via sshd"
  echo "                        #   ping ... pingable"
  echo "                        #   off .... not pingable and node.state==standby"
  echo "    ip                  # show fqdn of node"
  echo "    ports               # show ports"
  echo "    upgrade             # do dist-upgrade"
  echo "    update              # update docker-ce"
  echo "    nrc [-a <app>]  # number of all running containers or app container on node"
  echo "    reboot              # reboot node"
  echo "    large_files <size>  # find lage files, size=xG"
  echo "    dir_entries <count> # find directories with more then count entries"
  echo "    cmd <command>       # run commands on $H"
  echo "    image [config] [-v] ...      # list,backup,restore node images"
  echo "    prune               # do volume pruen and system prune interactive"
  echo ""
  echo " service commands"
  echo ""
  echo "    list                # list apps on $H"
  echo "    check               # check apps on $H"
  echo "    check details       # check apps on $H and show details"
  echo "    stop|start          # start or stop all apps on $H"
  echo "    rm|up|rmup          # start or stop all apps on $H"
  echo "    ps                  # show app containers on $H"
  echo "    pull                # pull app container images on $H"
  echo ""
  exit 0
fi

if [ "$opt_type" = "" ] ; then
  hlist="$1"
  shift
else
  hlist=$( dc-list nodes $opt_type )
fi
CMD=$1
shift

if [ "$CMD" = "config"  ] ; then
  cmd=$1
  shift
  dc-config $cmd node ${hlist} $@
  exit $?
fi
if [ "$CMD" = "vserver" ] ; then
  dc-vserver ${hlist} $@
  exit $?
fi

#################################################################
# dc-node <node> state wait dc,dock
#################################################################
if [ "$CMD" = "state" -a "$1" = "wait" ] ; then
  wait_state="$2"
  printf "# wait for node-state=<${2}> "
  reached=0
  while true ; do
    state=$( dc-node ${hlist} state )
    if [ "$state" = "" ] ; then
      printf "."
    elif [ "$state" = "ping" ] ; then
      printf "p"
      if [ "$wait_state" = "ping" ] ; then
        reached=1 ;
      fi
    elif [ "$state" = "sshd" ] ; then
      printf "s"
      if [ "$wait_state" = "ping" -o  "$wait_state" = "sshd" ] ; then
        reached=1 ;
      fi
    elif [ "$state" = "dock" ] ; then
      printf "d"
      if [ "$wait_state" = "ping" -o  "$wait_state" = "sshd"  -o  "$wait_state" = "dock" ] ; then
        reached=1 ;
      fi
    elif [ "$state" = "dc" ]   ; then
      printf "D"
      reached=1 ;
    fi
    if [ "$reached" = "1" ] ; then
      printf "\n# node reached state: $state\n"
      break
    fi
    sleep 1
  done
  exit 0
fi

if [ "$CMD" = "ip" ] ; then
  ret=0
  for HOST in $hlist ; do
    ip=$(dc-yq '.nodes.'$HOST'.fqdn' ${MDE_DC_YAML})
    if [ "$ip" != "" -a "$ip" != "null" ] ; then
      echo "$ip"
    else
      echo "error get ip/fqdn for node <$HOST> from ${MDE_DC_YAML}"
      ret=1
    fi
  done
  exit $ret
fi 
  
if [ "$CMD" = "state" ] ; then
  for HOST in $hlist ; do
    state=""
    hname=$( dc-yq '.nodes.'$HOST'.fqdn' ${MDE_DC_YAML} ) 
    ping -W 0.5 -c 1 ${hname} >/dev/null 2>&1
    if [ "$?" = "0" ] ; then
      state="ping"
      ssh -o BatchMode=yes -o ConnectTimeout=1 $HOST true >/dev/null 2>&1
      if [ "$?" = "0" ] ; then
        state="sshd"
        ssh -o BatchMode=yes -o ConnectTimeout=1 $HOST pidof dockerd >/dev/null 2>&1
        if [ "$?" = "0" ] ; then
          state="dock"
          if [ `dc-yq '.nodes.'$HOST'.type' ${MDE_DC_YAML}` = "dc" ] ; then
            state="dc"
          fi
        fi
      fi
    fi
    if [ "$state" = "" ] ; then
      # check if node is off state==standby
      if [ `dc-yq '.nodes.'$HOST'.state' ${MDE_DC_YAML}` = "standby" ] ; then
        state="off"
      fi
    fi	    
    echo "$state"
  done
  exit 0
fi

dc mounts umount

for HOST in $hlist ; do
  if [ "$CMD" = "cmd" ] ; then
    if [ "$H" = "--all" ] ; then
      echo "#"    
      echo "# ssh ${HOST} $*"
      echo "#"
    fi  
    ssh ${HOST} $*
  fi    
  if [ "$CMD" = "large_files" -o   "$CMD" = "dir_entries"  ] ; then
    if [ "$CMD" = "large_files" ] ; then
    FI=/tmp/.dc-remote-cmd.lf
cat <<EOF > $FI
find ${MDE_DC_VOL} /var /xxx /tmp /home /mnt/backup-volume -type f -size +${1} -exec ls -lh {} + 2>/dev/null | awk '{ print "${HOST} " \$5 " " \$9 }'
EOF
    else
    FI=/tmp/.dc-remote-cmd.de
cat <<EOF > $FI
find ${MDE_DC_VOL} /mnt/backup-volume -type d -exec bash -c "echo -ne '{} '; ls '{}' | wc -l" \; | awk '\$NF>=${1}'
EOF
    fi
    scp -q $FI ${HOST}:$FI
    ssh ${HOST} bash $FI
    ssh ${HOST} rm   $FI
    rm -f $FI
    #ssh ${HOST} "find ${MDE_DC_VOL} /var /xxx /tmp /home -type f -size +${1} -exec ls -lh {} + 2>/dev/null" | awk '{ print "'"${HOST} "'" $5 " " $9}'
  fi
  if [ "$CMD" = "prune" ] ; then
    ssh   ${HOST} df -h / | grep -v "^Filesystem"
    ssh   ${HOST} apt-get autoremove
    dc -n  ${HOST} docker volume prune
    ssh   ${HOST} df -h / | grep -v "^Filesystem"
    dc -n  ${HOST} docker system prune -a
    ssh   ${HOST} df -h / | grep -v "^Filesystem"
    ssh   ${HOST} 'truncate -s 0 /var/lib/docker/containers/*/*-json.log'
    ssh   ${HOST} df -h / | grep -v "^Filesystem"
  fi
  if [ "$CMD" = "nrc" ] ; then
    if [ "$opt_app" != "" ] ; then
      dc -a $opt_app -n $HOST compose ps --services --filter "status=running" | sed '/^\s*$/d'  | wc -l
    else
      ssh $HOST docker ps -q | wc -l
    fi
  fi
  if [ "$CMD" = "update" ] ; then
    BCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    ssh $HOST apt-get update
    ssh $HOST apt-get -y install docker-ce
    sleep 3
    NCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
  fi
  if [ "$CMD" = "upgrade" ] ; then
    BCOUNT=$( dc-node $HOST nrc )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    dc-node $HOST check
    #_ask "Start autoremove?"
    ssh $HOST apt-get -y autoremove
    #_ask "Start apt-get update?"
    ssh $HOST apt-get update
    #_ask "Start dist-uprade?"
    ssh $HOST apt-get -y dist-upgrade
    #_ask "Check, if all containers are started!"
    #_ask "Show running containers!"
    #_ask "reboot?"
    dc-node $HOST reboot wait dock
    NCOUNT=$( dc-node $HOST nrc )
    dc-node $HOST check
    echo "#"
    echo "# Active containers on <$HOST> before=$BCOUNT now=$NCOUNT "
    echo "#"
  fi
  if [ "$CMD" = "check" ] ; then
    BCOUNT=$( ssh $HOST docker ps -q | wc -l )
    echo "#"
    echo "# Active containers on <$HOST> = $BCOUNT"
    echo "#"
    if [ "$1" = "details" ] ; then
      dc-inspect -n $HOST runtime
    else
      dc-inspect -n $HOST runtime | grep -e " state:" -e "^  [^ ]"
    fi
  fi

  if [ "$CMD" = "list" ] ; then
    dc-list apps -n $HOST
  fi
  if [ "$CMD" = "ports" ] ; then
    echo "dc-ssh=$(dc-yq '.nodes.'$HOST'.port')"
    list=$( dc-list apps -n $HOST  )
    for i in $list ; do
      ports=$(  dc-yq '.apps.'$i'.compose.services.*.ports[].published' | tr '\n' ' ' )
      if [ "$ports" != "" ] ; then
        echo "app.$i=$ports"
      fi
    done
  fi 
  ####################################################################################################################
  if [ "$CMD" = "pull" -o "$CMD" = "rmup" -o "$CMD" = "rm" -o "$CMD" = "up" -o "$CMD" = "ps" -o "$CMD" = "stop" -o "$CMD" = "start" ] ; then
    list=$( dc-list apps -n $HOST --sort run_level --state active )    # 4 5 6
    rlist=$(echo "$list" | tr ' ' '\n' | tac)          # 6 5 4
    if [ "$CMD" = "rmup" -o "$CMD" = "up" -o "$CMD" = "ps" -o "$CMD" = "start" ] ; then
      for i in $list ; do
        dc -n $HOST -a $i $CMD
      done
    else
      for i in $rlist ; do
        dc -n $HOST -a $i $CMD
      done
    fi
  fi

  ####################################################################################################################
  if [ "$CMD" = "reboot"   ] ; then
    ssh $HOST "init 6"
    if [ "$1" != "" ] ; then
      sleep 3
      #                   wait <state>
      dc-node $HOST state $@
    fi
  fi
done

####################################################################################################################
if [ "$CMD" = "image"   ] ; then
    COL_DEFAULT='\e[m'
    COL_GREEN='\e[1;92m'
    COL_RED='\e[1;91m'

    cmd="$1"
    if [ "$cmd" = "" ] ; then
      echo ""
      echo "usage: `basename $0` [-n <node>] [-v] list [config]|backup|restore"
      echo ""
      echo "`basename $0`  list        # print-format: <image> -> <remote-image-name>"
      echo "`basename $0`  list config # print-format: <image>;<directory>;<node>"
      echo ""
      exit 0
    fi
    #
    # read config data
    #
    cluster_name=$( dc-yq '.config.cluster.name'  )
    cluster_backup_image_url=$( dc-yq '.config.cluster.backup.image_url'  )
    if [ "$cluster_name" = "" -o "$cluster_backup_image_url" = "" ] ; then
      echo "cluster_name and/or cluster_backup_image_url not set in config/cluster.yml !!!"
      exit 1
    fi

    url="$cluster_backup_image_url"
    cluster="$cluster_name"
    echo ""
    for node in $hlist ; do
      # skip node if state == off
      STATE=$(dc node $node state)
      if [ "$STATE" = "off" ] ; then
        echo "###########################################################################"
        echo "# skip image backup for $node because node is <$STATE>"
        echo "###########################################################################"
        continue
      fi
      if [ "$cmd" = "restore" -a "$opt_type" = "" ] ; then
        echo "restoring images only allowd for single haosts. use dc node <name> restore"
        exit 1
      fi
      echo "###########################################################################"
      echo "# $node image name ->  backup image name"
      echo "###########################################################################"
      if [ "$cmd" = "backup" ] ; then
        echo "connecting to image backup repository <$url> ..."   
        ping -c3 -W5  ${url%:*} >/dev/null
        if [ "$?" != "0" ] ; then
          echo "error connexting to $url !!!"
          exit 1
        fi
      fi
      error_ret=0
      image_list=$( dc-yq  '( .apps.* | select(.dc.home.[].node == "'$node'" ) .compose.services.*.image )' ${MDE_DC_YAML} | sort | uniq)
      for i in $image_list ; do
        image="$i"
        if [[ $image == *"/"* ]] ; then
          rep="${image%/*}"
          nam="${image#*/}"
        else
          rep=""
          nam="$image"
        fi
        target="${url}/${cluster}_${node}_${rep}_${nam}"
        target=${target%:}
        if [ "$2" = "config" ] ; then
          echo "$image;$DIR;${node}"
        else
          echo "############################################################"
          echo "# image=<${image}> from node=<${node}> to target=<${target}>"
        fi
        if [ "$cmd" = "backup" ] ; then
          printf "${COL_GREEN}%s${COL_DEFAULT}\n" "dc -n ${node} docker tag ${image} ${target}"
          dc -n  ${node} docker tag ${image} ${target}
          if [ "$?" != "0" ] ; then echo "docker tag error!!!" ; exit 1 ; fi
          printf "${COL_GREEN}%s${COL_DEFAULT}\n" "dc -n ${node} docker push ${target}" 
          if [ "$verbose" = "1" ] ; then
            dc -n  ${node} docker push          ${target}
          else
            dc -n  ${node} docker push          ${target} >/dev/null
          fi
          ret=$?
          if [ "$ret" != "0" ] ; then
            printf "${COL_RED}%s${COL_DEFAULT}\n" "error: ret=$ret docker push image=${image} from node=${node} to target=${target}"
            error_ret=1
          #  exit 1
          fi
          printf "${COL_GREEN}%s${COL_DEFAULT}\n" "dc -n ${node} docker image rm -f ${target}"
          dc -n  ${node} docker image rm -f     ${target}
          if [ "$?" != "0" ] ; then echo "docker push error!!!" ; exit 1 ; fi
        fi
        if [ "$cmd" = "restore" ] ; then
          dc -n  ${node} docker pull     ${target}
          dc -n  ${node} docker tag      ${target}  ${image}
          dc -n  ${node} docker image rm ${target}
        fi
      done
    done
    exit $error_ret
  fi
exit 0
