#!/bin/bash

. /opt/dc/funcs/global

call_from="$(ps -o comm= $PPID)"
if [ "$call_from" == "dc" ] ; then
  IAM="dc config"
else
  IAM="dc-config"
fi

VARDIR="$HOME/.dc/var/cache"

############################################################################################################################################
_config_refresh()
{
  app_dir="$VARDIR/apps"
  nodes_dir="$VARDIR/nodes"
  config_dir="$VARDIR/config"

  config_change="0"
  mkdir -p $app_dir
  #
  # remove apps from cache, which do not exits in ${MDE_DC_APP_DIR} anymore
  #
  list=$( find $app_dir -name "modified.*" )
  for i in $list ; do
    relPath=${i%/modified.*}
    relPath=${relPath#${app_dir}/}
    if [ -f ${MDE_DC_APP_DIR}/${relPath}/${MDE_DC_YAML_FILE} ] ; then
      continue
    else
      echo "remove $app_dir/${relPath}"
      rm -rf $app_dir/${relPath}
      config_change="1"
    fi
  done
  #
  # check for changed config configurations
  #
  last=$( find ${MDE_DC_CONFIG_DIR} -maxdepth 1 -name "*.yml" -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
  stamp=${last% *}
  if [ ! -f ${config_dir}/modified.${stamp} ] ; then
    rm -rf ${config_dir}
    mkdir ${config_dir}
    echo "$last" | awk '{ print $2 }' > ${config_dir}/modified.${stamp}
    list=$( find ${MDE_DC_CONFIG_DIR} -maxdepth 1  -name "*.yml" )
    # append config definition to cached node file
    echo "config:"                                                                               > ${config_dir}/config.yml
    for yaml in $list ; do
      grep -o '^[^#]*' $yaml | sed "s|^|  |g"                          >> ${config_dir}/config.yml
    done
    config_change="1"
  fi

  #
  # check for changed nodes configurations
  #
  last=$( find ${MDE_DC_HOST_DIR} -maxdepth 2 -name "node.yml" -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
  stamp=${last% *}
  if [ "$stamp" != "" -a  ! -f ${nodes_dir}/modified.${stamp} ] ; then
    rm -rf ${nodes_dir}
    mkdir ${nodes_dir}
    echo "$last" | awk '{ print $2 }' > ${nodes_dir}/modified.${stamp}
    list=$( find ${MDE_DC_HOST_DIR}  -name "node.yml" )
    # append nodes definition to cached node file
    echo "nodes:"                                                                               > ${nodes_dir}/nodes.yml
    rm -rf   $HOME/.dc/var/ssh/config
    mkdir -p $HOME/.dc/var/ssh/config
    mkdir -p $HOME/.dc/var/ssh/control
    for hyaml in $list ; do
      name=${hyaml#${MDE_DC_HOST_DIR}/}
      name=${name%/node.yml}
      echo "  $name:"                                                                           >> ${nodes_dir}/nodes.yml
      echo "    node_dir: ${MDE_DC_HOST_DIR}/$name"                                             >> ${nodes_dir}/nodes.yml
      sed "s|^node:||g" $hyaml | sed "s|^|  |g" | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d'    >> ${nodes_dir}/nodes.yml
      #
      # create ssh config file for this node
      #
      type=$( dc-yq '.node.type'  $hyaml)
      if [ "$type" = "sshd" -o "$type" = "dc" -o "$type" = "dock"  ] ; then
        dc-yq -i '.nodes.'$name'.ssh_config.ControlPath = "'$HOME'/.dc/var/ssh/control/'$name'"' ${nodes_dir}/nodes.yml
        # replace variables off IdentityFile
        IdentityFile=$( dc-yq '.nodes.'$name'.ssh_config.IdentityFile'                              ${nodes_dir}/nodes.yml | envsubst)
        dc-yq -i '.nodes.'$name'.ssh_config.IdentityFile = "'$IdentityFile'"'                      ${nodes_dir}/nodes.yml
        echo "Host $name"                                                                  > $HOME/.dc/var/ssh/config/$name
        echo "    HostName $(dc-yq '.node.fqdn'  $hyaml)"                                 >> $HOME/.dc/var/ssh/config/$name
        echo "    Port $(dc-yq '.node.port'      $hyaml)"                                 >> $HOME/.dc/var/ssh/config/$name
        echo "    ControlPath $HOME/.dc/var/ssh/control/%n"                               >> $HOME/.dc/var/ssh/config/$name
        dc-yq '.node.ssh_config' $hyaml | sed -e 's|: | |g' -e 's|^|    |g'               >> $HOME/.dc/var/ssh/config/$name
      fi
    done
    config_change="1"
  fi
  #
  # check for changed app configurations
  #
  list=$( find ${MDE_DC_APP_DIR} -name ${MDE_DC_YAML_FILE} )
  for i in $list ; do
    relPath=${i%/${MDE_DC_YAML_FILE}}
    relPath=${relPath#${MDE_DC_APP_DIR}/}
    VAR="${app_dir}/${i#${MDE_DC_APP_DIR}/}"
    DIR="${i%/${MDE_DC_YAML_FILE}}"
    last=$( find ${MDE_DC_APP_DIR}/${relPath}  -maxdepth 1 -type f -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
    stamp=${last% *}
    #echo "$last"
    if [ -f ${app_dir}/${relPath}/modified.${stamp} ] ; then
      continue
    else
      rm -rf ${app_dir}/${relPath}
      mkdir -p ${app_dir}/${relPath}
      echo "$last" | awk '{ print $2 }' > ${app_dir}/${relPath}/modified.${stamp}
      compose_yml=$(dc-yq '.app.control.file' $i)
      overwrite_file="${DIR}/"${MDE_DC_YAML_FILE%.yml}".overwrite.yml"
      if [ -f ${overwrite_file} ] ; then
        echo "rebuild dc app for $i with overwrite file"
        dc-yq '. *= load("'${overwrite_file}'")' $i > ${app_dir}/${relPath}/${MDE_DC_YAML_FILE}
      else
        echo "rebuild dc app for $i"
        cp $i                                                ${app_dir}/${relPath}/
      fi
      ( cd ${MDE_DC_APP_DIR}/${relPath}/  && docker compose config > ${app_dir}/${relPath}/compose.yml )
      # overrule app name, if node is mailcowdockerized
      app_name=$(dc-yq '.app.overrule_compose_name'  $i)
      if [ "$app_name" != "null" -a "$app_name" != "" ] ; then
        dc-yq -i '.name = "'$app_name'"' ${app_dir}/${relPath}/compose.yml
      fi
      config_change="1"
    fi
  done

  if [ "$config_change" = "1" ] ; then
    mkdir -p `dirname ${MDE_DC_YAML}`
    echo "re-create: ${MDE_DC_YAML}"
    cp $config_dir/config.yml                                                        ${MDE_DC_YAML}
    if [ -f $nodes_dir/nodes.yml ] ; then
      cat $nodes_dir/nodes.yml                                                    >> ${MDE_DC_YAML}
    fi
    #
    # apps
    #
    echo "apps:"                                                              >> ${MDE_DC_YAML}
    list=$( find $app_dir -name "modified.*" )
    for i in $list ; do
      relPath=${i%/modified.*}
      relPath=${relPath#${app_dir}/}
      compose_yml=$(dc-yq '.app.control.file' $app_dir/${relPath}/${MDE_DC_YAML_FILE})
      compose_app=$(dc-yq '.name' $app_dir/${relPath}/compose.yml)
      echo "  ${compose_app}:"                                                     >> ${MDE_DC_YAML}
      echo "    app_dir: ${MDE_DC_APP_DIR}/${relPath}"                             >> ${MDE_DC_YAML}
      echo "    dc_yml: ${MDE_DC_APP_DIR}/${relPath}/${MDE_DC_YAML_FILE}"          >> ${MDE_DC_YAML}
      echo "    compose_yml: ${MDE_DC_APP_DIR}/${relPath}/${compose_yml}"          >> ${MDE_DC_YAML}
      #                                         remove comments  remove empty lines        remove version       rename service key to dc    indent
      cat $app_dir/${relPath}/${MDE_DC_YAML_FILE} | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d' |sed -e "/^version:/d" -e "s/^app:/dc:/g" -e "s/^/    /g" >> ${MDE_DC_YAML}
      echo "    compose:"                                                         >> ${MDE_DC_YAML}
      cat $app_dir/${relPath}/compose.yml | sed -e "s/^/      /g"                 >> ${MDE_DC_YAML}
    done
  fi
}

############################################################################################################################################
# magic main
############################################################################################################################################
if [ "$1" = "" ] ; then
  echo ""
  echo "usage: $IAM ..."
  echo ""
  echo "# common config commands:"
  echo ""
  echo "$IAM show         # show dc configuration"
  echo "$IAM refresh      # refresh dc config environment (${MDE_DC_YAML})"
  echo "$IAM rebuild      # rebuild dc config environment (${MDE_DC_YAML})"
  echo ""
  echo "# create/delete a sample app:"
  echo "" 
  echo "#$IAM create app <name>       <node> <main_service> <app_dir>"
  echo "$IAM  create app test-app apps0  hello-world ${MDE_DC_APP_DIR}/test-app"
  echo "$IAM  delete app test-app"
  echo ""
  echo "# create/delete a node definition"
  echo ""
  echo "#$IAM create node    <node>     [<hostname_or_ip] [type]"
  echo "$IAM  create node    test-node  localhost         ping|sshd|dock|dc # default=dc"
  echo "$IAM  delete node    test-node"
  echo ""
  exit 0
fi

CMD="$1"
shift

######################################################################################################################
if [ "$CMD" = "rebuild" ] ; then
  rm -rf $VARDIR
  _config_refresh
  exit $?
fi

######################################################################################################################
if [ "$CMD" = "refresh" ] ; then
   _config_refresh
  exit $?
fi

######################################################################################################################
if [ "$CMD" = "create" -o "$CMD" = "delete" ] ; then
  TYP="$1"
  shift
  #######################
  # app
  #######################
  if [ "$TYP" = "app" ] ; then
    app_name="$1"    # must be unique
    app_dir=$( dc-yq '.apps.'$app_name'.app_dir'  ${MDE_DC_YAML} )
    if [ "$CMD" = "delete" ] ; then
      echo "################################################################################"
      echo "# delete app <$app_name> definition"
      echo "################################################################################"
      if [ "$app_dir" = "null" ] ; then
        echo "error: app <$app_name> did not exist!"
        exit 1
      fi
      app_nodes=$( dc-yq '.apps.'$app_name'.dc.home.[].node' ${MDE_DC_YAML} )
      for i in $app_nodes ; do
        nrc=$(dc-node $i -a $app_name nrc)
        found=0
        if [ "$nrc" != "0" ] ; then
          echo " $nrc containers still running on <$i> for this app"
          found=1
        fi
      done
      if [ "$found" = "1" ] ; then
        echo "error: do: dc -a ..."
        exit 1
      fi
      echo "TBD: check volumes of app on target node"
      rm -rvf $app_dir
      exit 0
    elif [ "$CMD" = "create" ] ; then
      echo "################################################################################"
      echo "# create app <$app_name>"
      echo "################################################################################"
      node="$2"
      if [ "$(dc-yq '.nodes.'$node'.state' ${MDE_DC_YAML})" = "null" ] ; then
        echo "error: node <$node> did not exist!"
        exit 1
      fi
      if [ "$app_dir" != "null" ] ;then
        echo "error: app <$app_name> already exists!"     
        exit 1
      fi
      main_service="$3"    # keep it simple, like: git,...
      conf_dir="$4"
      traefik_net="traefik_default"
      #image="crccheck/hello-world"
      image="unimock/hello-world-docker"
      if [ -d ${conf_dir} ] ; then
        echo "error: ${conf_dir} exists!"
        exit 1
      fi
      mkdir -p ${conf_dir}
      echo "${conf_dir} created"
      cp -r /opt/dc/templates/create/app/.   ${conf_dir}/
      flist=$( find  ${conf_dir} -type f)
      for i in $flist ; do
        sed -i "s|<app_name>|${app_name}|g"   $i
        sed -i "s|<main_service>|${main_service}|g"   $i
        sed -i "s|<node>|${node}|g"                   $i
        sed -i "s|<image>|${image}|g"                 $i
        sed -i "s|<traefik_net>|${traefik_net}|g"     $i
        echo "$i"
      done
      cd ${conf_dir}
    fi
    _config_refresh
  fi
  #######################
  # node
  #######################
  if [ "$TYP" = "node" ] ; then
    name="$1"
    if [ "$name" = "" ] ; then
      echo "error: invalid node name <$name> given!"
      exit 1
    fi
    node_dir=$( dc-yq '.nodes.'$name'.node_dir' ${MDE_DC_YAML} )
    if [ "$CMD" = "delete" ] ; then
      echo "################################################################################"
      echo "# delete node <$name> definition"
      echo "################################################################################"
      if [ "$node_dir" = "null" ] ; then
         echo "error: node <$name> did not exist!"
         exit 1
      fi
      if [ "$( dc-list apps -n $name)" != "" ] ; then
        echo "error: the following apps still defined for node <$name> :"
        dc-list apps -n $name | sed "s|^| - |g" 
        exit 1
      fi
      echo "TBD in $0 : do not allow, if hcloud server is assigned an running!"
      rm -rv ${MDE_DC_HOST_DIR}/$name
      rm -f $HOME/.dc/var/ssh/control/$name
      rm -f $HOME/.dc/var/ssh/config/$name
      exit 0
    fi
    if [ "$CMD" = "create" ] ; then
      echo "################################################################################"
      echo "# create node <${name}> definition"
      echo "################################################################################"
      if [  "$node_dir" != "null"  ] ; then
        echo "error: node <$name> already exist!"
        exit 1
      fi
      if [ -d ${MDE_DC_HOST_DIR}/$name ] ; then
        echo "error: <${MDE_DC_HOST_DIR}/$name exists!"
        echo "remove it with:  rm -rf ${MDE_DC_HOST_DIR}/$name" 
        exit 1
      fi
      hostname="$name"
      if [ "$2" != "" ] ; then
        hostname="$2"
      fi
      typ="dc"
      if [ "$3" != "" ] ; then
        typ="$3"
      fi
      mkdir -p ${MDE_DC_HOST_DIR}/$name
      cp  /opt/dc/templates/create/node/*     ${MDE_DC_HOST_DIR}/$name
      flist=$(find ${MDE_DC_HOST_DIR}/$name -type f)
      for i in $flist ; do
          sed -i "s|<name>|${name}|g"                 $i
          sed -i "s|<hostname_or_ip>|${hostname}|g"   $i
          sed -i "s|<type>|${typ}|g"                  $i
          echo "created '$i'"
      done   
    fi
    _config_refresh
    exit 0
  fi
fi

if [ "$CMD" = "yq" -o  "$CMD" = "edit"  ] ; then
  if [[ "$1" == "" || ( "$1" != "node" &&  "$1" != "app" ) ]] ; then
    echo "error: unkown type given. Use node or app!"
    exit 1
  fi
  TYP="$1" ; shift
  if [ "$1" == "" ] ; then
    echo "error: no $TYP name given!"
    exit 1
  fi
  name="$1" ; shift
  if [ "$TYP" = "node" ] ; then
    config_dir=$( dc-yq '.nodes.'$name'.node_dir' ${MDE_DC_YAML}  )
    file="node.yml"
  else
    config_dir=$( dc-yq '.apps.'$name'.app_dir' ${MDE_DC_YAML}  )
    file="docker-compose.yml"
  fi
  if [ "$config_dir" = "null" ] ; then
    echo "error: $TYP <$name> does not exists!"
    exit 1
  fi 
  if [ "$CMD" = "edit" ] ; then
    vi $config_dir
  else
    dc-yq "$@" ${config_dir}/${file}
  fi
  exit $?
fi

if [ "$CMD" = "show"  ] ; then
  dc-yq ${MDE_DC_YAML}
fi  

if [ "$CMD" = "check" ] ; then
  MASK="|%s|%-80s|\n"
  printf $MASK "  " "configuration issues"
  printf $MASK "--" "--------------------------------------------------------------------------------"
  printf $MASK "✅" "dc version: $( cat /opt/dc/VERSION)"
  printf $MASK "✅" "last modification of ${MDE_DC_YAML} <$(date -r ${MDE_DC_YAML} "+%Y-%m-%d %H:%M:%S")>"
  grep "Include $HOME/.dc/var/ssh/config/\*"  ~/.ssh/config >/dev/null 2>&1
  if [ "$?" != "0" ] ; then
    printf $MASK "❌" "missing ssh config dir: <Include $HOME/.dc/var/ssh/config/\*> in ~/.ssh/config"
  fi
  nodes=$( dc-yq  '.apps.*.dc.home.[].node'   ${MDE_DC_YAML}  | sort | uniq)
  for h in $nodes ; do
    res=$(  dc-yq '.nodes.'$h'.state' ${MDE_DC_YAML} ) 
    if [ "$res" = "null" ] ; then
      printf $MASK "❌" "missing node definition \".nodes.$h.state:\" in <${MDE_DC_YAML}>"
    elif [ "$res" != "active" ] ; then
      printf $MASK "💡" "\".nodes.$h.state:\" != active"
    fi
  done

  apps=$( dc-yq '(.apps.[] | path )  [-1]'  ${MDE_DC_YAML} | sort )
  for p in $apps ; do
    ignore_vol_check=$( dc-yq '.apps.'$p'.dc.ignore_volume_check' ${MDE_DC_YAML} )
    p_on_nodes=( `dc-yq '.apps.'$p'.dc.home.[].node' ${MDE_DC_YAML}` )   # Array
    s_on_nodes=( `dc-yq '.apps.'$p'.dc.home.[].state' ${MDE_DC_YAML}` )  # Array
    cfg=$( dc-yq '.apps.'$p'.compose_yml' ${MDE_DC_YAML} )
    #
    # check for not unique app names
    #
    anz=$( dc-yq '.apps' ${MDE_DC_YAML} | grep "^${p}:"  | wc -l)
    if [ "$anz" != "1" ] ; then
      printf $MASK "❌" "app name [$p] not unique"
    fi
    #
    # check if app name overrules (mailcowdockerized)
    #
    app_name=$( dc-yq '.apps.'$p'.dc.app_name' ${MDE_DC_YAML} )
    if [ "$app_name" != "null" -a "$app_name" != "" ] ; then
      printf $MASK "💡" "[$p] app name overrule <app_name: $app_name> in $cfg"
    fi

    vol_list=$(dc-yq '.apps.'$p'.compose.services.*.volumes.[].source' ${MDE_DC_YAML} | grep -v "^/etc/"  | grep -v "^/var/" | grep -v "^/lib/" | sort | uniq )

    for h in "${!p_on_nodes[@]}"; do
      if [ "${s_on_nodes[$h]}" != "active" ] ; then
         printf $MASK "💡" "[$p] home.[$h].state: ${s_on_nodes[$h]} != active in $cfg"
      fi
      sstate=$( dc node ${p_on_nodes[$h]} state)
      if [ "$sstate" = "" ] ; then
        printf $MASK "❌" "[$p] error node <${p_on_nodes[$h]}> not reachable, so volume check not possible"
      elif  [ "$sstate" = "off" ] ; then
        connection=$( dc-yq '.nodes.'${p_on_nodes[$h]}'.connection.type' ${MDE_DC_YAML} )
        if [ "$connection" = "wireguard" -o "$connection" = "intermittently" ] ; then
          printf $MASK "⛓️‍💥" "[$p] node disconnected <${p_on_nodes[$h]}>, so volume check not possible"
        fi
      else
        # do volume check
        if [ "$ignore_vol_check" != "true" ] ; then
          for vol in $vol_list ; do
            if [[ "$vol" == "${MDE_DC_VOL_Logs}/$p"     || \
                  "$vol" == "${MDE_DC_VOL_Logs}/$p/"*   || \
                  "$vol" == "${MDE_DC_VOL_Apps}/$p"     || \
                  "$vol" == "${MDE_DC_VOL_Apps}/$p/"*   || \
                  "$vol" == "${MDE_DC_VOL_Cache}/$p"    || \
                  "$vol" == "${MDE_DC_VOL_Cache}/$p/"*  || \
                  "$vol" == "${MDE_DC_VOL_Data}/$p"     || \
                  "$vol" == "${MDE_DC_VOL_Data}/$p/"*      \
               ]] ; then
              # check if $vol exists on node
              ssh ${p_on_nodes[$h]} ls -d $vol >/dev/null 2>&1
              if [ "$?" != "0" ] ; then
                printf $MASK "❌" "[$p] missing volume directory <$vol> on node <${p_on_nodes[$h]}>"
              fi
            else
              printf $MASK "💡" "[$p] volume config <$vol> in $cfg" 
            fi
          done
        else
          printf $MASK "💡" "[$p] ignore volume check <ignore_volume_check: true> in $cfg"
        fi
      fi
    done
  done
fi 
exit 0

