#!/bin/bash

. /opt/dc/etc/config
. /opt/dc/funcs/config-refresh

VARDIR="/var/cache/dc"

_config_refresh()
{
  config_change="0"
  mkdir -p $VARDIR

  list=$( find $VARDIR -name "modified.*" )
  for i in $list ; do
    relPath=${i%/modified.*}
    relPath=${relPath#${VARDIR}/}
    if [ -f $MDE_DC_SERV_DIR/${relPath}/dc-service.yml ] ; then
      continue
    else
      echo "remove $VARDIR/${relPath}"
      rm -rf $VARDIR/${relPath}
      config_change="1"
    fi
  done

  list=$( find $MDE_DC_SERV_DIR -name dc-service.yml )
  for i in $list ; do
    relPath=${i%/dc-service.yml}
    relPath=${relPath#$MDE_DC_SERV_DIR/}
    VAR="${VARDIR}/${i#${MDE_DC_SERV_DIR}/}"
    DIR="${i%/dc-service.yml}"
    last=$( find $MDE_DC_SERV_DIR/${relPath}  -maxdepth 1 -type f -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
    stamp=${last% *}
    #echo "$last"
    if [ -f ${VARDIR}/${relPath}/modified.${stamp} ] ; then
      continue
    else
      rm -rf ${VARDIR}/${relPath}
      mkdir -p ${VARDIR}/${relPath}
      echo "$last" | awk '{ print $2 }' > ${VARDIR}/${relPath}/modified.${stamp}
      compose_yml=$(dc-yq '.service.control.file' $i)
      echo "rebuild dc project for $i"
      cp $i ${VARDIR}/${relPath}/
      docker compose -f $MDE_DC_SERV_DIR/${relPath}/${compose_yml} config > ${VARDIR}/${relPath}/compose.yml
      # overrule project name, if host is mailcowdockerized
      project_name=$(dc-yq '.service.project_name'  $i)
      if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
        dc-yq -i '.name = "'$project_name'"' ${VARDIR}/${relPath}/compose.yml
      fi
      config_change="1"
    fi
  done
  if [ "$config_change" = "1" ] ; then
    echo "re-create: /var/dc/dc.yml"
    rm -f /var/dc/dc.yml
    list=$( find $VARDIR -name "modified.*" )
    for i in $list ; do
      relPath=${i%/modified.*}
      relPath=${relPath#${VARDIR}/}
      compose_yml=$(dc-yq '.service.control.file' $VARDIR/${relPath}/dc-service.yml)
      compose_project=$(dc-yq '.name' $VARDIR/${relPath}/compose.yml)
      echo "${compose_project}:"                                                >> /var/dc/dc.yml
      echo "  dc_yml: $MDE_DC_SERV_DIR/${relPath}/dc-service.yml"                >> /var/dc/dc.yml
      echo "  compose_yml: $MDE_DC_SERV_DIR/${relPath}/${compose_yml}"           >> /var/dc/dc.yml
      cat $VARDIR/${relPath}/dc-service.yml | sed -e "/^version:/d" -e "s/^service:/dc:/g" -e "s/^/  /g" >> /var/dc/dc.yml
      echo "  compose:"                                                         >> /var/dc/dc.yml
      cat $VARDIR/${relPath}/compose.yml | sed -e "s/^/    /g"                  >> /var/dc/dc.yml
    done
  fi
}

if [ "$1" = "" ] ; then
  echo ""
  echo "usage: $IAM check"
  echo "usage: $IAM create project <host> <project-name> <main-service-name> <project-directory>"
  echo ""
  echo "examples:"
  echo ""
  echo "$IAM show     # show dc configuration"
  echo "$IAM show     # show dc configuration"
  echo "$IAM refresh  # refresh dc config environment (/var/dc/dc.yml)"
  echo "$IAM rebuild  # rebuild dc config environment (/var/dc/dc.yml)"
  echo "$IAM create project apps0 test-project filebrowser /root/Services/test-project"
  echo ""
  exit 0
fi

if [ "$1" = "rebuild" ] ; then
  rm -rf $VARDIR
  _config_refresh
  exit $?
fi

if [ "$1" = "refresh" ] ; then
   _config_refresh
  exit $?
fi

if [ "$1" = "create" -a "$2" = "project" ] ; then
  shift ; shift
  host="$1"
  project_name="$2"    # must be unique
  main_service="$3"         # keep it simple, like git,...
  project_dir="$4"

  traefik_net="traefik_default"
  image="filebrowser/filebrowser:v2.25.0"

  if [ -d ${project_dir} ] ; then
    echo "error: ${project_dir} exists!"
    exit 1
  fi
  mkdir -p ${project_dir}
  echo "${project_dir} created"
  cp -r /opt/dc/templates/create-project/.         ${project_dir}/
  flist=$( find  ${project_dir} -type f)
  for i in $flist ; do
    sed -i "s|<project_name>|${project_name}|g"   $i
    sed -i "s|<main_service>|${main_service}|g"   $i
    sed -i "s|<host>|${host}|g"                   $i
    sed -i "s|<image>|${image}|g"                 $i
    sed -i "s|<traefik_net>|${traefik_net}|g"     $i
    echo "$i"
  done
  cd ${project_dir}
  dc up
  dc login ls /
  dc rm
  exit 0
fi

if [ "$1" = "show"  ] ; then
  cat /var/dc/dc.yml
fi  

if [ "$1" = "check" ] ; then
  echo " ‚úÖ last modification of /var/dc/dc.yml <$(date -r /var/dc/dc.yml "+%Y-%m-%d %H:%M:%S")>"
  hosts=$(dc-yq  '.*.dc.hosts.[]'   /var/dc/dc.yml | sort | uniq)
  for h in $host ; do
    if [ ! -f /root/.ssh/dc/config.$h ] ; then
      echo " ‚ùå missing host definition </root/.ssh/dc/config.$h>"
    fi
  done

  projects=$( grep -v "^ " /var/dc/dc.yml | sed "s/://g" | sort )
  for p in $projects ; do
    config_check=$( dc-yq '.'$p'.dc.config_check' /var/dc/dc.yml )
    p_on_hosts=$( dc-yq '.'$p'.dc.hosts.[]' /var/dc/dc.yml )
    cfg=$( dc-yq '.'$p'.compose_yml' /var/dc/dc.yml )
    #
    # check for not unique projects
    #
    anz=$(grep "^${p}:" /var/dc/dc.yml  | wc -l)
    if [ "$anz" != "1" ] ; then
      echo " ‚ùå project name <$p> not unique"
    fi
    #
    # check if project name overrules (mailcowdockerized)
    #
    project_name=$( dc-yq '.'$p'.dc.project_name' /var/dc/dc.yml )
    if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
      echo " üí° project name overrule <project_name: $project_name> in $cfg"
    fi
    if [ "$config_check" != "false" ] ; then
      vol_list=$(dc-yq '.'$p'.compose.services.*.volumes.[].source' /var/dc/dc.yml | grep -v "^/etc/"  | grep -v "^/var/" | grep -v "^/lib/"  )
      for vol in $vol_list ; do
        #echo "  $vol" 
        if [[ "$vol" == "${MDE_DC_DOCKER_VOL}/Logs/$p"         || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Logs/$p/"*       || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Services/$p"     || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Services/$p/"*   || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Cache/$p"        || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Cache/$p/"*      || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Data/$p"         || \
              "$vol" == "${MDE_DC_DOCKER_VOL}/Data/$p/"*          \
           ]] ; then
          # check if $vol exists on host
          for h in $p_on_hosts ; do
            ssh $h ls -d $vol >/dev/null 2>&1
            if [ "$?" != "0" ] ; then
              echo " ‚ùå missing volume directory <$vol> on host <$h>"
            fi
          done
        else
          echo " üí° volume config <$vol> in $cfg" 
        fi
      done
    else
      echo " üí° ignore volume check <config_check: false> in $cfg"
    fi
  done
fi 
exit 0

