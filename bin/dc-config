#!/bin/bash

. /opt/dc/etc/config
. /opt/dc/funcs/config-refresh
VARDIR="/var/cache/dc"

project_dir="$VARDIR/projects"
hosts_dir="$VARDIR/hosts"

_config_refresh()
{
  config_change="0"
  mkdir -p $project_dir
  #
  # remove projects from cache, which do not exits in ${MDE_DC_SERV_DIR} anymore
  #
  list=$( find $project_dir -name "modified.*" )
  for i in $list ; do
    relPath=${i%/modified.*}
    relPath=${relPath#${project_dir}/}
    if [ -f $MDE_DC_SERV_DIR/${relPath}/${MDE_DC_YAML_FILE} ] ; then
      continue
    else
      echo "remove $project_dir/${relPath}"
      rm -rf $project_dir/${relPath}
      config_change="1"
    fi
  done
  #
  # check for changed hosts configurations
  #
  last=$( find /root/.ssh/dc/config  -maxdepth 1 -name "*.yml" -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
  stamp=${last% *}
  if [ ! -f ${hosts_dir}/modified.${stamp} ] ; then
    rm -rf ${hosts_dir}
    mkdir ${hosts_dir}
    echo "$last" | awk '{ print $2 }' > ${hosts_dir}/modified.${stamp}
    list=$( find /root/.ssh/dc/config -name "*.yml" )
    echo "hosts:" > ${hosts_dir}/hosts.yml
    for i in $list ; do
      name=`basename $i`
      name=${name%.yml}
      sed "s|^host:|${name}:|g" $i | sed "s|^|  |g" | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d' >> ${hosts_dir}/hosts.yml
    done
    config_change="1"
  fi
  #
  # check for changed project configurations
  #
  list=$( find $MDE_DC_SERV_DIR -name ${MDE_DC_YAML_FILE} )
  for i in $list ; do
    relPath=${i%/${MDE_DC_YAML_FILE}}
    relPath=${relPath#$MDE_DC_SERV_DIR/}
    VAR="${project_dir}/${i#${MDE_DC_SERV_DIR}/}"
    DIR="${i%/${MDE_DC_YAML_FILE}}"
    last=$( find $MDE_DC_SERV_DIR/${relPath}  -maxdepth 1 -type f -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
    stamp=${last% *}
    #echo "$last"
    if [ -f ${project_dir}/${relPath}/modified.${stamp} ] ; then
      continue
    else
      rm -rf ${project_dir}/${relPath}
      mkdir -p ${project_dir}/${relPath}
      echo "$last" | awk '{ print $2 }' > ${project_dir}/${relPath}/modified.${stamp}
      compose_yml=$(dc-yq '.project.control.file' $i)
      echo "rebuild dc project for $i"
      cp $i ${project_dir}/${relPath}/
      docker compose -f $MDE_DC_SERV_DIR/${relPath}/${compose_yml} config > ${project_dir}/${relPath}/compose.yml
      # overrule project name, if host is mailcowdockerized
      project_name=$(dc-yq '.project.overrule_compose_name'  $i)
      if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
        dc-yq -i '.name = "'$project_name'"' ${project_dir}/${relPath}/compose.yml
      fi
      config_change="1"
    fi
  done



  if [ "$config_change" = "1" ] ; then
    mkdir -p `dirname ${MDE_DC_YAML}`
    echo "re-create: ${MDE_DC_YAML}"
    cp $hosts_dir/hosts.yml ${MDE_DC_YAML}
    #
    # projects
    #
    echo "projects:"                                                              >> ${MDE_DC_YAML}
    list=$( find $project_dir -name "modified.*" )
    for i in $list ; do
      relPath=${i%/modified.*}
      relPath=${relPath#${project_dir}/}
      compose_yml=$(dc-yq '.project.control.file' $project_dir/${relPath}/${MDE_DC_YAML_FILE})
      compose_project=$(dc-yq '.name' $project_dir/${relPath}/compose.yml)
      echo "  ${compose_project}:"                                                >> ${MDE_DC_YAML}
      echo "    project_dir: $MDE_DC_SERV_DIR/${relPath}"                         >> ${MDE_DC_YAML}
      echo "    dc_yml: $MDE_DC_SERV_DIR/${relPath}/${MDE_DC_YAML_FILE}"          >> ${MDE_DC_YAML}
      echo "    compose_yml: $MDE_DC_SERV_DIR/${relPath}/${compose_yml}"          >> ${MDE_DC_YAML}
      #                                         remove comments  remove empty lines        remove version       rename service key to dc    indent
      cat $project_dir/${relPath}/${MDE_DC_YAML_FILE} | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d' |sed -e "/^version:/d" -e "s/^project:/dc:/g" -e "s/^/    /g" >> ${MDE_DC_YAML}
      echo "    compose:"                                                         >> ${MDE_DC_YAML}
      cat $project_dir/${relPath}/compose.yml | sed -e "s/^/      /g"             >> ${MDE_DC_YAML}
    done
  fi
}

if [ "$1" = "" ] ; then
  echo ""
  echo "usage: $IAM check"
  echo "usage: $IAM create project <host> <project-name> <main-service-name> <project-directory>"
  echo ""
  echo "examples:"
  echo ""
  echo "$IAM show     # show dc configuration"
  echo "$IAM refresh  # refresh dc config environment (${MDE_DC_YAML})"
  echo "$IAM rebuild  # rebuild dc config environment (${MDE_DC_YAML})"
  echo "$IAM create project apps0 test-project filebrowser ${MDE_DC_SERV_DIR}/test-project"
  echo ""
  exit 0
fi

if [ "$1" = "rebuild" ] ; then
  rm -rf $VARDIR
  _config_refresh
  exit $?
fi

if [ "$1" = "refresh" ] ; then
   _config_refresh
  exit $?
fi

if [ "$1" = "create" -a "$2" = "project" ] ; then
  shift ; shift
  host="$1"
  project_name="$2"    # must be unique
  main_service="$3"    # keep it simple, like git,...
  project_dir="$4"

  traefik_net="traefik_default"
  image="filebrowser/filebrowser:v2.25.0"

  if [ -d ${project_dir} ] ; then
    echo "error: ${project_dir} exists!"
    exit 1
  fi
  mkdir -p ${project_dir}
  echo "${project_dir} created"
  cp -r /opt/dc/templates/create-project/.         ${project_dir}/
  flist=$( find  ${project_dir} -type f)
  for i in $flist ; do
    sed -i "s|<project_name>|${project_name}|g"   $i
    sed -i "s|<main_service>|${main_service}|g"   $i
    sed -i "s|<host>|${host}|g"                   $i
    sed -i "s|<image>|${image}|g"                 $i
    sed -i "s|<traefik_net>|${traefik_net}|g"     $i
    echo "$i"
  done
  cd ${project_dir}
  dc up
  dc login ls /
  dc rm
  exit 0
fi

if [ "$1" = "show"  ] ; then
  dc-yq ${MDE_DC_YAML}
fi  

if [ "$1" = "check" ] ; then
  echo " ‚úÖ last modification of ${MDE_DC_YAML} <$(date -r ${MDE_DC_YAML} "+%Y-%m-%d %H:%M:%S")>"
  hosts=$( dc-yq  '.projects.*.dc.home.[].host'   ${MDE_DC_YAML}  | sort | uniq)
  for h in $hosts ; do
    res=$(  dc-yq '.hosts.'$h'.state' $MDE_DC_YAML ) 
    if [ "$res" = "null" ] ; then
      echo " ‚ùå missing host definition \".hosts.$h.state:\" in <$MDE_DC_YAM>"
    elif [ "$res" != "active" ] ; then
      echo " üí° \".hosts.$h.state:\" != active"
    fi
  done

  projects=$( dc-yq '(.projects.* | path )  [-1]'  ${MDE_DC_YAML} | sort )
  for p in $projects ; do
    ignore_vol_check=$( dc-yq '.projects.'$p'.dc.ignore_volume_check' ${MDE_DC_YAML} )
    p_on_hosts=( `dc-yq '.projects.'$p'.dc.home.[].host' ${MDE_DC_YAML}` )   # Array
    s_on_hosts=( `dc-yq '.projects.'$p'.dc.home.[].state' ${MDE_DC_YAML}` )  # Array
    cfg=$( dc-yq '.projects.'$p'.compose_yml' ${MDE_DC_YAML} )
    #
    # check for not unique project names
    #
    
    anz=$( dc-yq '.projects' ${MDE_DC_YAML} | grep "^${p}:"  | wc -l)
    if [ "$anz" != "1" ] ; then
      echo " ‚ùå project name [$p] not unique"
    fi
    #
    # check if project name overrules (mailcowdockerized)
    #
    project_name=$( dc-yq '.projects.'$p'.dc.project_name' ${MDE_DC_YAML} )
    if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
      echo " üí° [$p] project name overrule <project_name: $project_name> in $cfg"
    fi

    vol_list=$(dc-yq '.projects.'$p'.compose.services.*.volumes.[].source' ${MDE_DC_YAML} | grep -v "^/etc/"  | grep -v "^/var/" | grep -v "^/lib/" | sort | uniq )

    for h in "${!p_on_hosts[@]}"; do
      if [ "${s_on_hosts[$h]}" != "active" ] ; then
         echo " üí° [$p] home.[$h].state: ${s_on_hosts[$h]} != active in $cfg"
      fi
      ssh ${p_on_hosts[$h]} exit 0 >/dev/null 2>&1
      if [ "$?" != "0" ] ; then
        echo " ‚ùå [$p] error host <${p_on_hosts[$h]}> not reachable, so volume check not possible"
      else
        # do volume check
        if [ "$ignore_vol_check" != "true" ] ; then
          for vol in $vol_list ; do
            #echo "  $vol" 
            if [[ "$vol" == "${MDE_DC_DOCKER_VOL}/Logs/$p"         || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Logs/$p/"*       || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Services/$p"     || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Services/$p/"*   || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Cache/$p"        || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Cache/$p/"*      || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Data/$p"         || \
                  "$vol" == "${MDE_DC_DOCKER_VOL}/Data/$p/"*          \
               ]] ; then
              # check if $vol exists on host
              ssh ${p_on_hosts[$h]} ls -d $vol >/dev/null 2>&1
              if [ "$?" != "0" ] ; then
                echo " ‚ùå [$p] missing volume directory <$vol> on host <${p_on_hosts[$h]}>"
              fi
            else
              echo " üí° [$p] volume config <$vol> in $cfg" 
            fi
          done
        else
          echo " üí° [$p] ignore volume check <ignore_volume_check: true> in $cfg"
        fi
      fi
    done
  done
fi 
exit 0

