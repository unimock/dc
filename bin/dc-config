#!/bin/bash

. /opt/dc/funcs/global


call_from="$(ps -o comm= $PPID)"
if [ "$call_from" == "dc" ] ; then
  IAM="dc config"
else
  IAM="dc-config"
fi

VARDIR="$HOME/.dc/var/cache"

project_dir="$VARDIR/projects"
hosts_dir="$VARDIR/hosts"
config_dir="$VARDIR/config"
############################################################################################################################################
_config_refresh()
{
  config_change="0"
  mkdir -p $project_dir
  #
  # remove projects from cache, which do not exits in ${MDE_DC_PROJ_DIR} anymore
  #
  list=$( find $project_dir -name "modified.*" )
  for i in $list ; do
    relPath=${i%/modified.*}
    relPath=${relPath#${project_dir}/}
    if [ -f ${MDE_DC_PROJ_DIR}/${relPath}/${MDE_DC_YAML_FILE} ] ; then
      continue
    else
      echo "remove $project_dir/${relPath}"
      rm -rf $project_dir/${relPath}
      config_change="1"
    fi
  done
  #
  # check for changed config configurations
  #
  last=$( find ${MDE_DC_CONFIG_DIR} -maxdepth 1 -name "*.yml" -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
  stamp=${last% *}
  if [ ! -f ${config_dir}/modified.${stamp} ] ; then
    rm -rf ${config_dir}
    mkdir ${config_dir}
    echo "$last" | awk '{ print $2 }' > ${config_dir}/modified.${stamp}
    list=$( find ${MDE_DC_CONFIG_DIR} -maxdepth 1  -name "*.yml" )
    # append config definition to cached host file
    echo "config:"                                                                               > ${config_dir}/config.yml
    for yaml in $list ; do
      grep -o '^[^#]*' $yaml | sed "s|^|  |g"                          >> ${config_dir}/config.yml
    done
    config_change="1"
  fi

  #
  # check for changed hosts configurations
  #
  last=$( find ${MDE_DC_HOST_DIR} -maxdepth 2 -name "host.yml" -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
  stamp=${last% *}
  if [ ! -f ${hosts_dir}/modified.${stamp} ] ; then
    rm -rf ${hosts_dir}
    mkdir ${hosts_dir}
    echo "$last" | awk '{ print $2 }' > ${hosts_dir}/modified.${stamp}
    list=$( find ${MDE_DC_HOST_DIR}  -name "host.yml" )
    # append hosts definition to cached host file
    echo "hosts:"                                                                               > ${hosts_dir}/hosts.yml
    rm -rf   $HOME/.dc/var/ssh/config
    mkdir -p $HOME/.dc/var/ssh/config
    mkdir -p $HOME/.dc/var/ssh/control
    for hyaml in $list ; do
      name=${hyaml#${MDE_DC_HOST_DIR}/}
      name=${name%/host.yml}
      echo "  $name:"                                                                           >> ${hosts_dir}/hosts.yml
      echo "    host_dir: ${MDE_DC_HOST_DIR}/$name"                                             >> ${hosts_dir}/hosts.yml
      sed "s|^host:||g" $hyaml | sed "s|^|  |g" | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d'    >> ${hosts_dir}/hosts.yml
      #
      # create ssh config file for this host
      #
      type=$( dc-yq '.host.type'  $hyaml)
      if [ "$type" = "sshd" -o "$type" = "dc" -o "$type" = "dock"  ] ; then
        dc-yq -i '.hosts.'$name'.ssh_config.ControlPath = "'$HOME'/.dc/var/ssh/control/'$name'"' ${hosts_dir}/hosts.yml
        # replace variables off IdentityFile
        IdentityFile=$( dc-yq '.hosts.'$name'.ssh_config.IdentityFile'                              ${hosts_dir}/hosts.yml | envsubst)
        dc-yq -i '.hosts.'$name'.ssh_config.IdentityFile = "'$IdentityFile'"'                      ${hosts_dir}/hosts.yml
        echo "Host $name"                                                                  > $HOME/.dc/var/ssh/config/$name
        echo "    HostName $(dc-yq '.host.fqdn'  $hyaml)"                                 >> $HOME/.dc/var/ssh/config/$name
        echo "    Port $(dc-yq '.host.port'      $hyaml)"                                 >> $HOME/.dc/var/ssh/config/$name
        echo "    ControlPath $HOME/.dc/var/ssh/control/%n"                               >> $HOME/.dc/var/ssh/config/$name
        dc-yq '.host.ssh_config' $hyaml | sed -e 's|: | |g' -e 's|^|    |g'               >> $HOME/.dc/var/ssh/config/$name
      fi
    done
    config_change="1"
  fi
  #
  # check for changed project configurations
  #
  list=$( find ${MDE_DC_PROJ_DIR} -name ${MDE_DC_YAML_FILE} )
  for i in $list ; do
    relPath=${i%/${MDE_DC_YAML_FILE}}
    relPath=${relPath#${MDE_DC_PROJ_DIR}/}
    VAR="${project_dir}/${i#${MDE_DC_PROJ_DIR}/}"
    DIR="${i%/${MDE_DC_YAML_FILE}}"
    last=$( find ${MDE_DC_PROJ_DIR}/${relPath}  -maxdepth 1 -type f -printf "%TF_%TT %p\n" | awk '{if ($0>max) max = $0} END{print max}'   )
    stamp=${last% *}
    #echo "$last"
    if [ -f ${project_dir}/${relPath}/modified.${stamp} ] ; then
      continue
    else
      rm -rf ${project_dir}/${relPath}
      mkdir -p ${project_dir}/${relPath}
      echo "$last" | awk '{ print $2 }' > ${project_dir}/${relPath}/modified.${stamp}
      compose_yml=$(dc-yq '.project.control.file' $i)
      echo "rebuild dc project for $i"
      cp $i ${project_dir}/${relPath}/
      docker compose -f ${MDE_DC_PROJ_DIR}/${relPath}/${compose_yml} config > ${project_dir}/${relPath}/compose.yml
      # overrule project name, if host is mailcowdockerized
      project_name=$(dc-yq '.project.overrule_compose_name'  $i)
      if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
        dc-yq -i '.name = "'$project_name'"' ${project_dir}/${relPath}/compose.yml
      fi
      config_change="1"
    fi
  done

  if [ "$config_change" = "1" ] ; then
    mkdir -p `dirname ${MDE_DC_YAML}`
    echo "re-create: ${MDE_DC_YAML}"
    cp $config_dir/config.yml                                                        ${MDE_DC_YAML}
    cat $hosts_dir/hosts.yml                                                      >> ${MDE_DC_YAML}
    #
    # projects
    #
    echo "projects:"                                                              >> ${MDE_DC_YAML}
    list=$( find $project_dir -name "modified.*" )
    for i in $list ; do
      relPath=${i%/modified.*}
      relPath=${relPath#${project_dir}/}
      compose_yml=$(dc-yq '.project.control.file' $project_dir/${relPath}/${MDE_DC_YAML_FILE})
      compose_project=$(dc-yq '.name' $project_dir/${relPath}/compose.yml)
      echo "  ${compose_project}:"                                                  >> ${MDE_DC_YAML}
      echo "    project_dir: ${MDE_DC_PROJ_DIR}/${relPath}"                         >> ${MDE_DC_YAML}
      echo "    dc_yml: ${MDE_DC_PROJ_DIR}/${relPath}/${MDE_DC_YAML_FILE}"          >> ${MDE_DC_YAML}
      echo "    compose_yml: ${MDE_DC_PROJ_DIR}/${relPath}/${compose_yml}"          >> ${MDE_DC_YAML}
      #                                         remove comments  remove empty lines        remove version       rename service key to dc    indent
      cat $project_dir/${relPath}/${MDE_DC_YAML_FILE} | grep -o '^[^#]*' | sed '/^[[:space:]]*$/d' |sed -e "/^version:/d" -e "s/^project:/dc:/g" -e "s/^/    /g" >> ${MDE_DC_YAML}
      echo "    compose:"                                                         >> ${MDE_DC_YAML}
      cat $project_dir/${relPath}/compose.yml | sed -e "s/^/      /g"             >> ${MDE_DC_YAML}
    done
  fi
}

############################################################################################################################################
# magic main
############################################################################################################################################
if [ "$1" = "" ] ; then
  echo ""
  echo "usage: $IAM ..."
  echo ""
  echo "# common config commands:"
  echo ""
  echo "$IAM show         # show dc configuration"
  echo "$IAM refresh      # refresh dc config environment (${MDE_DC_YAML})"
  echo "$IAM rebuild      # rebuild dc config environment (${MDE_DC_YAML})"
  echo ""
  echo "# create/delete a sample project:"
  echo "" 
  echo "#$IAM create project <name>       <host> <main_service> <project_dir>"
  echo "$IAM  create project test-project apps0  filebrowser ${MDE_DC_PROJ_DIR}/test-project"
  echo "$IAM  delete project test-project"
  echo ""
  echo "# create/delete a host definition"
  echo ""
  echo "#$IAM create host    <host>     [<hostname_or_ip] [type]"
  echo "$IAM  create host    test-host  localhost         ping|sshd|dock|dc # default=dc"
  echo "$IAM  delete host    test-host"
  echo ""
  exit 0
fi

CMD="$1"
shift

######################################################################################################################
if [ "$CMD" = "rebuild" ] ; then
  rm -rf $VARDIR
  _config_refresh
  exit $?
fi

######################################################################################################################
if [ "$CMD" = "refresh" ] ; then
   _config_refresh
  exit $?
fi

######################################################################################################################
if [ "$CMD" = "create" -o "$CMD" = "delete" ] ; then
  TYP="$1"
  shift
  #######################
  # project
  #######################
  if [ "$TYP" = "project" ] ; then
    project_name="$1"    # must be unique
    project_dir=$( dc-yq '.projects.'$project_name'.project_dir'  ${MDE_DC_YAML} )
    if [ "$CMD" = "delete" ] ; then
      echo "################################################################################"
      echo "# delete project <$project_name> definition"
      echo "################################################################################"
      if [ "$project_dir" = "null" ] ; then
        echo "error: project <$project_name> did not exist!"
        exit 1
      fi
      project_hosts=$( dc-yq '.projects.'$project_name'.dc.home.[].host' ${MDE_DC_YAML} )
      for i in $project_hosts ; do
        nrc=$(dc-host $i -p $project_name nrc)
        found=0
        if [ "$nrc" != "0" ] ; then
          echo " $nrc containers still running on <$i> for this project"
          found=1
        fi
      done
      if [ "$found" = "1" ] ; then
        echo "error: do: dc -p ..."
        exit 1
      fi
      echo "TBD: check volumes of project on target host"
      rm -rvf $project_dir
      exit 0
    elif [ "$CMD" = "create" ] ; then
      echo "################################################################################"
      echo "# create project <$project_name>"
      echo "################################################################################"
      host="$2"
      if [ "$(dc-yq '.hosts.'$host'.state' ${MDE_DC_YAML})" = "null" ] ; then
        echo "error: host <$host> did not exist!"
        exit 1
      fi
      if [ "$project_dir" != "null" ] ;then
        echo "error: project <$project_name> already exists!"     
        exit 1
      fi
      main_service="$3"    # keep it simple, like: git,...
      conf_dir="$4"
      traefik_net="traefik_default"
      image="filebrowser/filebrowser:v2.25.0"
      if [ -d ${conf_dir} ] ; then
        echo "error: ${conf_dir} exists!"
        exit 1
      fi
      mkdir -p ${conf_dir}
      echo "${conf_dir} created"
      cp -r /opt/dc/templates/create/project/.   ${conf_dir}/
      flist=$( find  ${conf_dir} -type f)
      for i in $flist ; do
        sed -i "s|<project_name>|${project_name}|g"   $i
        sed -i "s|<main_service>|${main_service}|g"   $i
        sed -i "s|<host>|${host}|g"                   $i
        sed -i "s|<image>|${image}|g"                 $i
        sed -i "s|<traefik_net>|${traefik_net}|g"     $i
        echo "$i"
      done
      cd ${conf_dir}
      dc config refresh
      #dc up
      #dc login ls /
      #dc rm
      exit 0
    fi
  fi
  #######################
  # host
  #######################
  if [ "$TYP" = "host" ] ; then
    name="$1"
    if [ "$name" = "" ] ; then
      echo "error: invalid host name <$name> given!"
      exit 1
    fi
    host_dir=$( dc-yq '.hosts.'$name'.host_dir' ${MDE_DC_YAML} )
    if [ "$CMD" = "delete" ] ; then
      echo "################################################################################"
      echo "# delete host <$name> definition"
      echo "################################################################################"
      if [ "$host_dir" = "null" ] ; then
         echo "error: host <$name> did not exist!"
         exit 1
      fi
      if [ "$( dc-list projects -h $name)" != "" ] ; then
        echo "error: the following projects still defined for host <$name> :"
        dc-list projects -h $name | sed "s|^| - |g" 
        exit 1
      fi
      echo "TBD in $0 : do not allow, if hcloud server is assigned an running!"
      rm -rv ${MDE_DC_HOST_DIR}/$name
      rm -f $HOME/.dc/var/ssh/control/$name
      rm -f $HOME/.dc/var/ssh/config/$name
      exit 0
    fi
    if [ "$CMD" = "create" ] ; then
      echo "################################################################################"
      echo "# create host <${name}> definition"
      echo "################################################################################"
      if [  "$host_dir" != "null"  ] ; then
        echo "error: host <$name> already exist!"
        exit 1
      fi
      if [ -d ${MDE_DC_HOST_DIR}/$name ] ; then
        echo "error: <${MDE_DC_HOST_DIR}/$name exists!"
        echo "remove it with:  rm -rf ${MDE_DC_HOST_DIR}/$name" 
        exit 1
      fi
      hostname="$name"
      if [ "$2" != "" ] ; then
        hostname="$2"
      fi
      typ="dc"
      if [ "$3" != "" ] ; then
        typ="$3"
      fi
      mkdir -p ${MDE_DC_HOST_DIR}/$name
      cp  /opt/dc/templates/create/host/*     ${MDE_DC_HOST_DIR}/$name
      flist=$(find ${MDE_DC_HOST_DIR}/$name -type f)
      for i in $flist ; do
          sed -i "s|<name>|${name}|g"                 $i
          sed -i "s|<hostname_or_ip>|${hostname}|g"   $i
          sed -i "s|<type>|${typ}|g"                  $i
          echo "created '$i'"
      done   
    fi
    exit 0
  fi
fi

if [ "$CMD" = "yq" -o  "$CMD" = "edit"  ] ; then
  if [[ "$1" == "" || ( "$1" != "host" &&  "$1" != "project" ) ]] ; then
    echo "error: unkown type given. Use host or project!"
    exit 1
  fi
  TYP="$1" ; shift
  if [ "$1" == "" ] ; then
    echo "error: no $TYP name given!"
    exit 1
  fi
  name="$1" ; shift
  rest=$@
  if [ "$TYP" = "host" ] ; then
    config_dir=$( dc-yq '.hosts.'$name'.host_dir' ${MDE_DC_YAML}  )
    file="host.yml"
  else
    config_dir=$( dc-yq '.projects.'$name'.project_dir' ${MDE_DC_YAML}  )
    file="docker-compose.yml"
  fi
  if [ "$config_dir" = "null" ] ; then
    echo "error: $TYP <$name> does not exists!"
    exit 1
  fi 
  if [ "$CMD" = "edit" ] ; then
    vi $config_dir
  else
    echo "currently not suppoprted!!!!"
  fi
  exit $?  
fi

if [ "$CMD" = "show"  ] ; then
  dc-yq ${MDE_DC_YAML}
fi  

if [ "$CMD" = "check" ] ; then
  echo " ✅ dc version: $( cat /opt/dc/VERSION)"
  echo " ✅ last modification of ${MDE_DC_YAML} <$(date -r ${MDE_DC_YAML} "+%Y-%m-%d %H:%M:%S")>"
  grep "Include $HOME/.dc/var/ssh/config/\*"  ~/.ssh/config >/dev/null 2>&1
  if [ "$?" != "0" ] ; then
    echo " ❌ missing ssh config dir: <Include $HOME/.dc/var/ssh/config/\*> in ~/.ssh/config"
  fi
  hosts=$( dc-yq  '.projects.*.dc.home.[].host'   ${MDE_DC_YAML}  | sort | uniq)
  for h in $hosts ; do
    res=$(  dc-yq '.hosts.'$h'.state' ${MDE_DC_YAML} ) 
    if [ "$res" = "null" ] ; then
      echo " ❌ missing host definition \".hosts.$h.state:\" in <${MDE_DC_YAML}>"
    elif [ "$res" != "active" ] ; then
      echo " 💡 \".hosts.$h.state:\" != active"
    fi
  done

  projects=$( dc-yq '(.projects.* | path )  [-1]'  ${MDE_DC_YAML} | sort )
  for p in $projects ; do
    ignore_vol_check=$( dc-yq '.projects.'$p'.dc.ignore_volume_check' ${MDE_DC_YAML} )
    p_on_hosts=( `dc-yq '.projects.'$p'.dc.home.[].host' ${MDE_DC_YAML}` )   # Array
    s_on_hosts=( `dc-yq '.projects.'$p'.dc.home.[].state' ${MDE_DC_YAML}` )  # Array
    cfg=$( dc-yq '.projects.'$p'.compose_yml' ${MDE_DC_YAML} )
    #
    # check for not unique project names
    #
    anz=$( dc-yq '.projects' ${MDE_DC_YAML} | grep "^${p}:"  | wc -l)
    if [ "$anz" != "1" ] ; then
      echo " ❌ project name [$p] not unique"
    fi
    #
    # check if project name overrules (mailcowdockerized)
    #
    project_name=$( dc-yq '.projects.'$p'.dc.project_name' ${MDE_DC_YAML} )
    if [ "$project_name" != "null" -a "$project_name" != "" ] ; then
      echo " 💡 [$p] project name overrule <project_name: $project_name> in $cfg"
    fi

    vol_list=$(dc-yq '.projects.'$p'.compose.services.*.volumes.[].source' ${MDE_DC_YAML} | grep -v "^/etc/"  | grep -v "^/var/" | grep -v "^/lib/" | sort | uniq )

    for h in "${!p_on_hosts[@]}"; do
      if [ "${s_on_hosts[$h]}" != "active" ] ; then
         echo " 💡 [$p] home.[$h].state: ${s_on_hosts[$h]} != active in $cfg"
      fi
      ssh ${p_on_hosts[$h]} exit 0 >/dev/null 2>&1
      if [ "$?" != "0" ] ; then
        echo " ❌ [$p] error host <${p_on_hosts[$h]}> not reachable, so volume check not possible"
      else
        # do volume check
        if [ "$ignore_vol_check" != "true" ] ; then
          for vol in $vol_list ; do
            #echo "  $vol" 
            if [[ "$vol" == "${MDE_DC_VOL_Logs}/$p"         || \
                  "$vol" == "${MDE_DC_VOL_Logs}/$p/"*       || \
                  "$vol" == "${MDE_DC_VOL_Projects}/$p"     || \
                  "$vol" == "${MDE_DC_VOL_Projects}/$p/"*   || \
                  "$vol" == "${MDE_DC_VOL_Cache}/$p"        || \
                  "$vol" == "${MDE_DC_VOL_Cache}/$p/"*      || \
                  "$vol" == "${MDE_DC_VOL_Data}/$p"         || \
                  "$vol" == "${MDE_DC_VOL_Data}/$p/"*          \
               ]] ; then
              # check if $vol exists on host
              ssh ${p_on_hosts[$h]} ls -d $vol >/dev/null 2>&1
              if [ "$?" != "0" ] ; then
                echo " ❌ [$p] missing volume directory <$vol> on host <${p_on_hosts[$h]}>"
              fi
            else
              echo " 💡 [$p] volume config <$vol> in $cfg" 
            fi
          done
        else
          echo " 💡 [$p] ignore volume check <ignore_volume_check: true> in $cfg"
        fi
      fi
    done
  done
fi 
exit 0

