#
# https://www.gnu.org/software/gnuastro/manual/html_node/Bash-TAB-completion-tutorial.html
#
# $1 The name of the command, here it is ‘q’.
# $2 The current word being completed (empty unless we are in the middle of typing a word).
# $3 The word before the word being completed. 
#
# prev="${COMP_WORDS[COMP_CWORD-2]}"
# ‘--’ instructs compgen to only reply with a list of words that match $2

#COMPREPLY=( $(ls | wc -l) )

#haystack='foo bar'
#needle='bar'
#
#if [[ " $haystack " =~ .*\ $needle\ .* ]]; then
#    ...
#fi
#  prev="${COMP_WORDS[COMP_CWORD-1]}"

function INLIST() {
  _list="$2"
  for i in $_list ; do
    if [ "$i" = "$1" ] ; then
      return 0
    fi
  done
  return 1     
}


_dc() {
  # -t ..
  if [[ "$3" == "-n" ]] ; then
    COMPREPLY=( $(compgen -W "dc all" -- "$2") )
  # -n ..
  elif [[ "$3" == "-n" ]] ; then
    list=$( dc-list nodes dc  )
    COMPREPLY=( $(compgen -W "$list" -- "$2") )
  # -p ..
  elif  [[ "$3" == "-p" ]] ; then
    list=$( dc-list projects )
    COMPREPLY=( $(compgen -W "$list" -- "$2") )
  # dc
  elif [[ "$COMP_CWORD" == "1" ]] ; then
    COMPREPLY=( $(compgen -W "project ssh-control-reset versions update readme inspect node install vserver batch list manage config ls mount umount login" -- "$2") )
  # dc project ..
  elif [[  "$COMP_CWORD" == "2" && "$3" == "project" ]] ; then
    list=$( dc-list projects )
    COMPREPLY=( $(compgen -W "$list" -- "$2") )
  elif [[ "${COMP_WORDS[1]}" = "project" ]] ; then
    if  [[  "$COMP_CWORD" == "3" ]]  ; then
      COMPREPLY=( $(compgen -W "config" -- "$2") )
    elif [[ "${COMP_WORDS[3]}" == "config" ]] ; then
      if [[ "$COMP_CWORD" == "4" ]] ; then
        COMPREPLY=( $(compgen -W "create delete yq edit" -- "$2") )
      elif [[ "${COMP_WORDS[4]}" == "create" ]] ; then
        if [[ "$COMP_CWORD" == "5" ]] ; then
          list=$( dc-list nodes dc )
          COMPREPLY=( $(compgen -W "$list" -- "$2") )
        elif  [[ "$COMP_CWORD" == "6" ]] ; then
          COMPREPLY=( $(compgen -W "<main_service>" -- "$2") )
        elif [[ "$COMP_CWORD" == "7" ]] ; then
          compopt -o default; COMPREPLY=() # work on filesystem
        fi
      fi
    fi
  # dc node
  elif [[  "$COMP_CWORD" == "2" && "$3" == "node" ]] ; then
    list=$( dc-list nodes all)
    COMPREPLY=( $(compgen -W "-t $list" -- "$2") )
  elif [[  "${COMP_WORDS[1]}" == "node"  ]] ; then 
    if  [[  "$COMP_CWORD" == "3" ]]  ; then
      COMPREPLY=( $(compgen -W "vserver config ports state upgrade update nrc reboot large_files dir_entries cmd image prune list check start stop rm rmup up ps ip" -- "$2") )
    elif [[ "${COMP_WORDS[3]}" == "vserver" ]] ; then
      # dc node <name> vserver
      if [[ "$COMP_CWORD" == "4" ]] ; then
        COMPREPLY=( $(compgen -W "create delete assign rebuild install" -- "$2") )
      elif [[ "${COMP_WORDS[4]}" == "assign" ]] ; then
        if [[ "$COMP_CWORD" == "5" ]] ; then
          COMPREPLY=( $(compgen -W "<vserver_name>" -- "$2") )
        elif [[ "$COMP_CWORD" == "6" ]] ; then
          COMPREPLY=( $(compgen -W "$(ls -1 /opt/dc/templates/create/vserver/ | sed -e "s|.yml||g")" -- "$2") )
        fi
      fi 
    elif [[ "${COMP_WORDS[3]}" == "config" ]] ; then
      if [[ "$COMP_CWORD" == "4" ]] ; then
        COMPREPLY=( $(compgen -W "create delete yq edit" -- "$2") )
      elif [[ "${COMP_WORDS[4]}" == "create" ]] ; then
        if [[ "$COMP_CWORD" == "5" ]] ; then
          COMPREPLY=( $(compgen -W "[<hostname_or_ip>]" -- "$2") )
        elif [[ "$COMP_CWORD" == "6" ]] ; then
          COMPREPLY=( $(compgen -W "ping sshd dock dc" -- "$2") )
        fi
      fi
    fi




  # dc config ..
  elif [[  "$COMP_CWORD" == "2" && "$3" == "config" ]] ; then
    COMPREPLY=( $(compgen -W "show refresh rebuild create delete yq edit check" -- "$2") )
  # dc config <> ...
  elif [[ "${COMP_WORDS[1]}" = "config" ]] ; then
    # dc config delete|  ..
    if  [[  "$COMP_CWORD" == "3" ]] && INLIST $3 "create delete yq edit" ; then
      COMPREPLY=( $(compgen -W "node project" -- "$2") )
    # dc config delete|edit|yq node ..
    elif [[ "${COMP_WORDS[3]}" == "node" ]] ; then
      if [[ "${COMP_WORDS[2]}" == "create" ]] ; then
        if [[ "$COMP_CWORD" == "4" ]] ; then
          COMPREPLY=( $(compgen -W "<dc_node_name>" -- "$2") )
        elif [[ "$COMP_CWORD" == "5" ]] ; then
          COMPREPLY=( $(compgen -W "[<hostname_or_ip>]" -- "$2") )
        elif [[ "$COMP_CWORD" == "6" ]] ; then
          COMPREPLY=( $(compgen -W "ping sshd dock dc" -- "$2") )
        fi
      else
        list=$( dc-list nodes all  )
        COMPREPLY=( $(compgen -W "$list" -- "$2") )
      fi
    # dc config delete|edit|yq project
    elif [[ "${COMP_WORDS[3]}" == "project"  ]] ; then
      if [[ "${COMP_WORDS[2]}" == "create" ]] ; then
        if [[ "$COMP_CWORD" == "4" ]] ; then
          COMPREPLY=( $(compgen -W "<project_name>" -- "$2") )
        elif [[ "$COMP_CWORD" == "5" ]] ; then
          list=$( dc-list nodes dc )
          COMPREPLY=( $(compgen -W "$list" -- "$2") )
        elif [[ "$COMP_CWORD" == "6" ]] ; then
          COMPREPLY=( $(compgen -W "<main_service>" -- "$2") )
        elif [[ "$COMP_CWORD" == "7" ]] ; then
          compopt -o default; COMPREPLY=() # work on filesystem
        fi
      else 
        list=$( dc-list projects )
        COMPREPLY=( $(compgen -W "$list" -- "$2") )
      fi
    fi
  # dc ls .. 
  elif [[  "$COMP_CWORD" == "2" && "$3" == "ls" ]] ; then
    COMPREPLY=( $(compgen -W "projects nodes" -- "$2") )
  elif [[ "${COMP_WORDS[1]}" = "ls" && "$COMP_CWORD" == "3" ]] ; then
      COMPREPLY=( $(compgen -W "--inspect" -- "$2") )
  # dc list
  elif [[  "$COMP_CWORD" == "2" && "$3" == "list" ]] ; then
    COMPREPLY=( $(compgen -W "nodes projects" -- "$2") )
  # dc list node
  elif [[  "$COMP_CWORD" == "3" && "$3" == "nodes" ]] ; then
    COMPREPLY=( $(compgen -W "all dc used" -- "$2") )
  # dc vserver
  elif [[  "$COMP_CWORD" == "2" && "$3" == "vserver" ]] ; then
    COMPREPLY=( $(compgen -W "reboot install assign create info list delete" -- "$2") )
  fi
}
complete -F _dc dc



  # q devl
  #if [[  "$COMP_CWORD" == "2" && "$3" == "devl" ]] ; then
  #  COMPREPLY=( $(compgen -W "build create delete on off up down snapshot copy login cmd" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "devl" ]] ; then
  #  if [[ "${COMP_WORDS[2]}" == "build" && "${COMP_WORDS[3]}" == "deb" ]] ; then
  #    if [[ "$COMP_CWORD" == "5" ]] ; then
  #      COMPREPLY=( $(compgen -W "$packages" -- "$2") )
  #    else
  #      COMPREPLY=( $(compgen -W "$systems" -- "$2") )
  #    fi
  #  elif [[ "${COMP_WORDS[2]}" == "build" ]] ; then
  #    COMPREPLY=( $(compgen -W "deb" -- "$2") )
  #  fi
  #fi

  #if [[ "$COMP_CWORD" == "2"  && ( " $systems " =~ .*\ ${3}\ .* ) ]] ; then
  #    # q xp
  #    COMPREPLY=( $(compgen -W "log dump create delete on off atf up down log snapshot copy login cmd install dump migration" -- "$2") )
  # q devl
  #if [[  "$COMP_CWORD" == "2" && "$3" == "devl" ]] ; then
  #  COMPREPLY=( $(compgen -W "build create delete on off up down snapshot copy login cmd" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "devl" ]] ; then
  #  if [[ "${COMP_WORDS[2]}" == "build" && "${COMP_WORDS[3]}" == "deb" ]] ; then
  #    if [[ "$COMP_CWORD" == "5" ]] ; then
  #      COMPREPLY=( $(compgen -W "$packages" -- "$2") )
  #    else
  #      COMPREPLY=( $(compgen -W "$systems" -- "$2") )
  #    fi
  #  elif [[ "${COMP_WORDS[2]}" == "build" ]] ; then
  #    COMPREPLY=( $(compgen -W "deb" -- "$2") )
  #  fi
  #fi

  #if [[ "$COMP_CWORD" == "2"  && ( " $systems " =~ .*\ ${3}\ .* ) ]] ; then
  #    # q xp
  #    COMPREPLY=( $(compgen -W "log dump create delete on off atf up down log snapshot copy login cmd install dump migration" -- "$2") )
  # q devl
  #if [[  "$COMP_CWORD" == "2" && "$3" == "devl" ]] ; then
  #  COMPREPLY=( $(compgen -W "build create delete on off up down snapshot copy login cmd" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "devl" ]] ; then
  #  if [[ "${COMP_WORDS[2]}" == "build" && "${COMP_WORDS[3]}" == "deb" ]] ; then
  #    if [[ "$COMP_CWORD" == "5" ]] ; then
  #      COMPREPLY=( $(compgen -W "$packages" -- "$2") )
  #    else
  #      COMPREPLY=( $(compgen -W "$systems" -- "$2") )
  #    fi
  #  elif [[ "${COMP_WORDS[2]}" == "build" ]] ; then
  #    COMPREPLY=( $(compgen -W "deb" -- "$2") )
  #  fi
  #fi

  #if [[ "$COMP_CWORD" == "2"  && ( " $systems " =~ .*\ ${3}\ .* ) ]] ; then
  #    # q xp
  #    COMPREPLY=( $(compgen -W "log dump create delete on off atf up down log snapshot copy login cmd install dump migration" -- "$2") )
  # q devl
  #if [[  "$COMP_CWORD" == "2" && "$3" == "devl" ]] ; then
  #  COMPREPLY=( $(compgen -W "build create delete on off up down snapshot copy login cmd" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "devl" ]] ; then
  #  if [[ "${COMP_WORDS[2]}" == "build" && "${COMP_WORDS[3]}" == "deb" ]] ; then
  #    if [[ "$COMP_CWORD" == "5" ]] ; then
  #      COMPREPLY=( $(compgen -W "$packages" -- "$2") )
  #    else
  #      COMPREPLY=( $(compgen -W "$systems" -- "$2") )
  #    fi
  #  elif [[ "${COMP_WORDS[2]}" == "build" ]] ; then
  #    COMPREPLY=( $(compgen -W "deb" -- "$2") )
  #  fi
  #fi

  #if [[ "$COMP_CWORD" == "2"  && ( " $systems " =~ .*\ ${3}\ .* ) ]] ; then
  #    # q xp
  #    COMPREPLY=( $(compgen -W "log dump create delete on off atf up down log snapshot copy login cmd install dump migration" -- "$2") )
  # q devl
  #if [[  "$COMP_CWORD" == "2" && "$3" == "devl" ]] ; then
  #  COMPREPLY=( $(compgen -W "build create delete on off up down snapshot copy login cmd" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "devl" ]] ; then
  #  if [[ "${COMP_WORDS[2]}" == "build" && "${COMP_WORDS[3]}" == "deb" ]] ; then
  #    if [[ "$COMP_CWORD" == "5" ]] ; then
  #      COMPREPLY=( $(compgen -W "$packages" -- "$2") )
  #    else
  #      COMPREPLY=( $(compgen -W "$systems" -- "$2") )
  #    fi
  #  elif [[ "${COMP_WORDS[2]}" == "build" ]] ; then
  #    COMPREPLY=( $(compgen -W "deb" -- "$2") )
  #  fi
  #fi

  #if [[ "$COMP_CWORD" == "2"  && ( " $systems " =~ .*\ ${3}\ .* ) ]] ; then
  #    # q xp
  #    COMPREPLY=( $(compgen -W "log dump create delete on off atf up down log snapshot copy login cmd install dump migration" -- "$2") )
  #fi  
  #if [[ "${COMP_WORDS[2]}" == "atf" && "${COMP_WORDS[3]}" == "test" ]] ; then
  #  if [ -f ${COMP_WORDS[4]} ] ; then
  #    COMPREPLY=( $(compgen -W "<file> config run evaluate" -- "$2") ) 
  #  else
  #    compopt -o default; COMPREPLY=()
  #  fi
  #elif [[ "${COMP_WORDS[2]}" == "atf" && "${COMP_WORDS[3]}" == "complete" ]] ; then
  #  compopt -o default; COMPREPLY=()
  #elif [[ "$3" == "atf" ]] ; then
  #  COMPREPLY=( $(compgen -W "take reset complete create delete test abort" -- "$2") )
  #elif [[ "$3" == "log" ]] ; then
  #  COMPREPLY=( $(compgen -W "cp tail reset" -- "$2") )
  #elif [[ "$3" == "dump" ]] ; then
  #  COMPREPLY=( $(compgen -W "proc rt tt pt state wc" -- "$2") )
  #elif [[ "$3" == "snapshot" ]] ; then
  #  COMPREPLY=( $(compgen -W "list take restore delete exists" -- "$2") )
  #elif [[ "$3" == "install" ]] ; then
  #  COMPREPLY=( $(compgen -W "vmc bin vmo simd tx_gui complete ds env sysreg" -- "$2") )
  #elif [[ "$3" == "dump" ]] ; then
  #  COMPREPLY=( $(compgen -W "proc rt tt pt state wc" -- "$2") )
  #elif [[ "$3" == "migration" ]] ; then
  #    COMPREPLY=( $(compgen -W "provision migrate reboot complete" -- "$2") )
  #elif [[ "${COMP_WORDS[2]}" == "migration" && "${COMP_WORDS[3]}" == "provision" ]] ; then
  #  compopt -o default; COMPREPLY=()
  #elif [[ "${COMP_WORDS[2]}" == "copy"  ]] ; then
  #  compopt -o default; COMPREPLY=()
  #fi
  
  ## q jenkins
  #if [[ "${COMP_WORDS[1]}" == "jenkins"  && "$COMP_CWORD" == "2" ]] ; then
  #      COMPREPLY=( $(compgen -W "list tail less info get" -- "$2") )
  #fi
  ## q info
  #if [[ "${COMP_WORDS[1]}" == "info" && "$COMP_CWORD" == "2" ]] ; then
  #    list=$( ls -1 ../info/ | sed -e "s/.md//g" )
  #    COMPREPLY=( $(compgen -W "$list" -- "$2") )
  #fi
  # q macros
  #if [[ "${COMP_WORDS[1]}" == "macros" && "$COMP_CWORD" == "2" ]] ; then
  #    list=$( find ./macros/ -maxdepth 1  -type f | sed -e "s|./macros/||g" )
  #    COMPREPLY=( $(compgen -W "$list" -- "$2") )
  #fi
  #if [[ "${COMP_WORDS[1]}" == "vpn" && "$COMP_CWORD" == "2"  ]] ; then
  #      COMPREPLY=( $(compgen -W "stop" -- "$2") )
 #fi


